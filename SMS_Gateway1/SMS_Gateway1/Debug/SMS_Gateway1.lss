
SMS_Gateway1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000592c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040592c  0040592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000087c  20000000  00405934  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000011c  2000087c  004061b0  0002087c  2**2
                  ALLOC
  4 .stack        00003000  20000998  004062cc  0002087c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208aa  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000c0ee  00000000  00000000  00020903  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002075  00000000  00000000  0002c9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003bf9  00000000  00000000  0002ea66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000007b0  00000000  00000000  0003265f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006b0  00000000  00000000  00032e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000176d5  00000000  00000000  000334bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a640  00000000  00000000  0004ab94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067860  00000000  00000000  000551d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002104  00000000  00000000  000bca34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003998 	.word	0x20003998
  400004:	0040086d 	.word	0x0040086d
  400008:	00400869 	.word	0x00400869
  40000c:	00400869 	.word	0x00400869
  400010:	00400869 	.word	0x00400869
  400014:	00400869 	.word	0x00400869
  400018:	00400869 	.word	0x00400869
	...
  40002c:	00400869 	.word	0x00400869
  400030:	00400869 	.word	0x00400869
  400034:	00000000 	.word	0x00000000
  400038:	00400869 	.word	0x00400869
  40003c:	00400869 	.word	0x00400869
  400040:	00400869 	.word	0x00400869
  400044:	00400869 	.word	0x00400869
  400048:	00400869 	.word	0x00400869
  40004c:	00400869 	.word	0x00400869
  400050:	00400869 	.word	0x00400869
  400054:	00400869 	.word	0x00400869
  400058:	00400869 	.word	0x00400869
  40005c:	00400869 	.word	0x00400869
  400060:	00400869 	.word	0x00400869
  400064:	00400869 	.word	0x00400869
  400068:	00400869 	.word	0x00400869
  40006c:	00400869 	.word	0x00400869
  400070:	00400869 	.word	0x00400869
  400074:	00400869 	.word	0x00400869
  400078:	00400869 	.word	0x00400869
  40007c:	00400869 	.word	0x00400869
  400080:	00400869 	.word	0x00400869
  400084:	00400869 	.word	0x00400869
  400088:	00400869 	.word	0x00400869
  40008c:	00400c81 	.word	0x00400c81
  400090:	00400869 	.word	0x00400869
  400094:	00400b2d 	.word	0x00400b2d
  400098:	00400869 	.word	0x00400869
  40009c:	00400869 	.word	0x00400869
  4000a0:	00400869 	.word	0x00400869
  4000a4:	00400869 	.word	0x00400869
  4000a8:	00400869 	.word	0x00400869
  4000ac:	00400869 	.word	0x00400869
  4000b0:	00400869 	.word	0x00400869
  4000b4:	00400869 	.word	0x00400869
  4000b8:	00400869 	.word	0x00400869
  4000bc:	00400869 	.word	0x00400869
  4000c0:	00400869 	.word	0x00400869
  4000c4:	00400869 	.word	0x00400869
  4000c8:	00400869 	.word	0x00400869
  4000cc:	00400869 	.word	0x00400869
  4000d0:	00400869 	.word	0x00400869
  4000d4:	00400869 	.word	0x00400869
  4000d8:	00400869 	.word	0x00400869
  4000dc:	00400869 	.word	0x00400869
  4000e0:	00400869 	.word	0x00400869
  4000e4:	00400869 	.word	0x00400869
  4000e8:	00400869 	.word	0x00400869
  4000ec:	00400869 	.word	0x00400869
  4000f0:	00400b1d 	.word	0x00400b1d
  4000f4:	00400869 	.word	0x00400869

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000087c 	.word	0x2000087c
  400114:	00000000 	.word	0x00000000
  400118:	00405934 	.word	0x00405934

0040011c <frame_dummy>:
  40011c:	4b08      	ldr	r3, [pc, #32]	; (400140 <frame_dummy+0x24>)
  40011e:	b510      	push	{r4, lr}
  400120:	b11b      	cbz	r3, 40012a <frame_dummy+0xe>
  400122:	4908      	ldr	r1, [pc, #32]	; (400144 <frame_dummy+0x28>)
  400124:	4808      	ldr	r0, [pc, #32]	; (400148 <frame_dummy+0x2c>)
  400126:	f3af 8000 	nop.w
  40012a:	4808      	ldr	r0, [pc, #32]	; (40014c <frame_dummy+0x30>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b903      	cbnz	r3, 400132 <frame_dummy+0x16>
  400130:	bd10      	pop	{r4, pc}
  400132:	4b07      	ldr	r3, [pc, #28]	; (400150 <frame_dummy+0x34>)
  400134:	2b00      	cmp	r3, #0
  400136:	d0fb      	beq.n	400130 <frame_dummy+0x14>
  400138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40013c:	4718      	bx	r3
  40013e:	bf00      	nop
  400140:	00000000 	.word	0x00000000
  400144:	20000880 	.word	0x20000880
  400148:	00405934 	.word	0x00405934
  40014c:	00405934 	.word	0x00405934
  400150:	00000000 	.word	0x00000000

00400154 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400156:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40015a:	4bae      	ldr	r3, [pc, #696]	; (400414 <board_init+0x2c0>)
  40015c:	605c      	str	r4, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40015e:	2009      	movs	r0, #9
  400160:	4dad      	ldr	r5, [pc, #692]	; (400418 <board_init+0x2c4>)
  400162:	47a8      	blx	r5
  400164:	200a      	movs	r0, #10
  400166:	47a8      	blx	r5
  400168:	200b      	movs	r0, #11
  40016a:	47a8      	blx	r5
  40016c:	200c      	movs	r0, #12
  40016e:	47a8      	blx	r5
  400170:	200d      	movs	r0, #13
  400172:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400174:	4ba9      	ldr	r3, [pc, #676]	; (40041c <board_init+0x2c8>)
  400176:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40017a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40017c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400180:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400182:	4aa7      	ldr	r2, [pc, #668]	; (400420 <board_init+0x2cc>)
  400184:	2104      	movs	r1, #4
  400186:	6151      	str	r1, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400188:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40018c:	6651      	str	r1, [r2, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40018e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400192:	6551      	str	r1, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400194:	6211      	str	r1, [r2, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400196:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40019a:	6f10      	ldr	r0, [r2, #112]	; 0x70
  40019c:	f020 0004 	bic.w	r0, r0, #4
  4001a0:	6710      	str	r0, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001a2:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4001a4:	f020 0004 	bic.w	r0, r0, #4
  4001a8:	6750      	str	r0, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4001aa:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4001ae:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4001b2:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001b6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  4001ba:	6610      	str	r0, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001bc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001c0:	6550      	str	r0, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001c2:	6250      	str	r0, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001c4:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001c8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4001ca:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  4001ce:	6715      	str	r5, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001d0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4001d2:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  4001d6:	6755      	str	r5, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4001d8:	6050      	str	r0, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4001de:	6618      	str	r0, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001e0:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001e4:	6558      	str	r0, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001e6:	6258      	str	r0, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001e8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001ec:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4001ee:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
  4001f2:	671d      	str	r5, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001f4:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4001f6:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
  4001fa:	675d      	str	r5, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4001fc:	6058      	str	r0, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001fe:	2501      	movs	r5, #1
  400200:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400202:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400206:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400208:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40020a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40020e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400210:	f026 0601 	bic.w	r6, r6, #1
  400214:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400216:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  400218:	f026 0601 	bic.w	r6, r6, #1
  40021c:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40021e:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400220:	2502      	movs	r5, #2
  400222:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400224:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400228:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40022a:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40022c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400230:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400232:	f026 0602 	bic.w	r6, r6, #2
  400236:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400238:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40023a:	f026 0602 	bic.w	r6, r6, #2
  40023e:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400240:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400242:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  400246:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400248:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40024c:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40024e:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400250:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400254:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400256:	f426 3680 	bic.w	r6, r6, #65536	; 0x10000
  40025a:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40025c:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40025e:	f426 3680 	bic.w	r6, r6, #65536	; 0x10000
  400262:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400264:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400266:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400268:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40026c:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40026e:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400270:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400274:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  400276:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
  40027a:	671d      	str	r5, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40027c:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40027e:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
  400282:	675d      	str	r5, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400284:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400286:	2408      	movs	r4, #8
  400288:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40028a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40028e:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400290:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400292:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400296:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  400298:	f025 0508 	bic.w	r5, r5, #8
  40029c:	671d      	str	r5, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40029e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4002a0:	f025 0508 	bic.w	r5, r5, #8
  4002a4:	675d      	str	r5, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002a6:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002a8:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002aa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002ae:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002b0:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002b2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002b6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4002b8:	f024 0404 	bic.w	r4, r4, #4
  4002bc:	671c      	str	r4, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002be:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4002c0:	f024 0404 	bic.w	r4, r4, #4
  4002c4:	675c      	str	r4, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002c6:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002c8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  4002cc:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002ce:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002d2:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002d4:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002d6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002da:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4002e0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002e4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4002e8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002ea:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4002f0:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002f2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002f6:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002f8:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002fa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002fe:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  400300:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  400304:	671c      	str	r4, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400306:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  400308:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  40030c:	675c      	str	r4, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40030e:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400310:	2440      	movs	r4, #64	; 0x40
  400312:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400314:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400318:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40031a:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40031c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400320:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400322:	f026 0640 	bic.w	r6, r6, #64	; 0x40
  400326:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400328:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40032a:	f026 0640 	bic.w	r6, r6, #64	; 0x40
  40032e:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400330:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400332:	2420      	movs	r4, #32
  400334:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400336:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40033a:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40033c:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400342:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400344:	f026 0620 	bic.w	r6, r6, #32
  400348:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40034a:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40034c:	f026 0620 	bic.w	r6, r6, #32
  400350:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400352:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400354:	2480      	movs	r4, #128	; 0x80
  400356:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400358:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40035c:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40035e:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400360:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400364:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400366:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40036a:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40036c:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40036e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  400372:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400374:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400376:	2410      	movs	r4, #16
  400378:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40037a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40037e:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400380:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400382:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400386:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400388:	f026 0610 	bic.w	r6, r6, #16
  40038c:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40038e:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  400390:	f026 0610 	bic.w	r6, r6, #16
  400394:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400396:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400398:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40039c:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40039e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003a2:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003a4:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003a6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003aa:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  4003ac:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
  4003b0:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003b2:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  4003b4:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
  4003b8:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ba:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003bc:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  4003c0:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003c2:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003c6:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003c8:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ca:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003ce:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  4003d0:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  4003d4:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003d6:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  4003d8:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  4003dc:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003de:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003e0:	f44f 7680 	mov.w	r6, #256	; 0x100
  4003e4:	661e      	str	r6, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003e6:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003ea:	655e      	str	r6, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003ec:	625e      	str	r6, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ee:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003f2:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  4003f4:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  4003f8:	671f      	str	r7, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003fa:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  4003fc:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  400400:	675f      	str	r7, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400402:	605e      	str	r6, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400404:	f44f 7600 	mov.w	r6, #512	; 0x200
  400408:	661e      	str	r6, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40040a:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40040e:	655e      	str	r6, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400410:	625e      	str	r6, [r3, #36]	; 0x24
  400412:	e007      	b.n	400424 <board_init+0x2d0>
  400414:	400e1850 	.word	0x400e1850
  400418:	004006a5 	.word	0x004006a5
  40041c:	400e1400 	.word	0x400e1400
  400420:	400e0e00 	.word	0x400e0e00
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400424:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400428:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  40042a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  40042e:	671f      	str	r7, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400430:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  400432:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  400436:	675f      	str	r7, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400438:	605e      	str	r6, [r3, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40043a:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  40043e:	615e      	str	r6, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400440:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400444:	6615      	str	r5, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400446:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40044a:	6555      	str	r5, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40044c:	6255      	str	r5, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40044e:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400452:	6f13      	ldr	r3, [r2, #112]	; 0x70
  400454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400458:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40045a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40045c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400460:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400462:	6055      	str	r5, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400464:	6614      	str	r4, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400466:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40046a:	6554      	str	r4, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40046c:	6254      	str	r4, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40046e:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400472:	6f13      	ldr	r3, [r2, #112]	; 0x70
  400474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  400478:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40047a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40047c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  400480:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400482:	6054      	str	r4, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400484:	6610      	str	r0, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400486:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40048a:	6550      	str	r0, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40048c:	6250      	str	r0, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40048e:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400492:	6f13      	ldr	r3, [r2, #112]	; 0x70
  400494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  400498:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40049a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40049c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  4004a0:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004a2:	6050      	str	r0, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4004a4:	6611      	str	r1, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4004a6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4004aa:	6551      	str	r1, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4004ac:	6251      	str	r1, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4004ae:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4004b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4004b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4004b8:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4004ba:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4004bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4004c0:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c2:	6051      	str	r1, [r2, #4]
  4004c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004c6:	bf00      	nop

004004c8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004c8:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004ca:	480e      	ldr	r0, [pc, #56]	; (400504 <sysclk_init+0x3c>)
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x40>)
  4004ce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4004d0:	213e      	movs	r1, #62	; 0x3e
  4004d2:	2000      	movs	r0, #0
  4004d4:	4b0d      	ldr	r3, [pc, #52]	; (40050c <sysclk_init+0x44>)
  4004d6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004d8:	4c0d      	ldr	r4, [pc, #52]	; (400510 <sysclk_init+0x48>)
  4004da:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4004dc:	2800      	cmp	r0, #0
  4004de:	d0fc      	beq.n	4004da <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4004e0:	4b0c      	ldr	r3, [pc, #48]	; (400514 <sysclk_init+0x4c>)
  4004e2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4004e4:	4a0c      	ldr	r2, [pc, #48]	; (400518 <sysclk_init+0x50>)
  4004e6:	4b0d      	ldr	r3, [pc, #52]	; (40051c <sysclk_init+0x54>)
  4004e8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4004ea:	4c0d      	ldr	r4, [pc, #52]	; (400520 <sysclk_init+0x58>)
  4004ec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4004ee:	2800      	cmp	r0, #0
  4004f0:	d0fc      	beq.n	4004ec <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004f2:	2010      	movs	r0, #16
  4004f4:	4b0b      	ldr	r3, [pc, #44]	; (400524 <sysclk_init+0x5c>)
  4004f6:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004f8:	4b0b      	ldr	r3, [pc, #44]	; (400528 <sysclk_init+0x60>)
  4004fa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004fc:	4801      	ldr	r0, [pc, #4]	; (400504 <sysclk_init+0x3c>)
  4004fe:	4b02      	ldr	r3, [pc, #8]	; (400508 <sysclk_init+0x40>)
  400500:	4798      	blx	r3
  400502:	bd10      	pop	{r4, pc}
  400504:	07270e00 	.word	0x07270e00
  400508:	00400a59 	.word	0x00400a59
  40050c:	00400621 	.word	0x00400621
  400510:	00400675 	.word	0x00400675
  400514:	00400685 	.word	0x00400685
  400518:	20133f01 	.word	0x20133f01
  40051c:	400e0400 	.word	0x400e0400
  400520:	00400695 	.word	0x00400695
  400524:	004005b9 	.word	0x004005b9
  400528:	00400949 	.word	0x00400949

0040052c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40052c:	b990      	cbnz	r0, 400554 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40052e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400532:	460c      	mov	r4, r1
  400534:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400536:	2a00      	cmp	r2, #0
  400538:	dd0f      	ble.n	40055a <_read+0x2e>
  40053a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40053c:	4e08      	ldr	r6, [pc, #32]	; (400560 <_read+0x34>)
  40053e:	4d09      	ldr	r5, [pc, #36]	; (400564 <_read+0x38>)
  400540:	6830      	ldr	r0, [r6, #0]
  400542:	4621      	mov	r1, r4
  400544:	682b      	ldr	r3, [r5, #0]
  400546:	4798      	blx	r3
		ptr++;
  400548:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40054a:	42a7      	cmp	r7, r4
  40054c:	d1f8      	bne.n	400540 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40054e:	4640      	mov	r0, r8
  400550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400554:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400558:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40055a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40055c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400560:	20000990 	.word	0x20000990
  400564:	20000988 	.word	0x20000988

00400568 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400568:	3801      	subs	r0, #1
  40056a:	2802      	cmp	r0, #2
  40056c:	d815      	bhi.n	40059a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40056e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400572:	460e      	mov	r6, r1
  400574:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400576:	b19a      	cbz	r2, 4005a0 <_write+0x38>
  400578:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40057a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4005b4 <_write+0x4c>
  40057e:	4f0c      	ldr	r7, [pc, #48]	; (4005b0 <_write+0x48>)
  400580:	f8d8 0000 	ldr.w	r0, [r8]
  400584:	f815 1b01 	ldrb.w	r1, [r5], #1
  400588:	683b      	ldr	r3, [r7, #0]
  40058a:	4798      	blx	r3
  40058c:	2800      	cmp	r0, #0
  40058e:	db0a      	blt.n	4005a6 <_write+0x3e>
  400590:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400592:	3c01      	subs	r4, #1
  400594:	d1f4      	bne.n	400580 <_write+0x18>
  400596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40059a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40059e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005a0:	2000      	movs	r0, #0
  4005a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4005a6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4005aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005ae:	bf00      	nop
  4005b0:	2000098c 	.word	0x2000098c
  4005b4:	20000990 	.word	0x20000990

004005b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005b8:	4a18      	ldr	r2, [pc, #96]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  4005ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005c0:	4318      	orrs	r0, r3
  4005c2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005c6:	f013 0f08 	tst.w	r3, #8
  4005ca:	d003      	beq.n	4005d4 <pmc_switch_mck_to_pllack+0x1c>
  4005cc:	e009      	b.n	4005e2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ce:	3b01      	subs	r3, #1
  4005d0:	d103      	bne.n	4005da <pmc_switch_mck_to_pllack+0x22>
  4005d2:	e01e      	b.n	400612 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005d8:	4910      	ldr	r1, [pc, #64]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  4005da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005dc:	f012 0f08 	tst.w	r2, #8
  4005e0:	d0f5      	beq.n	4005ce <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005e2:	4a0e      	ldr	r2, [pc, #56]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  4005e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005e6:	f023 0303 	bic.w	r3, r3, #3
  4005ea:	f043 0302 	orr.w	r3, r3, #2
  4005ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005f0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4005f2:	f010 0008 	ands.w	r0, r0, #8
  4005f6:	d004      	beq.n	400602 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4005f8:	2000      	movs	r0, #0
  4005fa:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005fc:	3b01      	subs	r3, #1
  4005fe:	d103      	bne.n	400608 <pmc_switch_mck_to_pllack+0x50>
  400600:	e009      	b.n	400616 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400602:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400606:	4905      	ldr	r1, [pc, #20]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  400608:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40060a:	f012 0f08 	tst.w	r2, #8
  40060e:	d0f5      	beq.n	4005fc <pmc_switch_mck_to_pllack+0x44>
  400610:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400612:	2001      	movs	r0, #1
  400614:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400616:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400618:	4770      	bx	lr
  40061a:	bf00      	nop
  40061c:	400e0400 	.word	0x400e0400

00400620 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400620:	b138      	cbz	r0, 400632 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400622:	4911      	ldr	r1, [pc, #68]	; (400668 <pmc_switch_mainck_to_xtal+0x48>)
  400624:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400626:	4a11      	ldr	r2, [pc, #68]	; (40066c <pmc_switch_mainck_to_xtal+0x4c>)
  400628:	401a      	ands	r2, r3
  40062a:	4b11      	ldr	r3, [pc, #68]	; (400670 <pmc_switch_mainck_to_xtal+0x50>)
  40062c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40062e:	620b      	str	r3, [r1, #32]
  400630:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400632:	480d      	ldr	r0, [pc, #52]	; (400668 <pmc_switch_mainck_to_xtal+0x48>)
  400634:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400636:	0209      	lsls	r1, r1, #8
  400638:	b289      	uxth	r1, r1
  40063a:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40063e:	f023 0303 	bic.w	r3, r3, #3
  400642:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400646:	f043 0301 	orr.w	r3, r3, #1
  40064a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40064c:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40064e:	4602      	mov	r2, r0
  400650:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400652:	f013 0f01 	tst.w	r3, #1
  400656:	d0fb      	beq.n	400650 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400658:	4a03      	ldr	r2, [pc, #12]	; (400668 <pmc_switch_mainck_to_xtal+0x48>)
  40065a:	6a13      	ldr	r3, [r2, #32]
  40065c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400664:	6213      	str	r3, [r2, #32]
  400666:	4770      	bx	lr
  400668:	400e0400 	.word	0x400e0400
  40066c:	fec8fffc 	.word	0xfec8fffc
  400670:	01370002 	.word	0x01370002

00400674 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400674:	4b02      	ldr	r3, [pc, #8]	; (400680 <pmc_osc_is_ready_mainck+0xc>)
  400676:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400678:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop
  400680:	400e0400 	.word	0x400e0400

00400684 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400684:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400688:	4b01      	ldr	r3, [pc, #4]	; (400690 <pmc_disable_pllack+0xc>)
  40068a:	629a      	str	r2, [r3, #40]	; 0x28
  40068c:	4770      	bx	lr
  40068e:	bf00      	nop
  400690:	400e0400 	.word	0x400e0400

00400694 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400694:	4b02      	ldr	r3, [pc, #8]	; (4006a0 <pmc_is_locked_pllack+0xc>)
  400696:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400698:	f000 0002 	and.w	r0, r0, #2
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop
  4006a0:	400e0400 	.word	0x400e0400

004006a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4006a4:	282f      	cmp	r0, #47	; 0x2f
  4006a6:	d81e      	bhi.n	4006e6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4006a8:	281f      	cmp	r0, #31
  4006aa:	d80c      	bhi.n	4006c6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4006ac:	4b11      	ldr	r3, [pc, #68]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006ae:	699a      	ldr	r2, [r3, #24]
  4006b0:	2301      	movs	r3, #1
  4006b2:	4083      	lsls	r3, r0
  4006b4:	4393      	bics	r3, r2
  4006b6:	d018      	beq.n	4006ea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4006b8:	2301      	movs	r3, #1
  4006ba:	fa03 f000 	lsl.w	r0, r3, r0
  4006be:	4b0d      	ldr	r3, [pc, #52]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006c0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006c2:	2000      	movs	r0, #0
  4006c4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4006c6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4006c8:	4b0a      	ldr	r3, [pc, #40]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4006ce:	2301      	movs	r3, #1
  4006d0:	4083      	lsls	r3, r0
  4006d2:	4393      	bics	r3, r2
  4006d4:	d00b      	beq.n	4006ee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4006d6:	2301      	movs	r3, #1
  4006d8:	fa03 f000 	lsl.w	r0, r3, r0
  4006dc:	4b05      	ldr	r3, [pc, #20]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006de:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4006e2:	2000      	movs	r0, #0
  4006e4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4006e6:	2001      	movs	r0, #1
  4006e8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006ea:	2000      	movs	r0, #0
  4006ec:	4770      	bx	lr
  4006ee:	2000      	movs	r0, #0
}
  4006f0:	4770      	bx	lr
  4006f2:	bf00      	nop
  4006f4:	400e0400 	.word	0x400e0400

004006f8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4006f8:	b508      	push	{r3, lr}
  4006fa:	2013      	movs	r0, #19
  4006fc:	4b01      	ldr	r3, [pc, #4]	; (400704 <spi_enable_clock+0xc>)
  4006fe:	4798      	blx	r3
  400700:	bd08      	pop	{r3, pc}
  400702:	bf00      	nop
  400704:	004006a5 	.word	0x004006a5

00400708 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400708:	6843      	ldr	r3, [r0, #4]
  40070a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40070e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400710:	6843      	ldr	r3, [r0, #4]
  400712:	0409      	lsls	r1, r1, #16
  400714:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400718:	430b      	orrs	r3, r1
  40071a:	6043      	str	r3, [r0, #4]
  40071c:	4770      	bx	lr
  40071e:	bf00      	nop

00400720 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  400720:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  400722:	f643 2399 	movw	r3, #15001	; 0x3a99
  400726:	e001      	b.n	40072c <spi_read+0xc>
		if (!timeout--) {
  400728:	3b01      	subs	r3, #1
  40072a:	d00e      	beq.n	40074a <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40072c:	6904      	ldr	r4, [r0, #16]
  40072e:	f014 0f01 	tst.w	r4, #1
  400732:	d0f9      	beq.n	400728 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  400734:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400736:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  400738:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40073c:	bf1c      	itt	ne
  40073e:	f3c3 4003 	ubfxne	r0, r3, #16, #4
  400742:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  400744:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  400746:	2000      	movs	r0, #0
  400748:	e000      	b.n	40074c <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  40074a:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  40074c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400750:	4770      	bx	lr
  400752:	bf00      	nop

00400754 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400754:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400756:	f643 2499 	movw	r4, #15001	; 0x3a99
  40075a:	e001      	b.n	400760 <spi_write+0xc>
		if (!timeout--) {
  40075c:	3c01      	subs	r4, #1
  40075e:	d011      	beq.n	400784 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400760:	6905      	ldr	r5, [r0, #16]
  400762:	f015 0f02 	tst.w	r5, #2
  400766:	d0f9      	beq.n	40075c <spi_write+0x8>
  400768:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40076a:	f014 0f02 	tst.w	r4, #2
  40076e:	d006      	beq.n	40077e <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400770:	0412      	lsls	r2, r2, #16
  400772:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400776:	4311      	orrs	r1, r2
		if (uc_last) {
  400778:	b10b      	cbz	r3, 40077e <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  40077a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40077e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400780:	2000      	movs	r0, #0
  400782:	e000      	b.n	400786 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  400784:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  400786:	bc30      	pop	{r4, r5}
  400788:	4770      	bx	lr
  40078a:	bf00      	nop

0040078c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40078c:	b132      	cbz	r2, 40079c <spi_set_clock_polarity+0x10>
  40078e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400792:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400794:	f043 0301 	orr.w	r3, r3, #1
  400798:	6303      	str	r3, [r0, #48]	; 0x30
  40079a:	4770      	bx	lr
  40079c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4007a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007a2:	f023 0301 	bic.w	r3, r3, #1
  4007a6:	6303      	str	r3, [r0, #48]	; 0x30
  4007a8:	4770      	bx	lr
  4007aa:	bf00      	nop

004007ac <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4007ac:	b132      	cbz	r2, 4007bc <spi_set_clock_phase+0x10>
  4007ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4007b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007b4:	f043 0302 	orr.w	r3, r3, #2
  4007b8:	6303      	str	r3, [r0, #48]	; 0x30
  4007ba:	4770      	bx	lr
  4007bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4007c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007c2:	f023 0302 	bic.w	r3, r3, #2
  4007c6:	6303      	str	r3, [r0, #48]	; 0x30
  4007c8:	4770      	bx	lr
  4007ca:	bf00      	nop

004007cc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4007cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4007d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4007d6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4007d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007da:	431a      	orrs	r2, r3
  4007dc:	630a      	str	r2, [r1, #48]	; 0x30
  4007de:	4770      	bx	lr

004007e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4007e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4007e2:	23ac      	movs	r3, #172	; 0xac
  4007e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4007e6:	680b      	ldr	r3, [r1, #0]
  4007e8:	684a      	ldr	r2, [r1, #4]
  4007ea:	fbb3 f3f2 	udiv	r3, r3, r2
  4007ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4007f0:	1e5c      	subs	r4, r3, #1
  4007f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4007f6:	4294      	cmp	r4, r2
  4007f8:	d80a      	bhi.n	400810 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4007fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4007fc:	688b      	ldr	r3, [r1, #8]
  4007fe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400800:	f240 2302 	movw	r3, #514	; 0x202
  400804:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400808:	2350      	movs	r3, #80	; 0x50
  40080a:	6003      	str	r3, [r0, #0]

	return 0;
  40080c:	2000      	movs	r0, #0
  40080e:	e000      	b.n	400812 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400810:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400812:	f85d 4b04 	ldr.w	r4, [sp], #4
  400816:	4770      	bx	lr

00400818 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400818:	6943      	ldr	r3, [r0, #20]
  40081a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40081e:	bf1a      	itte	ne
  400820:	61c1      	strne	r1, [r0, #28]
	return 0;
  400822:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400824:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400826:	4770      	bx	lr

00400828 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400828:	6943      	ldr	r3, [r0, #20]
  40082a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40082e:	bf1d      	ittte	ne
  400830:	6983      	ldrne	r3, [r0, #24]
  400832:	700b      	strbne	r3, [r1, #0]
	return 0;
  400834:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400836:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400838:	4770      	bx	lr
  40083a:	bf00      	nop

0040083c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40083c:	6943      	ldr	r3, [r0, #20]
  40083e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400842:	bf1d      	ittte	ne
  400844:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400848:	61c1      	strne	r1, [r0, #28]
	return 0;
  40084a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40084c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40084e:	4770      	bx	lr

00400850 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400850:	6943      	ldr	r3, [r0, #20]
  400852:	f013 0f01 	tst.w	r3, #1
  400856:	d005      	beq.n	400864 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400858:	6983      	ldr	r3, [r0, #24]
  40085a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40085e:	600b      	str	r3, [r1, #0]

	return 0;
  400860:	2000      	movs	r0, #0
  400862:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400864:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400866:	4770      	bx	lr

00400868 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400868:	e7fe      	b.n	400868 <Dummy_Handler>
  40086a:	bf00      	nop

0040086c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40086c:	b500      	push	{lr}
  40086e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400870:	4b27      	ldr	r3, [pc, #156]	; (400910 <Reset_Handler+0xa4>)
  400872:	4a28      	ldr	r2, [pc, #160]	; (400914 <Reset_Handler+0xa8>)
  400874:	429a      	cmp	r2, r3
  400876:	d003      	beq.n	400880 <Reset_Handler+0x14>
		for (; pDest < &_erelocate;) {
  400878:	4b27      	ldr	r3, [pc, #156]	; (400918 <Reset_Handler+0xac>)
  40087a:	4a25      	ldr	r2, [pc, #148]	; (400910 <Reset_Handler+0xa4>)
  40087c:	429a      	cmp	r2, r3
  40087e:	d304      	bcc.n	40088a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400880:	4b26      	ldr	r3, [pc, #152]	; (40091c <Reset_Handler+0xb0>)
  400882:	4a27      	ldr	r2, [pc, #156]	; (400920 <Reset_Handler+0xb4>)
  400884:	429a      	cmp	r2, r3
  400886:	d30f      	bcc.n	4008a8 <Reset_Handler+0x3c>
  400888:	e01a      	b.n	4008c0 <Reset_Handler+0x54>
  40088a:	4921      	ldr	r1, [pc, #132]	; (400910 <Reset_Handler+0xa4>)
  40088c:	4b25      	ldr	r3, [pc, #148]	; (400924 <Reset_Handler+0xb8>)
  40088e:	1a5b      	subs	r3, r3, r1
  400890:	f023 0303 	bic.w	r3, r3, #3
  400894:	3304      	adds	r3, #4
  400896:	4a1f      	ldr	r2, [pc, #124]	; (400914 <Reset_Handler+0xa8>)
  400898:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  40089a:	f852 0b04 	ldr.w	r0, [r2], #4
  40089e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4008a2:	429a      	cmp	r2, r3
  4008a4:	d1f9      	bne.n	40089a <Reset_Handler+0x2e>
  4008a6:	e7eb      	b.n	400880 <Reset_Handler+0x14>
  4008a8:	4b1f      	ldr	r3, [pc, #124]	; (400928 <Reset_Handler+0xbc>)
  4008aa:	4a20      	ldr	r2, [pc, #128]	; (40092c <Reset_Handler+0xc0>)
  4008ac:	1ad2      	subs	r2, r2, r3
  4008ae:	f022 0203 	bic.w	r2, r2, #3
  4008b2:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008b4:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4008b6:	2100      	movs	r1, #0
  4008b8:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008bc:	4293      	cmp	r3, r2
  4008be:	d1fb      	bne.n	4008b8 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4008c0:	4a1b      	ldr	r2, [pc, #108]	; (400930 <Reset_Handler+0xc4>)
  4008c2:	4b1c      	ldr	r3, [pc, #112]	; (400934 <Reset_Handler+0xc8>)
  4008c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4008c8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4008ce:	fab3 f383 	clz	r3, r3
  4008d2:	095b      	lsrs	r3, r3, #5
  4008d4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4008d6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008dc:	2200      	movs	r2, #0
  4008de:	4b16      	ldr	r3, [pc, #88]	; (400938 <Reset_Handler+0xcc>)
  4008e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008e2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008e4:	4a15      	ldr	r2, [pc, #84]	; (40093c <Reset_Handler+0xd0>)
  4008e6:	6813      	ldr	r3, [r2, #0]
  4008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008ec:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008ee:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4008f2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008f6:	b129      	cbz	r1, 400904 <Reset_Handler+0x98>
		cpu_irq_enable();
  4008f8:	2201      	movs	r2, #1
  4008fa:	4b0f      	ldr	r3, [pc, #60]	; (400938 <Reset_Handler+0xcc>)
  4008fc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008fe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400902:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400904:	4b0e      	ldr	r3, [pc, #56]	; (400940 <Reset_Handler+0xd4>)
  400906:	4798      	blx	r3

	/* Branch to main function */
	main();
  400908:	4b0e      	ldr	r3, [pc, #56]	; (400944 <Reset_Handler+0xd8>)
  40090a:	4798      	blx	r3
  40090c:	e7fe      	b.n	40090c <Reset_Handler+0xa0>
  40090e:	bf00      	nop
  400910:	20000000 	.word	0x20000000
  400914:	00405934 	.word	0x00405934
  400918:	2000087c 	.word	0x2000087c
  40091c:	20000998 	.word	0x20000998
  400920:	2000087c 	.word	0x2000087c
  400924:	2000087b 	.word	0x2000087b
  400928:	20000880 	.word	0x20000880
  40092c:	2000099b 	.word	0x2000099b
  400930:	e000ed00 	.word	0xe000ed00
  400934:	00400000 	.word	0x00400000
  400938:	20000000 	.word	0x20000000
  40093c:	e000ed88 	.word	0xe000ed88
  400940:	00400f95 	.word	0x00400f95
  400944:	00400e1d 	.word	0x00400e1d

00400948 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400948:	4b3c      	ldr	r3, [pc, #240]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  40094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40094c:	f003 0303 	and.w	r3, r3, #3
  400950:	2b01      	cmp	r3, #1
  400952:	d00f      	beq.n	400974 <SystemCoreClockUpdate+0x2c>
  400954:	b113      	cbz	r3, 40095c <SystemCoreClockUpdate+0x14>
  400956:	2b02      	cmp	r3, #2
  400958:	d029      	beq.n	4009ae <SystemCoreClockUpdate+0x66>
  40095a:	e057      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40095c:	4b38      	ldr	r3, [pc, #224]	; (400a40 <SystemCoreClockUpdate+0xf8>)
  40095e:	695b      	ldr	r3, [r3, #20]
  400960:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400964:	bf14      	ite	ne
  400966:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40096a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40096e:	4b35      	ldr	r3, [pc, #212]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400970:	601a      	str	r2, [r3, #0]
  400972:	e04b      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400974:	4b31      	ldr	r3, [pc, #196]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  400976:	6a1b      	ldr	r3, [r3, #32]
  400978:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40097c:	d003      	beq.n	400986 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40097e:	4a32      	ldr	r2, [pc, #200]	; (400a48 <SystemCoreClockUpdate+0x100>)
  400980:	4b30      	ldr	r3, [pc, #192]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400982:	601a      	str	r2, [r3, #0]
  400984:	e042      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400986:	4a31      	ldr	r2, [pc, #196]	; (400a4c <SystemCoreClockUpdate+0x104>)
  400988:	4b2e      	ldr	r3, [pc, #184]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  40098a:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40098c:	4b2b      	ldr	r3, [pc, #172]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  40098e:	6a1b      	ldr	r3, [r3, #32]
  400990:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400994:	2b10      	cmp	r3, #16
  400996:	d002      	beq.n	40099e <SystemCoreClockUpdate+0x56>
  400998:	2b20      	cmp	r3, #32
  40099a:	d004      	beq.n	4009a6 <SystemCoreClockUpdate+0x5e>
  40099c:	e036      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40099e:	4a2c      	ldr	r2, [pc, #176]	; (400a50 <SystemCoreClockUpdate+0x108>)
  4009a0:	4b28      	ldr	r3, [pc, #160]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009a2:	601a      	str	r2, [r3, #0]
				break;
  4009a4:	e032      	b.n	400a0c <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4009a6:	4a28      	ldr	r2, [pc, #160]	; (400a48 <SystemCoreClockUpdate+0x100>)
  4009a8:	4b26      	ldr	r3, [pc, #152]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009aa:	601a      	str	r2, [r3, #0]
				break;
  4009ac:	e02e      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4009ae:	4b23      	ldr	r3, [pc, #140]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009b0:	6a1b      	ldr	r3, [r3, #32]
  4009b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009b6:	d003      	beq.n	4009c0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4009b8:	4a23      	ldr	r2, [pc, #140]	; (400a48 <SystemCoreClockUpdate+0x100>)
  4009ba:	4b22      	ldr	r3, [pc, #136]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009bc:	601a      	str	r2, [r3, #0]
  4009be:	e012      	b.n	4009e6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009c0:	4a22      	ldr	r2, [pc, #136]	; (400a4c <SystemCoreClockUpdate+0x104>)
  4009c2:	4b20      	ldr	r3, [pc, #128]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009c4:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009c6:	4b1d      	ldr	r3, [pc, #116]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009c8:	6a1b      	ldr	r3, [r3, #32]
  4009ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009ce:	2b10      	cmp	r3, #16
  4009d0:	d002      	beq.n	4009d8 <SystemCoreClockUpdate+0x90>
  4009d2:	2b20      	cmp	r3, #32
  4009d4:	d004      	beq.n	4009e0 <SystemCoreClockUpdate+0x98>
  4009d6:	e006      	b.n	4009e6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4009d8:	4a1d      	ldr	r2, [pc, #116]	; (400a50 <SystemCoreClockUpdate+0x108>)
  4009da:	4b1a      	ldr	r3, [pc, #104]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009dc:	601a      	str	r2, [r3, #0]
				break;
  4009de:	e002      	b.n	4009e6 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4009e0:	4a19      	ldr	r2, [pc, #100]	; (400a48 <SystemCoreClockUpdate+0x100>)
  4009e2:	4b18      	ldr	r3, [pc, #96]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009e4:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4009e6:	4b15      	ldr	r3, [pc, #84]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ea:	f003 0303 	and.w	r3, r3, #3
  4009ee:	2b02      	cmp	r3, #2
  4009f0:	d10c      	bne.n	400a0c <SystemCoreClockUpdate+0xc4>
		{
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009f2:	4a12      	ldr	r2, [pc, #72]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4009f8:	4812      	ldr	r0, [pc, #72]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009fa:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4009fe:	6803      	ldr	r3, [r0, #0]
  400a00:	fb01 3303 	mla	r3, r1, r3, r3
  400a04:	b2d2      	uxtb	r2, r2
  400a06:	fbb3 f3f2 	udiv	r3, r3, r2
  400a0a:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400a0c:	4b0b      	ldr	r3, [pc, #44]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  400a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a14:	2b70      	cmp	r3, #112	; 0x70
  400a16:	d107      	bne.n	400a28 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  400a18:	4a0a      	ldr	r2, [pc, #40]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400a1a:	6813      	ldr	r3, [r2, #0]
  400a1c:	490d      	ldr	r1, [pc, #52]	; (400a54 <SystemCoreClockUpdate+0x10c>)
  400a1e:	fba1 1303 	umull	r1, r3, r1, r3
  400a22:	085b      	lsrs	r3, r3, #1
  400a24:	6013      	str	r3, [r2, #0]
  400a26:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400a28:	4b04      	ldr	r3, [pc, #16]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  400a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a2c:	4905      	ldr	r1, [pc, #20]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400a2e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400a32:	680b      	ldr	r3, [r1, #0]
  400a34:	40d3      	lsrs	r3, r2
  400a36:	600b      	str	r3, [r1, #0]
  400a38:	4770      	bx	lr
  400a3a:	bf00      	nop
  400a3c:	400e0400 	.word	0x400e0400
  400a40:	400e1810 	.word	0x400e1810
  400a44:	20000004 	.word	0x20000004
  400a48:	00b71b00 	.word	0x00b71b00
  400a4c:	003d0900 	.word	0x003d0900
  400a50:	007a1200 	.word	0x007a1200
  400a54:	aaaaaaab 	.word	0xaaaaaaab

00400a58 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a58:	4b12      	ldr	r3, [pc, #72]	; (400aa4 <system_init_flash+0x4c>)
  400a5a:	4298      	cmp	r0, r3
  400a5c:	d804      	bhi.n	400a68 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a62:	4b11      	ldr	r3, [pc, #68]	; (400aa8 <system_init_flash+0x50>)
  400a64:	601a      	str	r2, [r3, #0]
  400a66:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400a68:	4b10      	ldr	r3, [pc, #64]	; (400aac <system_init_flash+0x54>)
  400a6a:	4298      	cmp	r0, r3
  400a6c:	d803      	bhi.n	400a76 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a6e:	4a10      	ldr	r2, [pc, #64]	; (400ab0 <system_init_flash+0x58>)
  400a70:	4b0d      	ldr	r3, [pc, #52]	; (400aa8 <system_init_flash+0x50>)
  400a72:	601a      	str	r2, [r3, #0]
  400a74:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400a76:	4b0f      	ldr	r3, [pc, #60]	; (400ab4 <system_init_flash+0x5c>)
  400a78:	4298      	cmp	r0, r3
  400a7a:	d803      	bhi.n	400a84 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a7c:	4a0e      	ldr	r2, [pc, #56]	; (400ab8 <system_init_flash+0x60>)
  400a7e:	4b0a      	ldr	r3, [pc, #40]	; (400aa8 <system_init_flash+0x50>)
  400a80:	601a      	str	r2, [r3, #0]
  400a82:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a84:	4b0d      	ldr	r3, [pc, #52]	; (400abc <system_init_flash+0x64>)
  400a86:	4298      	cmp	r0, r3
  400a88:	d803      	bhi.n	400a92 <system_init_flash+0x3a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a8a:	4a0d      	ldr	r2, [pc, #52]	; (400ac0 <system_init_flash+0x68>)
  400a8c:	4b06      	ldr	r3, [pc, #24]	; (400aa8 <system_init_flash+0x50>)
  400a8e:	601a      	str	r2, [r3, #0]
  400a90:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a92:	4b0c      	ldr	r3, [pc, #48]	; (400ac4 <system_init_flash+0x6c>)
  400a94:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a96:	bf94      	ite	ls
  400a98:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a9c:	4a0a      	ldrhi	r2, [pc, #40]	; (400ac8 <system_init_flash+0x70>)
  400a9e:	4b02      	ldr	r3, [pc, #8]	; (400aa8 <system_init_flash+0x50>)
  400aa0:	601a      	str	r2, [r3, #0]
  400aa2:	4770      	bx	lr
  400aa4:	01312cff 	.word	0x01312cff
  400aa8:	400e0a00 	.word	0x400e0a00
  400aac:	026259ff 	.word	0x026259ff
  400ab0:	04000100 	.word	0x04000100
  400ab4:	039386ff 	.word	0x039386ff
  400ab8:	04000200 	.word	0x04000200
  400abc:	04c4b3ff 	.word	0x04c4b3ff
  400ac0:	04000300 	.word	0x04000300
  400ac4:	05f5e0ff 	.word	0x05f5e0ff
  400ac8:	04000500 	.word	0x04000500

00400acc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400acc:	4b09      	ldr	r3, [pc, #36]	; (400af4 <_sbrk+0x28>)
  400ace:	681b      	ldr	r3, [r3, #0]
  400ad0:	b913      	cbnz	r3, 400ad8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400ad2:	4a09      	ldr	r2, [pc, #36]	; (400af8 <_sbrk+0x2c>)
  400ad4:	4b07      	ldr	r3, [pc, #28]	; (400af4 <_sbrk+0x28>)
  400ad6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400ad8:	4b06      	ldr	r3, [pc, #24]	; (400af4 <_sbrk+0x28>)
  400ada:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400adc:	181a      	adds	r2, r3, r0
  400ade:	4907      	ldr	r1, [pc, #28]	; (400afc <_sbrk+0x30>)
  400ae0:	4291      	cmp	r1, r2
  400ae2:	db04      	blt.n	400aee <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400ae4:	4610      	mov	r0, r2
  400ae6:	4a03      	ldr	r2, [pc, #12]	; (400af4 <_sbrk+0x28>)
  400ae8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400aea:	4618      	mov	r0, r3
  400aec:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400aee:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400af2:	4770      	bx	lr
  400af4:	20000898 	.word	0x20000898
  400af8:	20003998 	.word	0x20003998
  400afc:	2001fffc 	.word	0x2001fffc

00400b00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b00:	f04f 30ff 	mov.w	r0, #4294967295
  400b04:	4770      	bx	lr
  400b06:	bf00      	nop

00400b08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b0c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b0e:	2000      	movs	r0, #0
  400b10:	4770      	bx	lr
  400b12:	bf00      	nop

00400b14 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b14:	2001      	movs	r0, #1
  400b16:	4770      	bx	lr

00400b18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b18:	2000      	movs	r0, #0
  400b1a:	4770      	bx	lr

00400b1c <GMAC_Handler>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400b20:	4b01      	ldr	r3, [pc, #4]	; (400b28 <GMAC_Handler+0xc>)
  400b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400b26:	4770      	bx	lr
  400b28:	e000e100 	.word	0xe000e100

00400b2c <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  400b2c:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  400b2e:	4b04      	ldr	r3, [pc, #16]	; (400b40 <TC0_Handler+0x14>)
  400b30:	6a1b      	ldr	r3, [r3, #32]
  400b32:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  400b34:	4a03      	ldr	r2, [pc, #12]	; (400b44 <TC0_Handler+0x18>)
  400b36:	6813      	ldr	r3, [r2, #0]
  400b38:	3301      	adds	r3, #1
  400b3a:	6013      	str	r3, [r2, #0]
}
  400b3c:	b002      	add	sp, #8
  400b3e:	4770      	bx	lr
  400b40:	40090000 	.word	0x40090000
  400b44:	2000089c 	.word	0x2000089c

00400b48 <spi_slave_transfer>:
 *
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_slave_transfer(void *p_buf, uint32_t size)
{
  400b48:	b510      	push	{r4, lr}
	gs_puc_transfer_buffer = p_buf;
  400b4a:	4b06      	ldr	r3, [pc, #24]	; (400b64 <spi_slave_transfer+0x1c>)
  400b4c:	6018      	str	r0, [r3, #0]
	gs_ul_transfer_length = size;
  400b4e:	4b06      	ldr	r3, [pc, #24]	; (400b68 <spi_slave_transfer+0x20>)
  400b50:	6019      	str	r1, [r3, #0]
	gs_ul_transfer_index = 0;
  400b52:	2200      	movs	r2, #0
  400b54:	4b05      	ldr	r3, [pc, #20]	; (400b6c <spi_slave_transfer+0x24>)
  400b56:	601a      	str	r2, [r3, #0]
	spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0, 0);
  400b58:	4613      	mov	r3, r2
  400b5a:	7801      	ldrb	r1, [r0, #0]
  400b5c:	4804      	ldr	r0, [pc, #16]	; (400b70 <spi_slave_transfer+0x28>)
  400b5e:	4c05      	ldr	r4, [pc, #20]	; (400b74 <spi_slave_transfer+0x2c>)
  400b60:	47a0      	blx	r4
  400b62:	bd10      	pop	{r4, pc}
  400b64:	20000948 	.word	0x20000948
  400b68:	20000904 	.word	0x20000904
  400b6c:	20000950 	.word	0x20000950
  400b70:	40088000 	.word	0x40088000
  400b74:	00400755 	.word	0x00400755

00400b78 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b7a:	b083      	sub	sp, #12
  400b7c:	4605      	mov	r5, r0
  400b7e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b80:	2300      	movs	r3, #0
  400b82:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b84:	4b18      	ldr	r3, [pc, #96]	; (400be8 <usart_serial_getchar+0x70>)
  400b86:	4298      	cmp	r0, r3
  400b88:	d107      	bne.n	400b9a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400b8a:	461f      	mov	r7, r3
  400b8c:	4e17      	ldr	r6, [pc, #92]	; (400bec <usart_serial_getchar+0x74>)
  400b8e:	4621      	mov	r1, r4
  400b90:	4638      	mov	r0, r7
  400b92:	47b0      	blx	r6
  400b94:	2800      	cmp	r0, #0
  400b96:	d1fa      	bne.n	400b8e <usart_serial_getchar+0x16>
  400b98:	e017      	b.n	400bca <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400b9a:	4b15      	ldr	r3, [pc, #84]	; (400bf0 <usart_serial_getchar+0x78>)
  400b9c:	4298      	cmp	r0, r3
  400b9e:	d107      	bne.n	400bb0 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400ba0:	461e      	mov	r6, r3
  400ba2:	4d12      	ldr	r5, [pc, #72]	; (400bec <usart_serial_getchar+0x74>)
  400ba4:	4621      	mov	r1, r4
  400ba6:	4630      	mov	r0, r6
  400ba8:	47a8      	blx	r5
  400baa:	2800      	cmp	r0, #0
  400bac:	d1fa      	bne.n	400ba4 <usart_serial_getchar+0x2c>
  400bae:	e018      	b.n	400be2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400bb0:	4b10      	ldr	r3, [pc, #64]	; (400bf4 <usart_serial_getchar+0x7c>)
  400bb2:	4298      	cmp	r0, r3
  400bb4:	d109      	bne.n	400bca <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400bb6:	461e      	mov	r6, r3
  400bb8:	4d0f      	ldr	r5, [pc, #60]	; (400bf8 <usart_serial_getchar+0x80>)
  400bba:	a901      	add	r1, sp, #4
  400bbc:	4630      	mov	r0, r6
  400bbe:	47a8      	blx	r5
  400bc0:	2800      	cmp	r0, #0
  400bc2:	d1fa      	bne.n	400bba <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400bc4:	9b01      	ldr	r3, [sp, #4]
  400bc6:	7023      	strb	r3, [r4, #0]
  400bc8:	e00b      	b.n	400be2 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400bca:	4b0c      	ldr	r3, [pc, #48]	; (400bfc <usart_serial_getchar+0x84>)
  400bcc:	429d      	cmp	r5, r3
  400bce:	d108      	bne.n	400be2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400bd0:	461e      	mov	r6, r3
  400bd2:	4d09      	ldr	r5, [pc, #36]	; (400bf8 <usart_serial_getchar+0x80>)
  400bd4:	a901      	add	r1, sp, #4
  400bd6:	4630      	mov	r0, r6
  400bd8:	47a8      	blx	r5
  400bda:	2800      	cmp	r0, #0
  400bdc:	d1fa      	bne.n	400bd4 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400bde:	9b01      	ldr	r3, [sp, #4]
  400be0:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400be2:	b003      	add	sp, #12
  400be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400be6:	bf00      	nop
  400be8:	400e0600 	.word	0x400e0600
  400bec:	00400829 	.word	0x00400829
  400bf0:	40060600 	.word	0x40060600
  400bf4:	400a0000 	.word	0x400a0000
  400bf8:	00400851 	.word	0x00400851
  400bfc:	400a4000 	.word	0x400a4000

00400c00 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400c00:	b570      	push	{r4, r5, r6, lr}
  400c02:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c04:	4b18      	ldr	r3, [pc, #96]	; (400c68 <usart_serial_putchar+0x68>)
  400c06:	4298      	cmp	r0, r3
  400c08:	d108      	bne.n	400c1c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c0a:	461e      	mov	r6, r3
  400c0c:	4d17      	ldr	r5, [pc, #92]	; (400c6c <usart_serial_putchar+0x6c>)
  400c0e:	4621      	mov	r1, r4
  400c10:	4630      	mov	r0, r6
  400c12:	47a8      	blx	r5
  400c14:	2800      	cmp	r0, #0
  400c16:	d1fa      	bne.n	400c0e <usart_serial_putchar+0xe>
		return 1;
  400c18:	2001      	movs	r0, #1
  400c1a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c1c:	4b14      	ldr	r3, [pc, #80]	; (400c70 <usart_serial_putchar+0x70>)
  400c1e:	4298      	cmp	r0, r3
  400c20:	d108      	bne.n	400c34 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c22:	461e      	mov	r6, r3
  400c24:	4d11      	ldr	r5, [pc, #68]	; (400c6c <usart_serial_putchar+0x6c>)
  400c26:	4621      	mov	r1, r4
  400c28:	4630      	mov	r0, r6
  400c2a:	47a8      	blx	r5
  400c2c:	2800      	cmp	r0, #0
  400c2e:	d1fa      	bne.n	400c26 <usart_serial_putchar+0x26>
		return 1;
  400c30:	2001      	movs	r0, #1
  400c32:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c34:	4b0f      	ldr	r3, [pc, #60]	; (400c74 <usart_serial_putchar+0x74>)
  400c36:	4298      	cmp	r0, r3
  400c38:	d108      	bne.n	400c4c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400c3a:	461e      	mov	r6, r3
  400c3c:	4d0e      	ldr	r5, [pc, #56]	; (400c78 <usart_serial_putchar+0x78>)
  400c3e:	4621      	mov	r1, r4
  400c40:	4630      	mov	r0, r6
  400c42:	47a8      	blx	r5
  400c44:	2800      	cmp	r0, #0
  400c46:	d1fa      	bne.n	400c3e <usart_serial_putchar+0x3e>
		return 1;
  400c48:	2001      	movs	r0, #1
  400c4a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c4c:	4b0b      	ldr	r3, [pc, #44]	; (400c7c <usart_serial_putchar+0x7c>)
  400c4e:	4298      	cmp	r0, r3
  400c50:	d108      	bne.n	400c64 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400c52:	461e      	mov	r6, r3
  400c54:	4d08      	ldr	r5, [pc, #32]	; (400c78 <usart_serial_putchar+0x78>)
  400c56:	4621      	mov	r1, r4
  400c58:	4630      	mov	r0, r6
  400c5a:	47a8      	blx	r5
  400c5c:	2800      	cmp	r0, #0
  400c5e:	d1fa      	bne.n	400c56 <usart_serial_putchar+0x56>
		return 1;
  400c60:	2001      	movs	r0, #1
  400c62:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400c64:	2000      	movs	r0, #0
}
  400c66:	bd70      	pop	{r4, r5, r6, pc}
  400c68:	400e0600 	.word	0x400e0600
  400c6c:	00400819 	.word	0x00400819
  400c70:	40060600 	.word	0x40060600
  400c74:	400a0000 	.word	0x400a0000
  400c78:	0040083d 	.word	0x0040083d
  400c7c:	400a4000 	.word	0x400a4000

00400c80 <SPI_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
  400c80:	b510      	push	{r4, lr}
  400c82:	b082      	sub	sp, #8
	uint32_t new_cmd = 0;
	static uint16_t data;
	uint8_t uc_pcs;
	static uint16_t cnt = 0;

	printf("SPI message received #%d\n\r", cnt++);
  400c84:	4b51      	ldr	r3, [pc, #324]	; (400dcc <SPI_Handler+0x14c>)
  400c86:	8819      	ldrh	r1, [r3, #0]
  400c88:	1c4a      	adds	r2, r1, #1
  400c8a:	801a      	strh	r2, [r3, #0]
  400c8c:	4850      	ldr	r0, [pc, #320]	; (400dd0 <SPI_Handler+0x150>)
  400c8e:	4b51      	ldr	r3, [pc, #324]	; (400dd4 <SPI_Handler+0x154>)
  400c90:	4798      	blx	r3
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  400c92:	4b51      	ldr	r3, [pc, #324]	; (400dd8 <SPI_Handler+0x158>)
  400c94:	691b      	ldr	r3, [r3, #16]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) {
  400c96:	f013 0f01 	tst.w	r3, #1
  400c9a:	f000 8095 	beq.w	400dc8 <SPI_Handler+0x148>
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);
  400c9e:	4c4f      	ldr	r4, [pc, #316]	; (400ddc <SPI_Handler+0x15c>)
  400ca0:	f10d 0207 	add.w	r2, sp, #7
  400ca4:	4621      	mov	r1, r4
  400ca6:	484c      	ldr	r0, [pc, #304]	; (400dd8 <SPI_Handler+0x158>)
  400ca8:	4b4d      	ldr	r3, [pc, #308]	; (400de0 <SPI_Handler+0x160>)
  400caa:	4798      	blx	r3
		gs_puc_transfer_buffer[gs_ul_transfer_index] = data;
  400cac:	4b4d      	ldr	r3, [pc, #308]	; (400de4 <SPI_Handler+0x164>)
  400cae:	6818      	ldr	r0, [r3, #0]
  400cb0:	4a4d      	ldr	r2, [pc, #308]	; (400de8 <SPI_Handler+0x168>)
  400cb2:	6813      	ldr	r3, [r2, #0]
  400cb4:	8821      	ldrh	r1, [r4, #0]
  400cb6:	54c1      	strb	r1, [r0, r3]
		gs_ul_transfer_index++;
  400cb8:	1c59      	adds	r1, r3, #1
  400cba:	6011      	str	r1, [r2, #0]
		gs_ul_transfer_length--;
  400cbc:	4a4b      	ldr	r2, [pc, #300]	; (400dec <SPI_Handler+0x16c>)
  400cbe:	6813      	ldr	r3, [r2, #0]
  400cc0:	3b01      	subs	r3, #1
  400cc2:	6013      	str	r3, [r2, #0]
		if (gs_ul_transfer_length) {
  400cc4:	b14b      	cbz	r3, 400cda <SPI_Handler+0x5a>
			spi_write(SPI_SLAVE_BASE,
  400cc6:	2300      	movs	r3, #0
  400cc8:	461a      	mov	r2, r3
  400cca:	5c41      	ldrb	r1, [r0, r1]
  400ccc:	4842      	ldr	r0, [pc, #264]	; (400dd8 <SPI_Handler+0x158>)
  400cce:	4c48      	ldr	r4, [pc, #288]	; (400df0 <SPI_Handler+0x170>)
  400cd0:	47a0      	blx	r4
					gs_puc_transfer_buffer[gs_ul_transfer_index], 0, 0);
		}

		if (!gs_ul_transfer_length) {
  400cd2:	4b46      	ldr	r3, [pc, #280]	; (400dec <SPI_Handler+0x16c>)
  400cd4:	681b      	ldr	r3, [r3, #0]
  400cd6:	2b00      	cmp	r3, #0
  400cd8:	d176      	bne.n	400dc8 <SPI_Handler+0x148>
/**
 * \brief  SPI command block process.
 */
static void spi_slave_command_process(void)
{
	if (gs_ul_spi_cmd == CMD_END) {
  400cda:	4b46      	ldr	r3, [pc, #280]	; (400df4 <SPI_Handler+0x174>)
  400cdc:	6819      	ldr	r1, [r3, #0]
  400cde:	4b46      	ldr	r3, [pc, #280]	; (400df8 <SPI_Handler+0x178>)
  400ce0:	4299      	cmp	r1, r3
  400ce2:	d106      	bne.n	400cf2 <SPI_Handler+0x72>
		gs_ul_spi_state = SLAVE_STATE_IDLE;
  400ce4:	2300      	movs	r3, #0
  400ce6:	4a45      	ldr	r2, [pc, #276]	; (400dfc <SPI_Handler+0x17c>)
  400ce8:	6013      	str	r3, [r2, #0]
		gs_spi_status.ul_total_block_number = 0;
  400cea:	4a45      	ldr	r2, [pc, #276]	; (400e00 <SPI_Handler+0x180>)
  400cec:	6013      	str	r3, [r2, #0]
		gs_spi_status.ul_total_command_number = 0;
  400cee:	6053      	str	r3, [r2, #4]
  400cf0:	e034      	b.n	400d5c <SPI_Handler+0xdc>
	} else {
		switch (gs_ul_spi_state) {
  400cf2:	4b42      	ldr	r3, [pc, #264]	; (400dfc <SPI_Handler+0x17c>)
  400cf4:	681b      	ldr	r3, [r3, #0]
  400cf6:	2b03      	cmp	r3, #3
  400cf8:	d826      	bhi.n	400d48 <SPI_Handler+0xc8>
  400cfa:	e8df f003 	tbb	[pc, r3]
  400cfe:	0902      	.short	0x0902
  400d00:	2115      	.short	0x2115
		case SLAVE_STATE_IDLE:
			/* Only CMD_TEST accepted. */
			if (gs_ul_spi_cmd == CMD_TEST) {
  400d02:	f1b1 3f10 	cmp.w	r1, #269488144	; 0x10101010
  400d06:	d122      	bne.n	400d4e <SPI_Handler+0xce>
				gs_ul_spi_state = SLAVE_STATE_TEST;
  400d08:	2201      	movs	r2, #1
  400d0a:	4b3c      	ldr	r3, [pc, #240]	; (400dfc <SPI_Handler+0x17c>)
  400d0c:	601a      	str	r2, [r3, #0]
  400d0e:	e01e      	b.n	400d4e <SPI_Handler+0xce>
			}
			break;

		case SLAVE_STATE_TEST:
			/* Only CMD_DATA accepted. */
			if ((gs_ul_spi_cmd & CMD_DATA_MSK) == CMD_DATA) {
  400d10:	0c0b      	lsrs	r3, r1, #16
  400d12:	041b      	lsls	r3, r3, #16
  400d14:	4a3b      	ldr	r2, [pc, #236]	; (400e04 <SPI_Handler+0x184>)
  400d16:	4293      	cmp	r3, r2
  400d18:	d102      	bne.n	400d20 <SPI_Handler+0xa0>
				gs_ul_spi_state = SLAVE_STATE_DATA;
  400d1a:	2202      	movs	r2, #2
  400d1c:	4b37      	ldr	r3, [pc, #220]	; (400dfc <SPI_Handler+0x17c>)
  400d1e:	601a      	str	r2, [r3, #0]
			}
			gs_ul_test_block_number = gs_ul_spi_cmd & DATA_BLOCK_MSK;
  400d20:	b28b      	uxth	r3, r1
  400d22:	4a39      	ldr	r2, [pc, #228]	; (400e08 <SPI_Handler+0x188>)
  400d24:	6013      	str	r3, [r2, #0]
  400d26:	e012      	b.n	400d4e <SPI_Handler+0xce>
			break;

		case SLAVE_STATE_DATA:
			gs_spi_status.ul_total_block_number++;
  400d28:	4a35      	ldr	r2, [pc, #212]	; (400e00 <SPI_Handler+0x180>)
  400d2a:	6813      	ldr	r3, [r2, #0]
  400d2c:	3301      	adds	r3, #1
  400d2e:	6013      	str	r3, [r2, #0]

			if (gs_spi_status.ul_total_block_number == 
  400d30:	4a35      	ldr	r2, [pc, #212]	; (400e08 <SPI_Handler+0x188>)
  400d32:	6812      	ldr	r2, [r2, #0]
  400d34:	4293      	cmp	r3, r2
  400d36:	d10a      	bne.n	400d4e <SPI_Handler+0xce>
					gs_ul_test_block_number) {
				gs_ul_spi_state = SLAVE_STATE_STATUS_ENTRY;
  400d38:	2203      	movs	r2, #3
  400d3a:	4b30      	ldr	r3, [pc, #192]	; (400dfc <SPI_Handler+0x17c>)
  400d3c:	601a      	str	r2, [r3, #0]
  400d3e:	e006      	b.n	400d4e <SPI_Handler+0xce>
			}
			break;

		case SLAVE_STATE_STATUS_ENTRY:
			gs_ul_spi_state = SLAVE_STATE_STATUS;
  400d40:	2204      	movs	r2, #4
  400d42:	4b2e      	ldr	r3, [pc, #184]	; (400dfc <SPI_Handler+0x17c>)
  400d44:	601a      	str	r2, [r3, #0]
  400d46:	e002      	b.n	400d4e <SPI_Handler+0xce>
			spi_slave_command_process();
			new_cmd = 1;
		}

		if (new_cmd) {
			if (gs_ul_spi_cmd != CMD_END) {
  400d48:	4b2b      	ldr	r3, [pc, #172]	; (400df8 <SPI_Handler+0x178>)
  400d4a:	4299      	cmp	r1, r3
  400d4c:	d006      	beq.n	400d5c <SPI_Handler+0xdc>
				gs_spi_status.ul_cmd_list[gs_spi_status.ul_total_command_number]
  400d4e:	4a2c      	ldr	r2, [pc, #176]	; (400e00 <SPI_Handler+0x180>)
  400d50:	6853      	ldr	r3, [r2, #4]
				= gs_ul_spi_cmd;
  400d52:	1c98      	adds	r0, r3, #2
  400d54:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
				gs_spi_status.ul_total_command_number++;
  400d58:	3301      	adds	r3, #1
  400d5a:	6053      	str	r3, [r2, #4]
/**
 * \brief  Start waiting new command.
 */
static void spi_slave_new_command(void)
{
	switch (gs_ul_spi_state) {
  400d5c:	4b27      	ldr	r3, [pc, #156]	; (400dfc <SPI_Handler+0x17c>)
  400d5e:	681b      	ldr	r3, [r3, #0]
  400d60:	2b05      	cmp	r3, #5
  400d62:	d831      	bhi.n	400dc8 <SPI_Handler+0x148>
  400d64:	e8df f003 	tbb	[pc, r3]
  400d68:	1c110a03 	.word	0x1c110a03
  400d6c:	0326      	.short	0x0326
	case SLAVE_STATE_IDLE:
	case SLAVE_STATE_END:
		gs_ul_spi_cmd = RC_SYN;
  400d6e:	4821      	ldr	r0, [pc, #132]	; (400df4 <SPI_Handler+0x174>)
  400d70:	4b26      	ldr	r3, [pc, #152]	; (400e0c <SPI_Handler+0x18c>)
  400d72:	6003      	str	r3, [r0, #0]
		spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  400d74:	2104      	movs	r1, #4
  400d76:	4b26      	ldr	r3, [pc, #152]	; (400e10 <SPI_Handler+0x190>)
  400d78:	4798      	blx	r3
  400d7a:	e025      	b.n	400dc8 <SPI_Handler+0x148>
		break;

	case SLAVE_STATE_TEST:
		gs_ul_spi_cmd = RC_RDY;
  400d7c:	481d      	ldr	r0, [pc, #116]	; (400df4 <SPI_Handler+0x174>)
  400d7e:	4b25      	ldr	r3, [pc, #148]	; (400e14 <SPI_Handler+0x194>)
  400d80:	6003      	str	r3, [r0, #0]
		spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  400d82:	2104      	movs	r1, #4
  400d84:	4b22      	ldr	r3, [pc, #136]	; (400e10 <SPI_Handler+0x190>)
  400d86:	4798      	blx	r3
  400d88:	e01e      	b.n	400dc8 <SPI_Handler+0x148>
		break;

	case SLAVE_STATE_DATA:
		if (gs_spi_status.ul_total_block_number < gs_ul_test_block_number) {
  400d8a:	4b1d      	ldr	r3, [pc, #116]	; (400e00 <SPI_Handler+0x180>)
  400d8c:	681a      	ldr	r2, [r3, #0]
  400d8e:	4b1e      	ldr	r3, [pc, #120]	; (400e08 <SPI_Handler+0x188>)
  400d90:	681b      	ldr	r3, [r3, #0]
  400d92:	429a      	cmp	r2, r3
  400d94:	d218      	bcs.n	400dc8 <SPI_Handler+0x148>
			spi_slave_transfer(gs_uc_spi_buffer, COMM_BUFFER_SIZE);
  400d96:	2140      	movs	r1, #64	; 0x40
  400d98:	481f      	ldr	r0, [pc, #124]	; (400e18 <SPI_Handler+0x198>)
  400d9a:	4b1d      	ldr	r3, [pc, #116]	; (400e10 <SPI_Handler+0x190>)
  400d9c:	4798      	blx	r3
  400d9e:	e013      	b.n	400dc8 <SPI_Handler+0x148>
		}
		break;

	case SLAVE_STATE_STATUS_ENTRY:
		gs_ul_spi_cmd = RC_RDY;
  400da0:	4814      	ldr	r0, [pc, #80]	; (400df4 <SPI_Handler+0x174>)
  400da2:	4b1c      	ldr	r3, [pc, #112]	; (400e14 <SPI_Handler+0x194>)
  400da4:	6003      	str	r3, [r0, #0]
		spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  400da6:	2104      	movs	r1, #4
  400da8:	4b19      	ldr	r3, [pc, #100]	; (400e10 <SPI_Handler+0x190>)
  400daa:	4798      	blx	r3
		gs_ul_spi_state = SLAVE_STATE_STATUS;
  400dac:	2204      	movs	r2, #4
  400dae:	4b13      	ldr	r3, [pc, #76]	; (400dfc <SPI_Handler+0x17c>)
  400db0:	601a      	str	r2, [r3, #0]
  400db2:	e009      	b.n	400dc8 <SPI_Handler+0x148>
		break;

	case SLAVE_STATE_STATUS:
		gs_ul_spi_cmd = RC_SYN;
  400db4:	4a15      	ldr	r2, [pc, #84]	; (400e0c <SPI_Handler+0x18c>)
  400db6:	4b0f      	ldr	r3, [pc, #60]	; (400df4 <SPI_Handler+0x174>)
  400db8:	601a      	str	r2, [r3, #0]
		spi_slave_transfer(&gs_spi_status, sizeof(struct status_block_t));
  400dba:	2158      	movs	r1, #88	; 0x58
  400dbc:	4810      	ldr	r0, [pc, #64]	; (400e00 <SPI_Handler+0x180>)
  400dbe:	4b14      	ldr	r3, [pc, #80]	; (400e10 <SPI_Handler+0x190>)
  400dc0:	4798      	blx	r3
		gs_ul_spi_state = SLAVE_STATE_END;
  400dc2:	2205      	movs	r2, #5
  400dc4:	4b0d      	ldr	r3, [pc, #52]	; (400dfc <SPI_Handler+0x17c>)
  400dc6:	601a      	str	r2, [r3, #0]
				gs_spi_status.ul_total_command_number++;
			}
			spi_slave_new_command();
		}
	}
}
  400dc8:	b002      	add	sp, #8
  400dca:	bd10      	pop	{r4, pc}
  400dcc:	200008f8 	.word	0x200008f8
  400dd0:	004056ec 	.word	0x004056ec
  400dd4:	00400fe5 	.word	0x00400fe5
  400dd8:	40088000 	.word	0x40088000
  400ddc:	2000094c 	.word	0x2000094c
  400de0:	00400721 	.word	0x00400721
  400de4:	20000948 	.word	0x20000948
  400de8:	20000950 	.word	0x20000950
  400dec:	20000904 	.word	0x20000904
  400df0:	00400755 	.word	0x00400755
  400df4:	20000008 	.word	0x20000008
  400df8:	68390484 	.word	0x68390484
  400dfc:	20000900 	.word	0x20000900
  400e00:	200008a0 	.word	0x200008a0
  400e04:	29380000 	.word	0x29380000
  400e08:	200008fc 	.word	0x200008fc
  400e0c:	55aa55aa 	.word	0x55aa55aa
  400e10:	00400b49 	.word	0x00400b49
  400e14:	12345678 	.word	0x12345678
  400e18:	20000908 	.word	0x20000908

00400e1c <main>:
/**
* \brief Main program function. Configure the hardware, initialize lwIP
* TCP/IP stack, and start HTTP service.
*/
int main(void)
{
  400e1c:	b570      	push	{r4, r5, r6, lr}
  400e1e:	b084      	sub	sp, #16
	uint8_t uc_key;
	
	/* Initialize the SAM system. */
	sysclk_init();
  400e20:	4b3e      	ldr	r3, [pc, #248]	; (400f1c <main+0x100>)
  400e22:	4798      	blx	r3
	board_init();
  400e24:	4b3e      	ldr	r3, [pc, #248]	; (400f20 <main+0x104>)
  400e26:	4798      	blx	r3
  400e28:	2007      	movs	r0, #7
  400e2a:	4d3e      	ldr	r5, [pc, #248]	; (400f24 <main+0x108>)
  400e2c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400e2e:	4c3e      	ldr	r4, [pc, #248]	; (400f28 <main+0x10c>)
  400e30:	4b3e      	ldr	r3, [pc, #248]	; (400f2c <main+0x110>)
  400e32:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400e34:	4a3e      	ldr	r2, [pc, #248]	; (400f30 <main+0x114>)
  400e36:	4b3f      	ldr	r3, [pc, #252]	; (400f34 <main+0x118>)
  400e38:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400e3a:	4a3f      	ldr	r2, [pc, #252]	; (400f38 <main+0x11c>)
  400e3c:	4b3f      	ldr	r3, [pc, #252]	; (400f3c <main+0x120>)
  400e3e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400e40:	4b3f      	ldr	r3, [pc, #252]	; (400f40 <main+0x124>)
  400e42:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  400e44:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400e48:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  400e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e4e:	9302      	str	r3, [sp, #8]
  400e50:	2007      	movs	r0, #7
  400e52:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400e54:	4669      	mov	r1, sp
  400e56:	4620      	mov	r0, r4
  400e58:	4b3a      	ldr	r3, [pc, #232]	; (400f44 <main+0x128>)
  400e5a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400e5c:	4d3a      	ldr	r5, [pc, #232]	; (400f48 <main+0x12c>)
  400e5e:	682b      	ldr	r3, [r5, #0]
  400e60:	2100      	movs	r1, #0
  400e62:	6898      	ldr	r0, [r3, #8]
  400e64:	4c39      	ldr	r4, [pc, #228]	; (400f4c <main+0x130>)
  400e66:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400e68:	682b      	ldr	r3, [r5, #0]
  400e6a:	2100      	movs	r1, #0
  400e6c:	6858      	ldr	r0, [r3, #4]
  400e6e:	47a0      	blx	r4

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
  400e70:	682b      	ldr	r3, [r5, #0]
  400e72:	2100      	movs	r1, #0
  400e74:	6898      	ldr	r0, [r3, #8]
  400e76:	47a0      	blx	r4

	/* Configure debug UART */
	configure_console();

	/* Print example information. */
	puts(STRING_HEADER);
  400e78:	4835      	ldr	r0, [pc, #212]	; (400f50 <main+0x134>)
  400e7a:	4b36      	ldr	r3, [pc, #216]	; (400f54 <main+0x138>)
  400e7c:	4798      	blx	r3
  400e7e:	4b36      	ldr	r3, [pc, #216]	; (400f58 <main+0x13c>)
  400e80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400e88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400e8c:	2100      	movs	r1, #0
  400e8e:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400e92:	601a      	str	r2, [r3, #0]
static void spi_slave_initialize(void)
{
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
  400e94:	4a31      	ldr	r2, [pc, #196]	; (400f5c <main+0x140>)
  400e96:	6011      	str	r1, [r2, #0]
	gs_spi_status.ul_total_command_number = 0;
  400e98:	4613      	mov	r3, r2
  400e9a:	f843 1f04 	str.w	r1, [r3, #4]!
  400e9e:	3254      	adds	r2, #84	; 0x54
	for (i = 0; i < NB_STATUS_CMD; i++) {
		gs_spi_status.ul_cmd_list[i] = 0;
  400ea0:	f843 1f04 	str.w	r1, [r3, #4]!
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
	gs_spi_status.ul_total_command_number = 0;
	for (i = 0; i < NB_STATUS_CMD; i++) {
  400ea4:	429a      	cmp	r2, r3
  400ea6:	d1fb      	bne.n	400ea0 <main+0x84>
		gs_spi_status.ul_cmd_list[i] = 0;
	}
	gs_ul_spi_state = SLAVE_STATE_IDLE;
  400ea8:	2500      	movs	r5, #0
  400eaa:	4b2d      	ldr	r3, [pc, #180]	; (400f60 <main+0x144>)
  400eac:	601d      	str	r5, [r3, #0]
	gs_ul_spi_cmd = RC_SYN;
  400eae:	4e2d      	ldr	r6, [pc, #180]	; (400f64 <main+0x148>)
  400eb0:	4b2d      	ldr	r3, [pc, #180]	; (400f68 <main+0x14c>)
  400eb2:	6033      	str	r3, [r6, #0]

	puts("-I- Initialize SPI as slave \r");
  400eb4:	482d      	ldr	r0, [pc, #180]	; (400f6c <main+0x150>)
  400eb6:	4b27      	ldr	r3, [pc, #156]	; (400f54 <main+0x138>)
  400eb8:	4798      	blx	r3
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_SLAVE_BASE);
  400eba:	4c2d      	ldr	r4, [pc, #180]	; (400f70 <main+0x154>)
  400ebc:	4620      	mov	r0, r4
  400ebe:	4b2d      	ldr	r3, [pc, #180]	; (400f74 <main+0x158>)
  400ec0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ec2:	2302      	movs	r3, #2
  400ec4:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400ec6:	2380      	movs	r3, #128	; 0x80
  400ec8:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  400eca:	6863      	ldr	r3, [r4, #4]
  400ecc:	f023 0301 	bic.w	r3, r3, #1
  400ed0:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400ed2:	6863      	ldr	r3, [r4, #4]
  400ed4:	f043 0310 	orr.w	r3, r3, #16
  400ed8:	6063      	str	r3, [r4, #4]
	spi_disable(SPI_SLAVE_BASE);
	spi_reset(SPI_SLAVE_BASE);
	spi_set_slave_mode(SPI_SLAVE_BASE);
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  400eda:	210e      	movs	r1, #14
  400edc:	4620      	mov	r0, r4
  400ede:	4b26      	ldr	r3, [pc, #152]	; (400f78 <main+0x15c>)
  400ee0:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400ee2:	462a      	mov	r2, r5
  400ee4:	4629      	mov	r1, r5
  400ee6:	4620      	mov	r0, r4
  400ee8:	4b24      	ldr	r3, [pc, #144]	; (400f7c <main+0x160>)
  400eea:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400eec:	462a      	mov	r2, r5
  400eee:	4629      	mov	r1, r5
  400ef0:	4620      	mov	r0, r4
  400ef2:	4b23      	ldr	r3, [pc, #140]	; (400f80 <main+0x164>)
  400ef4:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  400ef6:	462a      	mov	r2, r5
  400ef8:	4629      	mov	r1, r5
  400efa:	4620      	mov	r0, r4
  400efc:	4b21      	ldr	r3, [pc, #132]	; (400f84 <main+0x168>)
  400efe:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400f00:	2301      	movs	r3, #1
  400f02:	6163      	str	r3, [r4, #20]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400f04:	6023      	str	r3, [r4, #0]
	spi_enable_interrupt(SPI_SLAVE_BASE, SPI_IER_RDRF);
	spi_enable(SPI_SLAVE_BASE);

	/* Start waiting command. */
	spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  400f06:	2104      	movs	r1, #4
  400f08:	4630      	mov	r0, r6
  400f0a:	4b1f      	ldr	r3, [pc, #124]	; (400f88 <main+0x16c>)
  400f0c:	4798      	blx	r3
	spi_slave_initialize();

	
	/* Program main loop. */
	while (1) {
		scanf("%c", (char*)&uc_key);
  400f0e:	4d1f      	ldr	r5, [pc, #124]	; (400f8c <main+0x170>)
  400f10:	4c1f      	ldr	r4, [pc, #124]	; (400f90 <main+0x174>)
  400f12:	f10d 010f 	add.w	r1, sp, #15
  400f16:	4628      	mov	r0, r5
  400f18:	47a0      	blx	r4
  400f1a:	e7fa      	b.n	400f12 <main+0xf6>
  400f1c:	004004c9 	.word	0x004004c9
  400f20:	00400155 	.word	0x00400155
  400f24:	004006a5 	.word	0x004006a5
  400f28:	400e0600 	.word	0x400e0600
  400f2c:	20000990 	.word	0x20000990
  400f30:	00400c01 	.word	0x00400c01
  400f34:	2000098c 	.word	0x2000098c
  400f38:	00400b79 	.word	0x00400b79
  400f3c:	20000988 	.word	0x20000988
  400f40:	07270e00 	.word	0x07270e00
  400f44:	004007e1 	.word	0x004007e1
  400f48:	20000438 	.word	0x20000438
  400f4c:	00401cd1 	.word	0x00401cd1
  400f50:	00405708 	.word	0x00405708
  400f54:	004018bd 	.word	0x004018bd
  400f58:	e000e100 	.word	0xe000e100
  400f5c:	200008a0 	.word	0x200008a0
  400f60:	20000900 	.word	0x20000900
  400f64:	20000008 	.word	0x20000008
  400f68:	55aa55aa 	.word	0x55aa55aa
  400f6c:	00405760 	.word	0x00405760
  400f70:	40088000 	.word	0x40088000
  400f74:	004006f9 	.word	0x004006f9
  400f78:	00400709 	.word	0x00400709
  400f7c:	0040078d 	.word	0x0040078d
  400f80:	004007ad 	.word	0x004007ad
  400f84:	004007cd 	.word	0x004007cd
  400f88:	00400b49 	.word	0x00400b49
  400f8c:	00405780 	.word	0x00405780
  400f90:	0040100d 	.word	0x0040100d

00400f94 <__libc_init_array>:
  400f94:	b570      	push	{r4, r5, r6, lr}
  400f96:	4e0f      	ldr	r6, [pc, #60]	; (400fd4 <__libc_init_array+0x40>)
  400f98:	4d0f      	ldr	r5, [pc, #60]	; (400fd8 <__libc_init_array+0x44>)
  400f9a:	1b76      	subs	r6, r6, r5
  400f9c:	10b6      	asrs	r6, r6, #2
  400f9e:	bf18      	it	ne
  400fa0:	2400      	movne	r4, #0
  400fa2:	d005      	beq.n	400fb0 <__libc_init_array+0x1c>
  400fa4:	3401      	adds	r4, #1
  400fa6:	f855 3b04 	ldr.w	r3, [r5], #4
  400faa:	4798      	blx	r3
  400fac:	42a6      	cmp	r6, r4
  400fae:	d1f9      	bne.n	400fa4 <__libc_init_array+0x10>
  400fb0:	4e0a      	ldr	r6, [pc, #40]	; (400fdc <__libc_init_array+0x48>)
  400fb2:	4d0b      	ldr	r5, [pc, #44]	; (400fe0 <__libc_init_array+0x4c>)
  400fb4:	1b76      	subs	r6, r6, r5
  400fb6:	f004 fca7 	bl	405908 <_init>
  400fba:	10b6      	asrs	r6, r6, #2
  400fbc:	bf18      	it	ne
  400fbe:	2400      	movne	r4, #0
  400fc0:	d006      	beq.n	400fd0 <__libc_init_array+0x3c>
  400fc2:	3401      	adds	r4, #1
  400fc4:	f855 3b04 	ldr.w	r3, [r5], #4
  400fc8:	4798      	blx	r3
  400fca:	42a6      	cmp	r6, r4
  400fcc:	d1f9      	bne.n	400fc2 <__libc_init_array+0x2e>
  400fce:	bd70      	pop	{r4, r5, r6, pc}
  400fd0:	bd70      	pop	{r4, r5, r6, pc}
  400fd2:	bf00      	nop
  400fd4:	00405914 	.word	0x00405914
  400fd8:	00405914 	.word	0x00405914
  400fdc:	0040591c 	.word	0x0040591c
  400fe0:	00405914 	.word	0x00405914

00400fe4 <iprintf>:
  400fe4:	b40f      	push	{r0, r1, r2, r3}
  400fe6:	b500      	push	{lr}
  400fe8:	4907      	ldr	r1, [pc, #28]	; (401008 <iprintf+0x24>)
  400fea:	b083      	sub	sp, #12
  400fec:	ab04      	add	r3, sp, #16
  400fee:	6808      	ldr	r0, [r1, #0]
  400ff0:	f853 2b04 	ldr.w	r2, [r3], #4
  400ff4:	6881      	ldr	r1, [r0, #8]
  400ff6:	9301      	str	r3, [sp, #4]
  400ff8:	f000 ffcc 	bl	401f94 <_vfiprintf_r>
  400ffc:	b003      	add	sp, #12
  400ffe:	f85d eb04 	ldr.w	lr, [sp], #4
  401002:	b004      	add	sp, #16
  401004:	4770      	bx	lr
  401006:	bf00      	nop
  401008:	20000438 	.word	0x20000438

0040100c <iscanf>:
  40100c:	b40f      	push	{r0, r1, r2, r3}
  40100e:	b500      	push	{lr}
  401010:	4907      	ldr	r1, [pc, #28]	; (401030 <iscanf+0x24>)
  401012:	b083      	sub	sp, #12
  401014:	ab04      	add	r3, sp, #16
  401016:	6808      	ldr	r0, [r1, #0]
  401018:	f853 2b04 	ldr.w	r2, [r3], #4
  40101c:	6841      	ldr	r1, [r0, #4]
  40101e:	9301      	str	r3, [sp, #4]
  401020:	f001 feec 	bl	402dfc <__svfiscanf_r>
  401024:	b003      	add	sp, #12
  401026:	f85d eb04 	ldr.w	lr, [sp], #4
  40102a:	b004      	add	sp, #16
  40102c:	4770      	bx	lr
  40102e:	bf00      	nop
  401030:	20000438 	.word	0x20000438

00401034 <malloc>:
  401034:	4b02      	ldr	r3, [pc, #8]	; (401040 <malloc+0xc>)
  401036:	4601      	mov	r1, r0
  401038:	6818      	ldr	r0, [r3, #0]
  40103a:	f000 b803 	b.w	401044 <_malloc_r>
  40103e:	bf00      	nop
  401040:	20000438 	.word	0x20000438

00401044 <_malloc_r>:
  401044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401048:	f101 050b 	add.w	r5, r1, #11
  40104c:	2d16      	cmp	r5, #22
  40104e:	b083      	sub	sp, #12
  401050:	4606      	mov	r6, r0
  401052:	f240 809f 	bls.w	401194 <_malloc_r+0x150>
  401056:	f035 0507 	bics.w	r5, r5, #7
  40105a:	f100 80bf 	bmi.w	4011dc <_malloc_r+0x198>
  40105e:	42a9      	cmp	r1, r5
  401060:	f200 80bc 	bhi.w	4011dc <_malloc_r+0x198>
  401064:	f000 fbf2 	bl	40184c <__malloc_lock>
  401068:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40106c:	f0c0 829c 	bcc.w	4015a8 <_malloc_r+0x564>
  401070:	0a6b      	lsrs	r3, r5, #9
  401072:	f000 80ba 	beq.w	4011ea <_malloc_r+0x1a6>
  401076:	2b04      	cmp	r3, #4
  401078:	f200 8183 	bhi.w	401382 <_malloc_r+0x33e>
  40107c:	09a8      	lsrs	r0, r5, #6
  40107e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  401082:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401086:	3038      	adds	r0, #56	; 0x38
  401088:	4fc4      	ldr	r7, [pc, #784]	; (40139c <_malloc_r+0x358>)
  40108a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40108e:	f1a3 0108 	sub.w	r1, r3, #8
  401092:	685c      	ldr	r4, [r3, #4]
  401094:	42a1      	cmp	r1, r4
  401096:	d107      	bne.n	4010a8 <_malloc_r+0x64>
  401098:	e0ac      	b.n	4011f4 <_malloc_r+0x1b0>
  40109a:	2a00      	cmp	r2, #0
  40109c:	f280 80ac 	bge.w	4011f8 <_malloc_r+0x1b4>
  4010a0:	68e4      	ldr	r4, [r4, #12]
  4010a2:	42a1      	cmp	r1, r4
  4010a4:	f000 80a6 	beq.w	4011f4 <_malloc_r+0x1b0>
  4010a8:	6863      	ldr	r3, [r4, #4]
  4010aa:	f023 0303 	bic.w	r3, r3, #3
  4010ae:	1b5a      	subs	r2, r3, r5
  4010b0:	2a0f      	cmp	r2, #15
  4010b2:	ddf2      	ble.n	40109a <_malloc_r+0x56>
  4010b4:	49b9      	ldr	r1, [pc, #740]	; (40139c <_malloc_r+0x358>)
  4010b6:	693c      	ldr	r4, [r7, #16]
  4010b8:	f101 0e08 	add.w	lr, r1, #8
  4010bc:	4574      	cmp	r4, lr
  4010be:	f000 81b3 	beq.w	401428 <_malloc_r+0x3e4>
  4010c2:	6863      	ldr	r3, [r4, #4]
  4010c4:	f023 0303 	bic.w	r3, r3, #3
  4010c8:	1b5a      	subs	r2, r3, r5
  4010ca:	2a0f      	cmp	r2, #15
  4010cc:	f300 8199 	bgt.w	401402 <_malloc_r+0x3be>
  4010d0:	2a00      	cmp	r2, #0
  4010d2:	f8c1 e014 	str.w	lr, [r1, #20]
  4010d6:	f8c1 e010 	str.w	lr, [r1, #16]
  4010da:	f280 809e 	bge.w	40121a <_malloc_r+0x1d6>
  4010de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4010e2:	f080 8167 	bcs.w	4013b4 <_malloc_r+0x370>
  4010e6:	08db      	lsrs	r3, r3, #3
  4010e8:	f103 0c01 	add.w	ip, r3, #1
  4010ec:	2201      	movs	r2, #1
  4010ee:	109b      	asrs	r3, r3, #2
  4010f0:	fa02 f303 	lsl.w	r3, r2, r3
  4010f4:	684a      	ldr	r2, [r1, #4]
  4010f6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4010fa:	f8c4 8008 	str.w	r8, [r4, #8]
  4010fe:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  401102:	431a      	orrs	r2, r3
  401104:	f1a9 0308 	sub.w	r3, r9, #8
  401108:	60e3      	str	r3, [r4, #12]
  40110a:	604a      	str	r2, [r1, #4]
  40110c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  401110:	f8c8 400c 	str.w	r4, [r8, #12]
  401114:	1083      	asrs	r3, r0, #2
  401116:	2401      	movs	r4, #1
  401118:	409c      	lsls	r4, r3
  40111a:	4294      	cmp	r4, r2
  40111c:	f200 808a 	bhi.w	401234 <_malloc_r+0x1f0>
  401120:	4214      	tst	r4, r2
  401122:	d106      	bne.n	401132 <_malloc_r+0xee>
  401124:	f020 0003 	bic.w	r0, r0, #3
  401128:	0064      	lsls	r4, r4, #1
  40112a:	4214      	tst	r4, r2
  40112c:	f100 0004 	add.w	r0, r0, #4
  401130:	d0fa      	beq.n	401128 <_malloc_r+0xe4>
  401132:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401136:	46cc      	mov	ip, r9
  401138:	4680      	mov	r8, r0
  40113a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40113e:	458c      	cmp	ip, r1
  401140:	d107      	bne.n	401152 <_malloc_r+0x10e>
  401142:	e173      	b.n	40142c <_malloc_r+0x3e8>
  401144:	2a00      	cmp	r2, #0
  401146:	f280 8181 	bge.w	40144c <_malloc_r+0x408>
  40114a:	68c9      	ldr	r1, [r1, #12]
  40114c:	458c      	cmp	ip, r1
  40114e:	f000 816d 	beq.w	40142c <_malloc_r+0x3e8>
  401152:	684b      	ldr	r3, [r1, #4]
  401154:	f023 0303 	bic.w	r3, r3, #3
  401158:	1b5a      	subs	r2, r3, r5
  40115a:	2a0f      	cmp	r2, #15
  40115c:	ddf2      	ble.n	401144 <_malloc_r+0x100>
  40115e:	460c      	mov	r4, r1
  401160:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  401164:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401168:	194b      	adds	r3, r1, r5
  40116a:	f045 0501 	orr.w	r5, r5, #1
  40116e:	604d      	str	r5, [r1, #4]
  401170:	f042 0101 	orr.w	r1, r2, #1
  401174:	f8c8 c00c 	str.w	ip, [r8, #12]
  401178:	4630      	mov	r0, r6
  40117a:	f8cc 8008 	str.w	r8, [ip, #8]
  40117e:	617b      	str	r3, [r7, #20]
  401180:	613b      	str	r3, [r7, #16]
  401182:	f8c3 e00c 	str.w	lr, [r3, #12]
  401186:	f8c3 e008 	str.w	lr, [r3, #8]
  40118a:	6059      	str	r1, [r3, #4]
  40118c:	509a      	str	r2, [r3, r2]
  40118e:	f000 fb5f 	bl	401850 <__malloc_unlock>
  401192:	e01f      	b.n	4011d4 <_malloc_r+0x190>
  401194:	2910      	cmp	r1, #16
  401196:	d821      	bhi.n	4011dc <_malloc_r+0x198>
  401198:	f000 fb58 	bl	40184c <__malloc_lock>
  40119c:	2510      	movs	r5, #16
  40119e:	2306      	movs	r3, #6
  4011a0:	2002      	movs	r0, #2
  4011a2:	4f7e      	ldr	r7, [pc, #504]	; (40139c <_malloc_r+0x358>)
  4011a4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4011a8:	f1a3 0208 	sub.w	r2, r3, #8
  4011ac:	685c      	ldr	r4, [r3, #4]
  4011ae:	4294      	cmp	r4, r2
  4011b0:	f000 8145 	beq.w	40143e <_malloc_r+0x3fa>
  4011b4:	6863      	ldr	r3, [r4, #4]
  4011b6:	68e1      	ldr	r1, [r4, #12]
  4011b8:	68a5      	ldr	r5, [r4, #8]
  4011ba:	f023 0303 	bic.w	r3, r3, #3
  4011be:	4423      	add	r3, r4
  4011c0:	4630      	mov	r0, r6
  4011c2:	685a      	ldr	r2, [r3, #4]
  4011c4:	60e9      	str	r1, [r5, #12]
  4011c6:	f042 0201 	orr.w	r2, r2, #1
  4011ca:	608d      	str	r5, [r1, #8]
  4011cc:	605a      	str	r2, [r3, #4]
  4011ce:	f000 fb3f 	bl	401850 <__malloc_unlock>
  4011d2:	3408      	adds	r4, #8
  4011d4:	4620      	mov	r0, r4
  4011d6:	b003      	add	sp, #12
  4011d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011dc:	2400      	movs	r4, #0
  4011de:	230c      	movs	r3, #12
  4011e0:	4620      	mov	r0, r4
  4011e2:	6033      	str	r3, [r6, #0]
  4011e4:	b003      	add	sp, #12
  4011e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011ea:	2380      	movs	r3, #128	; 0x80
  4011ec:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4011f0:	203f      	movs	r0, #63	; 0x3f
  4011f2:	e749      	b.n	401088 <_malloc_r+0x44>
  4011f4:	4670      	mov	r0, lr
  4011f6:	e75d      	b.n	4010b4 <_malloc_r+0x70>
  4011f8:	4423      	add	r3, r4
  4011fa:	68e1      	ldr	r1, [r4, #12]
  4011fc:	685a      	ldr	r2, [r3, #4]
  4011fe:	68a5      	ldr	r5, [r4, #8]
  401200:	f042 0201 	orr.w	r2, r2, #1
  401204:	60e9      	str	r1, [r5, #12]
  401206:	4630      	mov	r0, r6
  401208:	608d      	str	r5, [r1, #8]
  40120a:	605a      	str	r2, [r3, #4]
  40120c:	f000 fb20 	bl	401850 <__malloc_unlock>
  401210:	3408      	adds	r4, #8
  401212:	4620      	mov	r0, r4
  401214:	b003      	add	sp, #12
  401216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40121a:	4423      	add	r3, r4
  40121c:	4630      	mov	r0, r6
  40121e:	685a      	ldr	r2, [r3, #4]
  401220:	f042 0201 	orr.w	r2, r2, #1
  401224:	605a      	str	r2, [r3, #4]
  401226:	f000 fb13 	bl	401850 <__malloc_unlock>
  40122a:	3408      	adds	r4, #8
  40122c:	4620      	mov	r0, r4
  40122e:	b003      	add	sp, #12
  401230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401234:	68bc      	ldr	r4, [r7, #8]
  401236:	6863      	ldr	r3, [r4, #4]
  401238:	f023 0803 	bic.w	r8, r3, #3
  40123c:	45a8      	cmp	r8, r5
  40123e:	d304      	bcc.n	40124a <_malloc_r+0x206>
  401240:	ebc5 0308 	rsb	r3, r5, r8
  401244:	2b0f      	cmp	r3, #15
  401246:	f300 808c 	bgt.w	401362 <_malloc_r+0x31e>
  40124a:	4b55      	ldr	r3, [pc, #340]	; (4013a0 <_malloc_r+0x35c>)
  40124c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4013b0 <_malloc_r+0x36c>
  401250:	681a      	ldr	r2, [r3, #0]
  401252:	f8d9 3000 	ldr.w	r3, [r9]
  401256:	3301      	adds	r3, #1
  401258:	442a      	add	r2, r5
  40125a:	eb04 0a08 	add.w	sl, r4, r8
  40125e:	f000 8160 	beq.w	401522 <_malloc_r+0x4de>
  401262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  401266:	320f      	adds	r2, #15
  401268:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40126c:	f022 020f 	bic.w	r2, r2, #15
  401270:	4611      	mov	r1, r2
  401272:	4630      	mov	r0, r6
  401274:	9201      	str	r2, [sp, #4]
  401276:	f000 fd19 	bl	401cac <_sbrk_r>
  40127a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40127e:	4683      	mov	fp, r0
  401280:	9a01      	ldr	r2, [sp, #4]
  401282:	f000 8158 	beq.w	401536 <_malloc_r+0x4f2>
  401286:	4582      	cmp	sl, r0
  401288:	f200 80fc 	bhi.w	401484 <_malloc_r+0x440>
  40128c:	4b45      	ldr	r3, [pc, #276]	; (4013a4 <_malloc_r+0x360>)
  40128e:	6819      	ldr	r1, [r3, #0]
  401290:	45da      	cmp	sl, fp
  401292:	4411      	add	r1, r2
  401294:	6019      	str	r1, [r3, #0]
  401296:	f000 8153 	beq.w	401540 <_malloc_r+0x4fc>
  40129a:	f8d9 0000 	ldr.w	r0, [r9]
  40129e:	f8df e110 	ldr.w	lr, [pc, #272]	; 4013b0 <_malloc_r+0x36c>
  4012a2:	3001      	adds	r0, #1
  4012a4:	bf1b      	ittet	ne
  4012a6:	ebca 0a0b 	rsbne	sl, sl, fp
  4012aa:	4451      	addne	r1, sl
  4012ac:	f8ce b000 	streq.w	fp, [lr]
  4012b0:	6019      	strne	r1, [r3, #0]
  4012b2:	f01b 0107 	ands.w	r1, fp, #7
  4012b6:	f000 8117 	beq.w	4014e8 <_malloc_r+0x4a4>
  4012ba:	f1c1 0008 	rsb	r0, r1, #8
  4012be:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4012c2:	4483      	add	fp, r0
  4012c4:	3108      	adds	r1, #8
  4012c6:	445a      	add	r2, fp
  4012c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4012cc:	ebc2 0901 	rsb	r9, r2, r1
  4012d0:	4649      	mov	r1, r9
  4012d2:	4630      	mov	r0, r6
  4012d4:	9301      	str	r3, [sp, #4]
  4012d6:	f000 fce9 	bl	401cac <_sbrk_r>
  4012da:	1c43      	adds	r3, r0, #1
  4012dc:	9b01      	ldr	r3, [sp, #4]
  4012de:	f000 813f 	beq.w	401560 <_malloc_r+0x51c>
  4012e2:	ebcb 0200 	rsb	r2, fp, r0
  4012e6:	444a      	add	r2, r9
  4012e8:	f042 0201 	orr.w	r2, r2, #1
  4012ec:	6819      	ldr	r1, [r3, #0]
  4012ee:	f8c7 b008 	str.w	fp, [r7, #8]
  4012f2:	4449      	add	r1, r9
  4012f4:	42bc      	cmp	r4, r7
  4012f6:	f8cb 2004 	str.w	r2, [fp, #4]
  4012fa:	6019      	str	r1, [r3, #0]
  4012fc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4013a4 <_malloc_r+0x360>
  401300:	d016      	beq.n	401330 <_malloc_r+0x2ec>
  401302:	f1b8 0f0f 	cmp.w	r8, #15
  401306:	f240 80fd 	bls.w	401504 <_malloc_r+0x4c0>
  40130a:	6862      	ldr	r2, [r4, #4]
  40130c:	f1a8 030c 	sub.w	r3, r8, #12
  401310:	f023 0307 	bic.w	r3, r3, #7
  401314:	18e0      	adds	r0, r4, r3
  401316:	f002 0201 	and.w	r2, r2, #1
  40131a:	f04f 0e05 	mov.w	lr, #5
  40131e:	431a      	orrs	r2, r3
  401320:	2b0f      	cmp	r3, #15
  401322:	6062      	str	r2, [r4, #4]
  401324:	f8c0 e004 	str.w	lr, [r0, #4]
  401328:	f8c0 e008 	str.w	lr, [r0, #8]
  40132c:	f200 811c 	bhi.w	401568 <_malloc_r+0x524>
  401330:	4b1d      	ldr	r3, [pc, #116]	; (4013a8 <_malloc_r+0x364>)
  401332:	68bc      	ldr	r4, [r7, #8]
  401334:	681a      	ldr	r2, [r3, #0]
  401336:	4291      	cmp	r1, r2
  401338:	bf88      	it	hi
  40133a:	6019      	strhi	r1, [r3, #0]
  40133c:	4b1b      	ldr	r3, [pc, #108]	; (4013ac <_malloc_r+0x368>)
  40133e:	681a      	ldr	r2, [r3, #0]
  401340:	4291      	cmp	r1, r2
  401342:	6862      	ldr	r2, [r4, #4]
  401344:	bf88      	it	hi
  401346:	6019      	strhi	r1, [r3, #0]
  401348:	f022 0203 	bic.w	r2, r2, #3
  40134c:	4295      	cmp	r5, r2
  40134e:	eba2 0305 	sub.w	r3, r2, r5
  401352:	d801      	bhi.n	401358 <_malloc_r+0x314>
  401354:	2b0f      	cmp	r3, #15
  401356:	dc04      	bgt.n	401362 <_malloc_r+0x31e>
  401358:	4630      	mov	r0, r6
  40135a:	f000 fa79 	bl	401850 <__malloc_unlock>
  40135e:	2400      	movs	r4, #0
  401360:	e738      	b.n	4011d4 <_malloc_r+0x190>
  401362:	1962      	adds	r2, r4, r5
  401364:	f043 0301 	orr.w	r3, r3, #1
  401368:	f045 0501 	orr.w	r5, r5, #1
  40136c:	6065      	str	r5, [r4, #4]
  40136e:	4630      	mov	r0, r6
  401370:	60ba      	str	r2, [r7, #8]
  401372:	6053      	str	r3, [r2, #4]
  401374:	f000 fa6c 	bl	401850 <__malloc_unlock>
  401378:	3408      	adds	r4, #8
  40137a:	4620      	mov	r0, r4
  40137c:	b003      	add	sp, #12
  40137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401382:	2b14      	cmp	r3, #20
  401384:	d971      	bls.n	40146a <_malloc_r+0x426>
  401386:	2b54      	cmp	r3, #84	; 0x54
  401388:	f200 80a4 	bhi.w	4014d4 <_malloc_r+0x490>
  40138c:	0b28      	lsrs	r0, r5, #12
  40138e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  401392:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401396:	306e      	adds	r0, #110	; 0x6e
  401398:	e676      	b.n	401088 <_malloc_r+0x44>
  40139a:	bf00      	nop
  40139c:	2000043c 	.word	0x2000043c
  4013a0:	2000095c 	.word	0x2000095c
  4013a4:	20000960 	.word	0x20000960
  4013a8:	20000958 	.word	0x20000958
  4013ac:	20000954 	.word	0x20000954
  4013b0:	20000848 	.word	0x20000848
  4013b4:	0a5a      	lsrs	r2, r3, #9
  4013b6:	2a04      	cmp	r2, #4
  4013b8:	d95e      	bls.n	401478 <_malloc_r+0x434>
  4013ba:	2a14      	cmp	r2, #20
  4013bc:	f200 80b3 	bhi.w	401526 <_malloc_r+0x4e2>
  4013c0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4013c4:	0049      	lsls	r1, r1, #1
  4013c6:	325b      	adds	r2, #91	; 0x5b
  4013c8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4013cc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4013d0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4015b0 <_malloc_r+0x56c>
  4013d4:	f1ac 0c08 	sub.w	ip, ip, #8
  4013d8:	458c      	cmp	ip, r1
  4013da:	f000 8088 	beq.w	4014ee <_malloc_r+0x4aa>
  4013de:	684a      	ldr	r2, [r1, #4]
  4013e0:	f022 0203 	bic.w	r2, r2, #3
  4013e4:	4293      	cmp	r3, r2
  4013e6:	d202      	bcs.n	4013ee <_malloc_r+0x3aa>
  4013e8:	6889      	ldr	r1, [r1, #8]
  4013ea:	458c      	cmp	ip, r1
  4013ec:	d1f7      	bne.n	4013de <_malloc_r+0x39a>
  4013ee:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4013f2:	687a      	ldr	r2, [r7, #4]
  4013f4:	f8c4 c00c 	str.w	ip, [r4, #12]
  4013f8:	60a1      	str	r1, [r4, #8]
  4013fa:	f8cc 4008 	str.w	r4, [ip, #8]
  4013fe:	60cc      	str	r4, [r1, #12]
  401400:	e688      	b.n	401114 <_malloc_r+0xd0>
  401402:	1963      	adds	r3, r4, r5
  401404:	f042 0701 	orr.w	r7, r2, #1
  401408:	f045 0501 	orr.w	r5, r5, #1
  40140c:	6065      	str	r5, [r4, #4]
  40140e:	4630      	mov	r0, r6
  401410:	614b      	str	r3, [r1, #20]
  401412:	610b      	str	r3, [r1, #16]
  401414:	f8c3 e00c 	str.w	lr, [r3, #12]
  401418:	f8c3 e008 	str.w	lr, [r3, #8]
  40141c:	605f      	str	r7, [r3, #4]
  40141e:	509a      	str	r2, [r3, r2]
  401420:	3408      	adds	r4, #8
  401422:	f000 fa15 	bl	401850 <__malloc_unlock>
  401426:	e6d5      	b.n	4011d4 <_malloc_r+0x190>
  401428:	684a      	ldr	r2, [r1, #4]
  40142a:	e673      	b.n	401114 <_malloc_r+0xd0>
  40142c:	f108 0801 	add.w	r8, r8, #1
  401430:	f018 0f03 	tst.w	r8, #3
  401434:	f10c 0c08 	add.w	ip, ip, #8
  401438:	f47f ae7f 	bne.w	40113a <_malloc_r+0xf6>
  40143c:	e030      	b.n	4014a0 <_malloc_r+0x45c>
  40143e:	68dc      	ldr	r4, [r3, #12]
  401440:	42a3      	cmp	r3, r4
  401442:	bf08      	it	eq
  401444:	3002      	addeq	r0, #2
  401446:	f43f ae35 	beq.w	4010b4 <_malloc_r+0x70>
  40144a:	e6b3      	b.n	4011b4 <_malloc_r+0x170>
  40144c:	440b      	add	r3, r1
  40144e:	460c      	mov	r4, r1
  401450:	685a      	ldr	r2, [r3, #4]
  401452:	68c9      	ldr	r1, [r1, #12]
  401454:	f854 5f08 	ldr.w	r5, [r4, #8]!
  401458:	f042 0201 	orr.w	r2, r2, #1
  40145c:	605a      	str	r2, [r3, #4]
  40145e:	4630      	mov	r0, r6
  401460:	60e9      	str	r1, [r5, #12]
  401462:	608d      	str	r5, [r1, #8]
  401464:	f000 f9f4 	bl	401850 <__malloc_unlock>
  401468:	e6b4      	b.n	4011d4 <_malloc_r+0x190>
  40146a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40146e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  401472:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401476:	e607      	b.n	401088 <_malloc_r+0x44>
  401478:	099a      	lsrs	r2, r3, #6
  40147a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40147e:	0049      	lsls	r1, r1, #1
  401480:	3238      	adds	r2, #56	; 0x38
  401482:	e7a1      	b.n	4013c8 <_malloc_r+0x384>
  401484:	42bc      	cmp	r4, r7
  401486:	4b4a      	ldr	r3, [pc, #296]	; (4015b0 <_malloc_r+0x56c>)
  401488:	f43f af00 	beq.w	40128c <_malloc_r+0x248>
  40148c:	689c      	ldr	r4, [r3, #8]
  40148e:	6862      	ldr	r2, [r4, #4]
  401490:	f022 0203 	bic.w	r2, r2, #3
  401494:	e75a      	b.n	40134c <_malloc_r+0x308>
  401496:	f859 3908 	ldr.w	r3, [r9], #-8
  40149a:	4599      	cmp	r9, r3
  40149c:	f040 8082 	bne.w	4015a4 <_malloc_r+0x560>
  4014a0:	f010 0f03 	tst.w	r0, #3
  4014a4:	f100 30ff 	add.w	r0, r0, #4294967295
  4014a8:	d1f5      	bne.n	401496 <_malloc_r+0x452>
  4014aa:	687b      	ldr	r3, [r7, #4]
  4014ac:	ea23 0304 	bic.w	r3, r3, r4
  4014b0:	607b      	str	r3, [r7, #4]
  4014b2:	0064      	lsls	r4, r4, #1
  4014b4:	429c      	cmp	r4, r3
  4014b6:	f63f aebd 	bhi.w	401234 <_malloc_r+0x1f0>
  4014ba:	2c00      	cmp	r4, #0
  4014bc:	f43f aeba 	beq.w	401234 <_malloc_r+0x1f0>
  4014c0:	421c      	tst	r4, r3
  4014c2:	4640      	mov	r0, r8
  4014c4:	f47f ae35 	bne.w	401132 <_malloc_r+0xee>
  4014c8:	0064      	lsls	r4, r4, #1
  4014ca:	421c      	tst	r4, r3
  4014cc:	f100 0004 	add.w	r0, r0, #4
  4014d0:	d0fa      	beq.n	4014c8 <_malloc_r+0x484>
  4014d2:	e62e      	b.n	401132 <_malloc_r+0xee>
  4014d4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4014d8:	d818      	bhi.n	40150c <_malloc_r+0x4c8>
  4014da:	0be8      	lsrs	r0, r5, #15
  4014dc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4014e0:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4014e4:	3077      	adds	r0, #119	; 0x77
  4014e6:	e5cf      	b.n	401088 <_malloc_r+0x44>
  4014e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4014ec:	e6eb      	b.n	4012c6 <_malloc_r+0x282>
  4014ee:	2101      	movs	r1, #1
  4014f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4014f4:	1092      	asrs	r2, r2, #2
  4014f6:	fa01 f202 	lsl.w	r2, r1, r2
  4014fa:	431a      	orrs	r2, r3
  4014fc:	f8c8 2004 	str.w	r2, [r8, #4]
  401500:	4661      	mov	r1, ip
  401502:	e777      	b.n	4013f4 <_malloc_r+0x3b0>
  401504:	2301      	movs	r3, #1
  401506:	f8cb 3004 	str.w	r3, [fp, #4]
  40150a:	e725      	b.n	401358 <_malloc_r+0x314>
  40150c:	f240 5254 	movw	r2, #1364	; 0x554
  401510:	4293      	cmp	r3, r2
  401512:	d820      	bhi.n	401556 <_malloc_r+0x512>
  401514:	0ca8      	lsrs	r0, r5, #18
  401516:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40151a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40151e:	307c      	adds	r0, #124	; 0x7c
  401520:	e5b2      	b.n	401088 <_malloc_r+0x44>
  401522:	3210      	adds	r2, #16
  401524:	e6a4      	b.n	401270 <_malloc_r+0x22c>
  401526:	2a54      	cmp	r2, #84	; 0x54
  401528:	d826      	bhi.n	401578 <_malloc_r+0x534>
  40152a:	0b1a      	lsrs	r2, r3, #12
  40152c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401530:	0049      	lsls	r1, r1, #1
  401532:	326e      	adds	r2, #110	; 0x6e
  401534:	e748      	b.n	4013c8 <_malloc_r+0x384>
  401536:	68bc      	ldr	r4, [r7, #8]
  401538:	6862      	ldr	r2, [r4, #4]
  40153a:	f022 0203 	bic.w	r2, r2, #3
  40153e:	e705      	b.n	40134c <_malloc_r+0x308>
  401540:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401544:	2800      	cmp	r0, #0
  401546:	f47f aea8 	bne.w	40129a <_malloc_r+0x256>
  40154a:	4442      	add	r2, r8
  40154c:	68bb      	ldr	r3, [r7, #8]
  40154e:	f042 0201 	orr.w	r2, r2, #1
  401552:	605a      	str	r2, [r3, #4]
  401554:	e6ec      	b.n	401330 <_malloc_r+0x2ec>
  401556:	23fe      	movs	r3, #254	; 0xfe
  401558:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40155c:	207e      	movs	r0, #126	; 0x7e
  40155e:	e593      	b.n	401088 <_malloc_r+0x44>
  401560:	2201      	movs	r2, #1
  401562:	f04f 0900 	mov.w	r9, #0
  401566:	e6c1      	b.n	4012ec <_malloc_r+0x2a8>
  401568:	f104 0108 	add.w	r1, r4, #8
  40156c:	4630      	mov	r0, r6
  40156e:	f002 fce1 	bl	403f34 <_free_r>
  401572:	f8d9 1000 	ldr.w	r1, [r9]
  401576:	e6db      	b.n	401330 <_malloc_r+0x2ec>
  401578:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40157c:	d805      	bhi.n	40158a <_malloc_r+0x546>
  40157e:	0bda      	lsrs	r2, r3, #15
  401580:	f102 0178 	add.w	r1, r2, #120	; 0x78
  401584:	0049      	lsls	r1, r1, #1
  401586:	3277      	adds	r2, #119	; 0x77
  401588:	e71e      	b.n	4013c8 <_malloc_r+0x384>
  40158a:	f240 5154 	movw	r1, #1364	; 0x554
  40158e:	428a      	cmp	r2, r1
  401590:	d805      	bhi.n	40159e <_malloc_r+0x55a>
  401592:	0c9a      	lsrs	r2, r3, #18
  401594:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401598:	0049      	lsls	r1, r1, #1
  40159a:	327c      	adds	r2, #124	; 0x7c
  40159c:	e714      	b.n	4013c8 <_malloc_r+0x384>
  40159e:	21fe      	movs	r1, #254	; 0xfe
  4015a0:	227e      	movs	r2, #126	; 0x7e
  4015a2:	e711      	b.n	4013c8 <_malloc_r+0x384>
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	e784      	b.n	4014b2 <_malloc_r+0x46e>
  4015a8:	08e8      	lsrs	r0, r5, #3
  4015aa:	1c43      	adds	r3, r0, #1
  4015ac:	005b      	lsls	r3, r3, #1
  4015ae:	e5f8      	b.n	4011a2 <_malloc_r+0x15e>
  4015b0:	2000043c 	.word	0x2000043c

004015b4 <memcpy>:
  4015b4:	4684      	mov	ip, r0
  4015b6:	ea41 0300 	orr.w	r3, r1, r0
  4015ba:	f013 0303 	ands.w	r3, r3, #3
  4015be:	d16d      	bne.n	40169c <memcpy+0xe8>
  4015c0:	3a40      	subs	r2, #64	; 0x40
  4015c2:	d341      	bcc.n	401648 <memcpy+0x94>
  4015c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4015c8:	f840 3b04 	str.w	r3, [r0], #4
  4015cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4015d0:	f840 3b04 	str.w	r3, [r0], #4
  4015d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4015d8:	f840 3b04 	str.w	r3, [r0], #4
  4015dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4015e0:	f840 3b04 	str.w	r3, [r0], #4
  4015e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4015e8:	f840 3b04 	str.w	r3, [r0], #4
  4015ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4015f0:	f840 3b04 	str.w	r3, [r0], #4
  4015f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4015f8:	f840 3b04 	str.w	r3, [r0], #4
  4015fc:	f851 3b04 	ldr.w	r3, [r1], #4
  401600:	f840 3b04 	str.w	r3, [r0], #4
  401604:	f851 3b04 	ldr.w	r3, [r1], #4
  401608:	f840 3b04 	str.w	r3, [r0], #4
  40160c:	f851 3b04 	ldr.w	r3, [r1], #4
  401610:	f840 3b04 	str.w	r3, [r0], #4
  401614:	f851 3b04 	ldr.w	r3, [r1], #4
  401618:	f840 3b04 	str.w	r3, [r0], #4
  40161c:	f851 3b04 	ldr.w	r3, [r1], #4
  401620:	f840 3b04 	str.w	r3, [r0], #4
  401624:	f851 3b04 	ldr.w	r3, [r1], #4
  401628:	f840 3b04 	str.w	r3, [r0], #4
  40162c:	f851 3b04 	ldr.w	r3, [r1], #4
  401630:	f840 3b04 	str.w	r3, [r0], #4
  401634:	f851 3b04 	ldr.w	r3, [r1], #4
  401638:	f840 3b04 	str.w	r3, [r0], #4
  40163c:	f851 3b04 	ldr.w	r3, [r1], #4
  401640:	f840 3b04 	str.w	r3, [r0], #4
  401644:	3a40      	subs	r2, #64	; 0x40
  401646:	d2bd      	bcs.n	4015c4 <memcpy+0x10>
  401648:	3230      	adds	r2, #48	; 0x30
  40164a:	d311      	bcc.n	401670 <memcpy+0xbc>
  40164c:	f851 3b04 	ldr.w	r3, [r1], #4
  401650:	f840 3b04 	str.w	r3, [r0], #4
  401654:	f851 3b04 	ldr.w	r3, [r1], #4
  401658:	f840 3b04 	str.w	r3, [r0], #4
  40165c:	f851 3b04 	ldr.w	r3, [r1], #4
  401660:	f840 3b04 	str.w	r3, [r0], #4
  401664:	f851 3b04 	ldr.w	r3, [r1], #4
  401668:	f840 3b04 	str.w	r3, [r0], #4
  40166c:	3a10      	subs	r2, #16
  40166e:	d2ed      	bcs.n	40164c <memcpy+0x98>
  401670:	320c      	adds	r2, #12
  401672:	d305      	bcc.n	401680 <memcpy+0xcc>
  401674:	f851 3b04 	ldr.w	r3, [r1], #4
  401678:	f840 3b04 	str.w	r3, [r0], #4
  40167c:	3a04      	subs	r2, #4
  40167e:	d2f9      	bcs.n	401674 <memcpy+0xc0>
  401680:	3204      	adds	r2, #4
  401682:	d008      	beq.n	401696 <memcpy+0xe2>
  401684:	07d2      	lsls	r2, r2, #31
  401686:	bf1c      	itt	ne
  401688:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40168c:	f800 3b01 	strbne.w	r3, [r0], #1
  401690:	d301      	bcc.n	401696 <memcpy+0xe2>
  401692:	880b      	ldrh	r3, [r1, #0]
  401694:	8003      	strh	r3, [r0, #0]
  401696:	4660      	mov	r0, ip
  401698:	4770      	bx	lr
  40169a:	bf00      	nop
  40169c:	2a08      	cmp	r2, #8
  40169e:	d313      	bcc.n	4016c8 <memcpy+0x114>
  4016a0:	078b      	lsls	r3, r1, #30
  4016a2:	d08d      	beq.n	4015c0 <memcpy+0xc>
  4016a4:	f010 0303 	ands.w	r3, r0, #3
  4016a8:	d08a      	beq.n	4015c0 <memcpy+0xc>
  4016aa:	f1c3 0304 	rsb	r3, r3, #4
  4016ae:	1ad2      	subs	r2, r2, r3
  4016b0:	07db      	lsls	r3, r3, #31
  4016b2:	bf1c      	itt	ne
  4016b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4016b8:	f800 3b01 	strbne.w	r3, [r0], #1
  4016bc:	d380      	bcc.n	4015c0 <memcpy+0xc>
  4016be:	f831 3b02 	ldrh.w	r3, [r1], #2
  4016c2:	f820 3b02 	strh.w	r3, [r0], #2
  4016c6:	e77b      	b.n	4015c0 <memcpy+0xc>
  4016c8:	3a04      	subs	r2, #4
  4016ca:	d3d9      	bcc.n	401680 <memcpy+0xcc>
  4016cc:	3a01      	subs	r2, #1
  4016ce:	f811 3b01 	ldrb.w	r3, [r1], #1
  4016d2:	f800 3b01 	strb.w	r3, [r0], #1
  4016d6:	d2f9      	bcs.n	4016cc <memcpy+0x118>
  4016d8:	780b      	ldrb	r3, [r1, #0]
  4016da:	7003      	strb	r3, [r0, #0]
  4016dc:	784b      	ldrb	r3, [r1, #1]
  4016de:	7043      	strb	r3, [r0, #1]
  4016e0:	788b      	ldrb	r3, [r1, #2]
  4016e2:	7083      	strb	r3, [r0, #2]
  4016e4:	4660      	mov	r0, ip
  4016e6:	4770      	bx	lr

004016e8 <memmove>:
  4016e8:	4288      	cmp	r0, r1
  4016ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016ec:	d90d      	bls.n	40170a <memmove+0x22>
  4016ee:	188b      	adds	r3, r1, r2
  4016f0:	4298      	cmp	r0, r3
  4016f2:	d20a      	bcs.n	40170a <memmove+0x22>
  4016f4:	1881      	adds	r1, r0, r2
  4016f6:	2a00      	cmp	r2, #0
  4016f8:	d051      	beq.n	40179e <memmove+0xb6>
  4016fa:	1a9a      	subs	r2, r3, r2
  4016fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  401700:	f801 4d01 	strb.w	r4, [r1, #-1]!
  401704:	4293      	cmp	r3, r2
  401706:	d1f9      	bne.n	4016fc <memmove+0x14>
  401708:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40170a:	2a0f      	cmp	r2, #15
  40170c:	d948      	bls.n	4017a0 <memmove+0xb8>
  40170e:	ea41 0300 	orr.w	r3, r1, r0
  401712:	079b      	lsls	r3, r3, #30
  401714:	d146      	bne.n	4017a4 <memmove+0xbc>
  401716:	f100 0410 	add.w	r4, r0, #16
  40171a:	f101 0310 	add.w	r3, r1, #16
  40171e:	4615      	mov	r5, r2
  401720:	f853 6c10 	ldr.w	r6, [r3, #-16]
  401724:	f844 6c10 	str.w	r6, [r4, #-16]
  401728:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40172c:	f844 6c0c 	str.w	r6, [r4, #-12]
  401730:	f853 6c08 	ldr.w	r6, [r3, #-8]
  401734:	f844 6c08 	str.w	r6, [r4, #-8]
  401738:	3d10      	subs	r5, #16
  40173a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40173e:	f844 6c04 	str.w	r6, [r4, #-4]
  401742:	2d0f      	cmp	r5, #15
  401744:	f103 0310 	add.w	r3, r3, #16
  401748:	f104 0410 	add.w	r4, r4, #16
  40174c:	d8e8      	bhi.n	401720 <memmove+0x38>
  40174e:	f1a2 0310 	sub.w	r3, r2, #16
  401752:	f023 030f 	bic.w	r3, r3, #15
  401756:	f002 0e0f 	and.w	lr, r2, #15
  40175a:	3310      	adds	r3, #16
  40175c:	f1be 0f03 	cmp.w	lr, #3
  401760:	4419      	add	r1, r3
  401762:	4403      	add	r3, r0
  401764:	d921      	bls.n	4017aa <memmove+0xc2>
  401766:	1f1e      	subs	r6, r3, #4
  401768:	460d      	mov	r5, r1
  40176a:	4674      	mov	r4, lr
  40176c:	3c04      	subs	r4, #4
  40176e:	f855 7b04 	ldr.w	r7, [r5], #4
  401772:	f846 7f04 	str.w	r7, [r6, #4]!
  401776:	2c03      	cmp	r4, #3
  401778:	d8f8      	bhi.n	40176c <memmove+0x84>
  40177a:	f1ae 0404 	sub.w	r4, lr, #4
  40177e:	f024 0403 	bic.w	r4, r4, #3
  401782:	3404      	adds	r4, #4
  401784:	4423      	add	r3, r4
  401786:	4421      	add	r1, r4
  401788:	f002 0203 	and.w	r2, r2, #3
  40178c:	b162      	cbz	r2, 4017a8 <memmove+0xc0>
  40178e:	3b01      	subs	r3, #1
  401790:	440a      	add	r2, r1
  401792:	f811 4b01 	ldrb.w	r4, [r1], #1
  401796:	f803 4f01 	strb.w	r4, [r3, #1]!
  40179a:	428a      	cmp	r2, r1
  40179c:	d1f9      	bne.n	401792 <memmove+0xaa>
  40179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017a0:	4603      	mov	r3, r0
  4017a2:	e7f3      	b.n	40178c <memmove+0xa4>
  4017a4:	4603      	mov	r3, r0
  4017a6:	e7f2      	b.n	40178e <memmove+0xa6>
  4017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017aa:	4672      	mov	r2, lr
  4017ac:	e7ee      	b.n	40178c <memmove+0xa4>
  4017ae:	bf00      	nop

004017b0 <memset>:
  4017b0:	b470      	push	{r4, r5, r6}
  4017b2:	0784      	lsls	r4, r0, #30
  4017b4:	d046      	beq.n	401844 <memset+0x94>
  4017b6:	1e54      	subs	r4, r2, #1
  4017b8:	2a00      	cmp	r2, #0
  4017ba:	d041      	beq.n	401840 <memset+0x90>
  4017bc:	b2cd      	uxtb	r5, r1
  4017be:	4603      	mov	r3, r0
  4017c0:	e002      	b.n	4017c8 <memset+0x18>
  4017c2:	1e62      	subs	r2, r4, #1
  4017c4:	b3e4      	cbz	r4, 401840 <memset+0x90>
  4017c6:	4614      	mov	r4, r2
  4017c8:	f803 5b01 	strb.w	r5, [r3], #1
  4017cc:	079a      	lsls	r2, r3, #30
  4017ce:	d1f8      	bne.n	4017c2 <memset+0x12>
  4017d0:	2c03      	cmp	r4, #3
  4017d2:	d92e      	bls.n	401832 <memset+0x82>
  4017d4:	b2cd      	uxtb	r5, r1
  4017d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4017da:	2c0f      	cmp	r4, #15
  4017dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4017e0:	d919      	bls.n	401816 <memset+0x66>
  4017e2:	f103 0210 	add.w	r2, r3, #16
  4017e6:	4626      	mov	r6, r4
  4017e8:	3e10      	subs	r6, #16
  4017ea:	2e0f      	cmp	r6, #15
  4017ec:	f842 5c10 	str.w	r5, [r2, #-16]
  4017f0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4017f4:	f842 5c08 	str.w	r5, [r2, #-8]
  4017f8:	f842 5c04 	str.w	r5, [r2, #-4]
  4017fc:	f102 0210 	add.w	r2, r2, #16
  401800:	d8f2      	bhi.n	4017e8 <memset+0x38>
  401802:	f1a4 0210 	sub.w	r2, r4, #16
  401806:	f022 020f 	bic.w	r2, r2, #15
  40180a:	f004 040f 	and.w	r4, r4, #15
  40180e:	3210      	adds	r2, #16
  401810:	2c03      	cmp	r4, #3
  401812:	4413      	add	r3, r2
  401814:	d90d      	bls.n	401832 <memset+0x82>
  401816:	461e      	mov	r6, r3
  401818:	4622      	mov	r2, r4
  40181a:	3a04      	subs	r2, #4
  40181c:	2a03      	cmp	r2, #3
  40181e:	f846 5b04 	str.w	r5, [r6], #4
  401822:	d8fa      	bhi.n	40181a <memset+0x6a>
  401824:	1f22      	subs	r2, r4, #4
  401826:	f022 0203 	bic.w	r2, r2, #3
  40182a:	3204      	adds	r2, #4
  40182c:	4413      	add	r3, r2
  40182e:	f004 0403 	and.w	r4, r4, #3
  401832:	b12c      	cbz	r4, 401840 <memset+0x90>
  401834:	b2c9      	uxtb	r1, r1
  401836:	441c      	add	r4, r3
  401838:	f803 1b01 	strb.w	r1, [r3], #1
  40183c:	42a3      	cmp	r3, r4
  40183e:	d1fb      	bne.n	401838 <memset+0x88>
  401840:	bc70      	pop	{r4, r5, r6}
  401842:	4770      	bx	lr
  401844:	4614      	mov	r4, r2
  401846:	4603      	mov	r3, r0
  401848:	e7c2      	b.n	4017d0 <memset+0x20>
  40184a:	bf00      	nop

0040184c <__malloc_lock>:
  40184c:	4770      	bx	lr
  40184e:	bf00      	nop

00401850 <__malloc_unlock>:
  401850:	4770      	bx	lr
  401852:	bf00      	nop

00401854 <_puts_r>:
  401854:	b5f0      	push	{r4, r5, r6, r7, lr}
  401856:	4605      	mov	r5, r0
  401858:	b089      	sub	sp, #36	; 0x24
  40185a:	4608      	mov	r0, r1
  40185c:	460c      	mov	r4, r1
  40185e:	f000 faef 	bl	401e40 <strlen>
  401862:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401864:	4f14      	ldr	r7, [pc, #80]	; (4018b8 <_puts_r+0x64>)
  401866:	9404      	str	r4, [sp, #16]
  401868:	2601      	movs	r6, #1
  40186a:	1c44      	adds	r4, r0, #1
  40186c:	a904      	add	r1, sp, #16
  40186e:	2202      	movs	r2, #2
  401870:	9403      	str	r4, [sp, #12]
  401872:	9005      	str	r0, [sp, #20]
  401874:	68ac      	ldr	r4, [r5, #8]
  401876:	9706      	str	r7, [sp, #24]
  401878:	9607      	str	r6, [sp, #28]
  40187a:	9101      	str	r1, [sp, #4]
  40187c:	9202      	str	r2, [sp, #8]
  40187e:	b1b3      	cbz	r3, 4018ae <_puts_r+0x5a>
  401880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401884:	049a      	lsls	r2, r3, #18
  401886:	d406      	bmi.n	401896 <_puts_r+0x42>
  401888:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40188a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40188e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401892:	81a3      	strh	r3, [r4, #12]
  401894:	6662      	str	r2, [r4, #100]	; 0x64
  401896:	4621      	mov	r1, r4
  401898:	4628      	mov	r0, r5
  40189a:	aa01      	add	r2, sp, #4
  40189c:	f002 fc32 	bl	404104 <__sfvwrite_r>
  4018a0:	2800      	cmp	r0, #0
  4018a2:	bf14      	ite	ne
  4018a4:	f04f 30ff 	movne.w	r0, #4294967295
  4018a8:	200a      	moveq	r0, #10
  4018aa:	b009      	add	sp, #36	; 0x24
  4018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018ae:	4628      	mov	r0, r5
  4018b0:	f002 f9a8 	bl	403c04 <__sinit>
  4018b4:	e7e4      	b.n	401880 <_puts_r+0x2c>
  4018b6:	bf00      	nop
  4018b8:	0040578c 	.word	0x0040578c

004018bc <puts>:
  4018bc:	4b02      	ldr	r3, [pc, #8]	; (4018c8 <puts+0xc>)
  4018be:	4601      	mov	r1, r0
  4018c0:	6818      	ldr	r0, [r3, #0]
  4018c2:	f7ff bfc7 	b.w	401854 <_puts_r>
  4018c6:	bf00      	nop
  4018c8:	20000438 	.word	0x20000438

004018cc <_realloc_r>:
  4018cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018d0:	4617      	mov	r7, r2
  4018d2:	b083      	sub	sp, #12
  4018d4:	2900      	cmp	r1, #0
  4018d6:	f000 80c1 	beq.w	401a5c <_realloc_r+0x190>
  4018da:	460e      	mov	r6, r1
  4018dc:	4681      	mov	r9, r0
  4018de:	f107 050b 	add.w	r5, r7, #11
  4018e2:	f7ff ffb3 	bl	40184c <__malloc_lock>
  4018e6:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4018ea:	2d16      	cmp	r5, #22
  4018ec:	f02e 0403 	bic.w	r4, lr, #3
  4018f0:	f1a6 0808 	sub.w	r8, r6, #8
  4018f4:	d840      	bhi.n	401978 <_realloc_r+0xac>
  4018f6:	2210      	movs	r2, #16
  4018f8:	4615      	mov	r5, r2
  4018fa:	42af      	cmp	r7, r5
  4018fc:	d841      	bhi.n	401982 <_realloc_r+0xb6>
  4018fe:	4294      	cmp	r4, r2
  401900:	da75      	bge.n	4019ee <_realloc_r+0x122>
  401902:	4bc9      	ldr	r3, [pc, #804]	; (401c28 <_realloc_r+0x35c>)
  401904:	6899      	ldr	r1, [r3, #8]
  401906:	eb08 0004 	add.w	r0, r8, r4
  40190a:	4288      	cmp	r0, r1
  40190c:	6841      	ldr	r1, [r0, #4]
  40190e:	f000 80d9 	beq.w	401ac4 <_realloc_r+0x1f8>
  401912:	f021 0301 	bic.w	r3, r1, #1
  401916:	4403      	add	r3, r0
  401918:	685b      	ldr	r3, [r3, #4]
  40191a:	07db      	lsls	r3, r3, #31
  40191c:	d57d      	bpl.n	401a1a <_realloc_r+0x14e>
  40191e:	f01e 0f01 	tst.w	lr, #1
  401922:	d035      	beq.n	401990 <_realloc_r+0xc4>
  401924:	4639      	mov	r1, r7
  401926:	4648      	mov	r0, r9
  401928:	f7ff fb8c 	bl	401044 <_malloc_r>
  40192c:	4607      	mov	r7, r0
  40192e:	b1e0      	cbz	r0, 40196a <_realloc_r+0x9e>
  401930:	f856 3c04 	ldr.w	r3, [r6, #-4]
  401934:	f023 0301 	bic.w	r3, r3, #1
  401938:	4443      	add	r3, r8
  40193a:	f1a0 0208 	sub.w	r2, r0, #8
  40193e:	429a      	cmp	r2, r3
  401940:	f000 8144 	beq.w	401bcc <_realloc_r+0x300>
  401944:	1f22      	subs	r2, r4, #4
  401946:	2a24      	cmp	r2, #36	; 0x24
  401948:	f200 8131 	bhi.w	401bae <_realloc_r+0x2e2>
  40194c:	2a13      	cmp	r2, #19
  40194e:	f200 8104 	bhi.w	401b5a <_realloc_r+0x28e>
  401952:	4603      	mov	r3, r0
  401954:	4632      	mov	r2, r6
  401956:	6811      	ldr	r1, [r2, #0]
  401958:	6019      	str	r1, [r3, #0]
  40195a:	6851      	ldr	r1, [r2, #4]
  40195c:	6059      	str	r1, [r3, #4]
  40195e:	6892      	ldr	r2, [r2, #8]
  401960:	609a      	str	r2, [r3, #8]
  401962:	4631      	mov	r1, r6
  401964:	4648      	mov	r0, r9
  401966:	f002 fae5 	bl	403f34 <_free_r>
  40196a:	4648      	mov	r0, r9
  40196c:	f7ff ff70 	bl	401850 <__malloc_unlock>
  401970:	4638      	mov	r0, r7
  401972:	b003      	add	sp, #12
  401974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401978:	f025 0507 	bic.w	r5, r5, #7
  40197c:	2d00      	cmp	r5, #0
  40197e:	462a      	mov	r2, r5
  401980:	dabb      	bge.n	4018fa <_realloc_r+0x2e>
  401982:	230c      	movs	r3, #12
  401984:	2000      	movs	r0, #0
  401986:	f8c9 3000 	str.w	r3, [r9]
  40198a:	b003      	add	sp, #12
  40198c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401990:	f856 3c08 	ldr.w	r3, [r6, #-8]
  401994:	ebc3 0a08 	rsb	sl, r3, r8
  401998:	f8da 3004 	ldr.w	r3, [sl, #4]
  40199c:	f023 0c03 	bic.w	ip, r3, #3
  4019a0:	eb04 030c 	add.w	r3, r4, ip
  4019a4:	4293      	cmp	r3, r2
  4019a6:	dbbd      	blt.n	401924 <_realloc_r+0x58>
  4019a8:	4657      	mov	r7, sl
  4019aa:	f8da 100c 	ldr.w	r1, [sl, #12]
  4019ae:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4019b2:	1f22      	subs	r2, r4, #4
  4019b4:	2a24      	cmp	r2, #36	; 0x24
  4019b6:	60c1      	str	r1, [r0, #12]
  4019b8:	6088      	str	r0, [r1, #8]
  4019ba:	f200 8117 	bhi.w	401bec <_realloc_r+0x320>
  4019be:	2a13      	cmp	r2, #19
  4019c0:	f240 8112 	bls.w	401be8 <_realloc_r+0x31c>
  4019c4:	6831      	ldr	r1, [r6, #0]
  4019c6:	f8ca 1008 	str.w	r1, [sl, #8]
  4019ca:	6871      	ldr	r1, [r6, #4]
  4019cc:	f8ca 100c 	str.w	r1, [sl, #12]
  4019d0:	2a1b      	cmp	r2, #27
  4019d2:	f200 812b 	bhi.w	401c2c <_realloc_r+0x360>
  4019d6:	3608      	adds	r6, #8
  4019d8:	f10a 0210 	add.w	r2, sl, #16
  4019dc:	6831      	ldr	r1, [r6, #0]
  4019de:	6011      	str	r1, [r2, #0]
  4019e0:	6871      	ldr	r1, [r6, #4]
  4019e2:	6051      	str	r1, [r2, #4]
  4019e4:	68b1      	ldr	r1, [r6, #8]
  4019e6:	6091      	str	r1, [r2, #8]
  4019e8:	463e      	mov	r6, r7
  4019ea:	461c      	mov	r4, r3
  4019ec:	46d0      	mov	r8, sl
  4019ee:	1b63      	subs	r3, r4, r5
  4019f0:	2b0f      	cmp	r3, #15
  4019f2:	d81d      	bhi.n	401a30 <_realloc_r+0x164>
  4019f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4019f8:	f003 0301 	and.w	r3, r3, #1
  4019fc:	4323      	orrs	r3, r4
  4019fe:	4444      	add	r4, r8
  401a00:	f8c8 3004 	str.w	r3, [r8, #4]
  401a04:	6863      	ldr	r3, [r4, #4]
  401a06:	f043 0301 	orr.w	r3, r3, #1
  401a0a:	6063      	str	r3, [r4, #4]
  401a0c:	4648      	mov	r0, r9
  401a0e:	f7ff ff1f 	bl	401850 <__malloc_unlock>
  401a12:	4630      	mov	r0, r6
  401a14:	b003      	add	sp, #12
  401a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a1a:	f021 0103 	bic.w	r1, r1, #3
  401a1e:	4421      	add	r1, r4
  401a20:	4291      	cmp	r1, r2
  401a22:	db21      	blt.n	401a68 <_realloc_r+0x19c>
  401a24:	68c3      	ldr	r3, [r0, #12]
  401a26:	6882      	ldr	r2, [r0, #8]
  401a28:	460c      	mov	r4, r1
  401a2a:	60d3      	str	r3, [r2, #12]
  401a2c:	609a      	str	r2, [r3, #8]
  401a2e:	e7de      	b.n	4019ee <_realloc_r+0x122>
  401a30:	f8d8 2004 	ldr.w	r2, [r8, #4]
  401a34:	eb08 0105 	add.w	r1, r8, r5
  401a38:	f002 0201 	and.w	r2, r2, #1
  401a3c:	4315      	orrs	r5, r2
  401a3e:	f043 0201 	orr.w	r2, r3, #1
  401a42:	440b      	add	r3, r1
  401a44:	f8c8 5004 	str.w	r5, [r8, #4]
  401a48:	604a      	str	r2, [r1, #4]
  401a4a:	685a      	ldr	r2, [r3, #4]
  401a4c:	f042 0201 	orr.w	r2, r2, #1
  401a50:	3108      	adds	r1, #8
  401a52:	605a      	str	r2, [r3, #4]
  401a54:	4648      	mov	r0, r9
  401a56:	f002 fa6d 	bl	403f34 <_free_r>
  401a5a:	e7d7      	b.n	401a0c <_realloc_r+0x140>
  401a5c:	4611      	mov	r1, r2
  401a5e:	b003      	add	sp, #12
  401a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a64:	f7ff baee 	b.w	401044 <_malloc_r>
  401a68:	f01e 0f01 	tst.w	lr, #1
  401a6c:	f47f af5a 	bne.w	401924 <_realloc_r+0x58>
  401a70:	f856 3c08 	ldr.w	r3, [r6, #-8]
  401a74:	ebc3 0a08 	rsb	sl, r3, r8
  401a78:	f8da 3004 	ldr.w	r3, [sl, #4]
  401a7c:	f023 0c03 	bic.w	ip, r3, #3
  401a80:	eb01 0e0c 	add.w	lr, r1, ip
  401a84:	4596      	cmp	lr, r2
  401a86:	db8b      	blt.n	4019a0 <_realloc_r+0xd4>
  401a88:	68c3      	ldr	r3, [r0, #12]
  401a8a:	6882      	ldr	r2, [r0, #8]
  401a8c:	4657      	mov	r7, sl
  401a8e:	60d3      	str	r3, [r2, #12]
  401a90:	609a      	str	r2, [r3, #8]
  401a92:	f857 1f08 	ldr.w	r1, [r7, #8]!
  401a96:	f8da 300c 	ldr.w	r3, [sl, #12]
  401a9a:	60cb      	str	r3, [r1, #12]
  401a9c:	1f22      	subs	r2, r4, #4
  401a9e:	2a24      	cmp	r2, #36	; 0x24
  401aa0:	6099      	str	r1, [r3, #8]
  401aa2:	f200 8099 	bhi.w	401bd8 <_realloc_r+0x30c>
  401aa6:	2a13      	cmp	r2, #19
  401aa8:	d962      	bls.n	401b70 <_realloc_r+0x2a4>
  401aaa:	6833      	ldr	r3, [r6, #0]
  401aac:	f8ca 3008 	str.w	r3, [sl, #8]
  401ab0:	6873      	ldr	r3, [r6, #4]
  401ab2:	f8ca 300c 	str.w	r3, [sl, #12]
  401ab6:	2a1b      	cmp	r2, #27
  401ab8:	f200 80a0 	bhi.w	401bfc <_realloc_r+0x330>
  401abc:	3608      	adds	r6, #8
  401abe:	f10a 0310 	add.w	r3, sl, #16
  401ac2:	e056      	b.n	401b72 <_realloc_r+0x2a6>
  401ac4:	f021 0b03 	bic.w	fp, r1, #3
  401ac8:	44a3      	add	fp, r4
  401aca:	f105 0010 	add.w	r0, r5, #16
  401ace:	4583      	cmp	fp, r0
  401ad0:	da59      	bge.n	401b86 <_realloc_r+0x2ba>
  401ad2:	f01e 0f01 	tst.w	lr, #1
  401ad6:	f47f af25 	bne.w	401924 <_realloc_r+0x58>
  401ada:	f856 1c08 	ldr.w	r1, [r6, #-8]
  401ade:	ebc1 0a08 	rsb	sl, r1, r8
  401ae2:	f8da 1004 	ldr.w	r1, [sl, #4]
  401ae6:	f021 0c03 	bic.w	ip, r1, #3
  401aea:	44e3      	add	fp, ip
  401aec:	4558      	cmp	r0, fp
  401aee:	f73f af57 	bgt.w	4019a0 <_realloc_r+0xd4>
  401af2:	4657      	mov	r7, sl
  401af4:	f8da 100c 	ldr.w	r1, [sl, #12]
  401af8:	f857 0f08 	ldr.w	r0, [r7, #8]!
  401afc:	1f22      	subs	r2, r4, #4
  401afe:	2a24      	cmp	r2, #36	; 0x24
  401b00:	60c1      	str	r1, [r0, #12]
  401b02:	6088      	str	r0, [r1, #8]
  401b04:	f200 80b4 	bhi.w	401c70 <_realloc_r+0x3a4>
  401b08:	2a13      	cmp	r2, #19
  401b0a:	f240 80a5 	bls.w	401c58 <_realloc_r+0x38c>
  401b0e:	6831      	ldr	r1, [r6, #0]
  401b10:	f8ca 1008 	str.w	r1, [sl, #8]
  401b14:	6871      	ldr	r1, [r6, #4]
  401b16:	f8ca 100c 	str.w	r1, [sl, #12]
  401b1a:	2a1b      	cmp	r2, #27
  401b1c:	f200 80af 	bhi.w	401c7e <_realloc_r+0x3b2>
  401b20:	3608      	adds	r6, #8
  401b22:	f10a 0210 	add.w	r2, sl, #16
  401b26:	6831      	ldr	r1, [r6, #0]
  401b28:	6011      	str	r1, [r2, #0]
  401b2a:	6871      	ldr	r1, [r6, #4]
  401b2c:	6051      	str	r1, [r2, #4]
  401b2e:	68b1      	ldr	r1, [r6, #8]
  401b30:	6091      	str	r1, [r2, #8]
  401b32:	eb0a 0105 	add.w	r1, sl, r5
  401b36:	ebc5 020b 	rsb	r2, r5, fp
  401b3a:	f042 0201 	orr.w	r2, r2, #1
  401b3e:	6099      	str	r1, [r3, #8]
  401b40:	604a      	str	r2, [r1, #4]
  401b42:	f8da 3004 	ldr.w	r3, [sl, #4]
  401b46:	f003 0301 	and.w	r3, r3, #1
  401b4a:	431d      	orrs	r5, r3
  401b4c:	4648      	mov	r0, r9
  401b4e:	f8ca 5004 	str.w	r5, [sl, #4]
  401b52:	f7ff fe7d 	bl	401850 <__malloc_unlock>
  401b56:	4638      	mov	r0, r7
  401b58:	e75c      	b.n	401a14 <_realloc_r+0x148>
  401b5a:	6833      	ldr	r3, [r6, #0]
  401b5c:	6003      	str	r3, [r0, #0]
  401b5e:	6873      	ldr	r3, [r6, #4]
  401b60:	6043      	str	r3, [r0, #4]
  401b62:	2a1b      	cmp	r2, #27
  401b64:	d827      	bhi.n	401bb6 <_realloc_r+0x2ea>
  401b66:	f100 0308 	add.w	r3, r0, #8
  401b6a:	f106 0208 	add.w	r2, r6, #8
  401b6e:	e6f2      	b.n	401956 <_realloc_r+0x8a>
  401b70:	463b      	mov	r3, r7
  401b72:	6832      	ldr	r2, [r6, #0]
  401b74:	601a      	str	r2, [r3, #0]
  401b76:	6872      	ldr	r2, [r6, #4]
  401b78:	605a      	str	r2, [r3, #4]
  401b7a:	68b2      	ldr	r2, [r6, #8]
  401b7c:	609a      	str	r2, [r3, #8]
  401b7e:	463e      	mov	r6, r7
  401b80:	4674      	mov	r4, lr
  401b82:	46d0      	mov	r8, sl
  401b84:	e733      	b.n	4019ee <_realloc_r+0x122>
  401b86:	eb08 0105 	add.w	r1, r8, r5
  401b8a:	ebc5 0b0b 	rsb	fp, r5, fp
  401b8e:	f04b 0201 	orr.w	r2, fp, #1
  401b92:	6099      	str	r1, [r3, #8]
  401b94:	604a      	str	r2, [r1, #4]
  401b96:	f856 3c04 	ldr.w	r3, [r6, #-4]
  401b9a:	f003 0301 	and.w	r3, r3, #1
  401b9e:	431d      	orrs	r5, r3
  401ba0:	4648      	mov	r0, r9
  401ba2:	f846 5c04 	str.w	r5, [r6, #-4]
  401ba6:	f7ff fe53 	bl	401850 <__malloc_unlock>
  401baa:	4630      	mov	r0, r6
  401bac:	e732      	b.n	401a14 <_realloc_r+0x148>
  401bae:	4631      	mov	r1, r6
  401bb0:	f7ff fd9a 	bl	4016e8 <memmove>
  401bb4:	e6d5      	b.n	401962 <_realloc_r+0x96>
  401bb6:	68b3      	ldr	r3, [r6, #8]
  401bb8:	6083      	str	r3, [r0, #8]
  401bba:	68f3      	ldr	r3, [r6, #12]
  401bbc:	60c3      	str	r3, [r0, #12]
  401bbe:	2a24      	cmp	r2, #36	; 0x24
  401bc0:	d028      	beq.n	401c14 <_realloc_r+0x348>
  401bc2:	f100 0310 	add.w	r3, r0, #16
  401bc6:	f106 0210 	add.w	r2, r6, #16
  401bca:	e6c4      	b.n	401956 <_realloc_r+0x8a>
  401bcc:	f850 3c04 	ldr.w	r3, [r0, #-4]
  401bd0:	f023 0303 	bic.w	r3, r3, #3
  401bd4:	441c      	add	r4, r3
  401bd6:	e70a      	b.n	4019ee <_realloc_r+0x122>
  401bd8:	4631      	mov	r1, r6
  401bda:	4638      	mov	r0, r7
  401bdc:	4674      	mov	r4, lr
  401bde:	46d0      	mov	r8, sl
  401be0:	f7ff fd82 	bl	4016e8 <memmove>
  401be4:	463e      	mov	r6, r7
  401be6:	e702      	b.n	4019ee <_realloc_r+0x122>
  401be8:	463a      	mov	r2, r7
  401bea:	e6f7      	b.n	4019dc <_realloc_r+0x110>
  401bec:	4631      	mov	r1, r6
  401bee:	4638      	mov	r0, r7
  401bf0:	461c      	mov	r4, r3
  401bf2:	46d0      	mov	r8, sl
  401bf4:	f7ff fd78 	bl	4016e8 <memmove>
  401bf8:	463e      	mov	r6, r7
  401bfa:	e6f8      	b.n	4019ee <_realloc_r+0x122>
  401bfc:	68b3      	ldr	r3, [r6, #8]
  401bfe:	f8ca 3010 	str.w	r3, [sl, #16]
  401c02:	68f3      	ldr	r3, [r6, #12]
  401c04:	f8ca 3014 	str.w	r3, [sl, #20]
  401c08:	2a24      	cmp	r2, #36	; 0x24
  401c0a:	d01b      	beq.n	401c44 <_realloc_r+0x378>
  401c0c:	3610      	adds	r6, #16
  401c0e:	f10a 0318 	add.w	r3, sl, #24
  401c12:	e7ae      	b.n	401b72 <_realloc_r+0x2a6>
  401c14:	6933      	ldr	r3, [r6, #16]
  401c16:	6103      	str	r3, [r0, #16]
  401c18:	6973      	ldr	r3, [r6, #20]
  401c1a:	6143      	str	r3, [r0, #20]
  401c1c:	f106 0218 	add.w	r2, r6, #24
  401c20:	f100 0318 	add.w	r3, r0, #24
  401c24:	e697      	b.n	401956 <_realloc_r+0x8a>
  401c26:	bf00      	nop
  401c28:	2000043c 	.word	0x2000043c
  401c2c:	68b1      	ldr	r1, [r6, #8]
  401c2e:	f8ca 1010 	str.w	r1, [sl, #16]
  401c32:	68f1      	ldr	r1, [r6, #12]
  401c34:	f8ca 1014 	str.w	r1, [sl, #20]
  401c38:	2a24      	cmp	r2, #36	; 0x24
  401c3a:	d00f      	beq.n	401c5c <_realloc_r+0x390>
  401c3c:	3610      	adds	r6, #16
  401c3e:	f10a 0218 	add.w	r2, sl, #24
  401c42:	e6cb      	b.n	4019dc <_realloc_r+0x110>
  401c44:	6933      	ldr	r3, [r6, #16]
  401c46:	f8ca 3018 	str.w	r3, [sl, #24]
  401c4a:	6973      	ldr	r3, [r6, #20]
  401c4c:	f8ca 301c 	str.w	r3, [sl, #28]
  401c50:	3618      	adds	r6, #24
  401c52:	f10a 0320 	add.w	r3, sl, #32
  401c56:	e78c      	b.n	401b72 <_realloc_r+0x2a6>
  401c58:	463a      	mov	r2, r7
  401c5a:	e764      	b.n	401b26 <_realloc_r+0x25a>
  401c5c:	6932      	ldr	r2, [r6, #16]
  401c5e:	f8ca 2018 	str.w	r2, [sl, #24]
  401c62:	6972      	ldr	r2, [r6, #20]
  401c64:	f8ca 201c 	str.w	r2, [sl, #28]
  401c68:	3618      	adds	r6, #24
  401c6a:	f10a 0220 	add.w	r2, sl, #32
  401c6e:	e6b5      	b.n	4019dc <_realloc_r+0x110>
  401c70:	4631      	mov	r1, r6
  401c72:	4638      	mov	r0, r7
  401c74:	9301      	str	r3, [sp, #4]
  401c76:	f7ff fd37 	bl	4016e8 <memmove>
  401c7a:	9b01      	ldr	r3, [sp, #4]
  401c7c:	e759      	b.n	401b32 <_realloc_r+0x266>
  401c7e:	68b1      	ldr	r1, [r6, #8]
  401c80:	f8ca 1010 	str.w	r1, [sl, #16]
  401c84:	68f1      	ldr	r1, [r6, #12]
  401c86:	f8ca 1014 	str.w	r1, [sl, #20]
  401c8a:	2a24      	cmp	r2, #36	; 0x24
  401c8c:	d003      	beq.n	401c96 <_realloc_r+0x3ca>
  401c8e:	3610      	adds	r6, #16
  401c90:	f10a 0218 	add.w	r2, sl, #24
  401c94:	e747      	b.n	401b26 <_realloc_r+0x25a>
  401c96:	6932      	ldr	r2, [r6, #16]
  401c98:	f8ca 2018 	str.w	r2, [sl, #24]
  401c9c:	6972      	ldr	r2, [r6, #20]
  401c9e:	f8ca 201c 	str.w	r2, [sl, #28]
  401ca2:	3618      	adds	r6, #24
  401ca4:	f10a 0220 	add.w	r2, sl, #32
  401ca8:	e73d      	b.n	401b26 <_realloc_r+0x25a>
  401caa:	bf00      	nop

00401cac <_sbrk_r>:
  401cac:	b538      	push	{r3, r4, r5, lr}
  401cae:	4c07      	ldr	r4, [pc, #28]	; (401ccc <_sbrk_r+0x20>)
  401cb0:	2300      	movs	r3, #0
  401cb2:	4605      	mov	r5, r0
  401cb4:	4608      	mov	r0, r1
  401cb6:	6023      	str	r3, [r4, #0]
  401cb8:	f7fe ff08 	bl	400acc <_sbrk>
  401cbc:	1c43      	adds	r3, r0, #1
  401cbe:	d000      	beq.n	401cc2 <_sbrk_r+0x16>
  401cc0:	bd38      	pop	{r3, r4, r5, pc}
  401cc2:	6823      	ldr	r3, [r4, #0]
  401cc4:	2b00      	cmp	r3, #0
  401cc6:	d0fb      	beq.n	401cc0 <_sbrk_r+0x14>
  401cc8:	602b      	str	r3, [r5, #0]
  401cca:	bd38      	pop	{r3, r4, r5, pc}
  401ccc:	20000994 	.word	0x20000994

00401cd0 <setbuf>:
  401cd0:	2900      	cmp	r1, #0
  401cd2:	bf0c      	ite	eq
  401cd4:	2202      	moveq	r2, #2
  401cd6:	2200      	movne	r2, #0
  401cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401cdc:	f000 b800 	b.w	401ce0 <setvbuf>

00401ce0 <setvbuf>:
  401ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ce4:	4c51      	ldr	r4, [pc, #324]	; (401e2c <setvbuf+0x14c>)
  401ce6:	6825      	ldr	r5, [r4, #0]
  401ce8:	b083      	sub	sp, #12
  401cea:	4604      	mov	r4, r0
  401cec:	460f      	mov	r7, r1
  401cee:	4690      	mov	r8, r2
  401cf0:	461e      	mov	r6, r3
  401cf2:	b115      	cbz	r5, 401cfa <setvbuf+0x1a>
  401cf4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401cf6:	2b00      	cmp	r3, #0
  401cf8:	d079      	beq.n	401dee <setvbuf+0x10e>
  401cfa:	f1b8 0f02 	cmp.w	r8, #2
  401cfe:	d004      	beq.n	401d0a <setvbuf+0x2a>
  401d00:	f1b8 0f01 	cmp.w	r8, #1
  401d04:	d87f      	bhi.n	401e06 <setvbuf+0x126>
  401d06:	2e00      	cmp	r6, #0
  401d08:	db7d      	blt.n	401e06 <setvbuf+0x126>
  401d0a:	4621      	mov	r1, r4
  401d0c:	4628      	mov	r0, r5
  401d0e:	f001 fed3 	bl	403ab8 <_fflush_r>
  401d12:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d14:	b141      	cbz	r1, 401d28 <setvbuf+0x48>
  401d16:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401d1a:	4299      	cmp	r1, r3
  401d1c:	d002      	beq.n	401d24 <setvbuf+0x44>
  401d1e:	4628      	mov	r0, r5
  401d20:	f002 f908 	bl	403f34 <_free_r>
  401d24:	2300      	movs	r3, #0
  401d26:	6323      	str	r3, [r4, #48]	; 0x30
  401d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d2c:	2200      	movs	r2, #0
  401d2e:	61a2      	str	r2, [r4, #24]
  401d30:	6062      	str	r2, [r4, #4]
  401d32:	061a      	lsls	r2, r3, #24
  401d34:	d454      	bmi.n	401de0 <setvbuf+0x100>
  401d36:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401d3a:	f023 0303 	bic.w	r3, r3, #3
  401d3e:	f1b8 0f02 	cmp.w	r8, #2
  401d42:	81a3      	strh	r3, [r4, #12]
  401d44:	d039      	beq.n	401dba <setvbuf+0xda>
  401d46:	ab01      	add	r3, sp, #4
  401d48:	466a      	mov	r2, sp
  401d4a:	4621      	mov	r1, r4
  401d4c:	4628      	mov	r0, r5
  401d4e:	f002 fbc3 	bl	4044d8 <__swhatbuf_r>
  401d52:	89a3      	ldrh	r3, [r4, #12]
  401d54:	4318      	orrs	r0, r3
  401d56:	81a0      	strh	r0, [r4, #12]
  401d58:	b326      	cbz	r6, 401da4 <setvbuf+0xc4>
  401d5a:	b327      	cbz	r7, 401da6 <setvbuf+0xc6>
  401d5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401d5e:	2b00      	cmp	r3, #0
  401d60:	d04d      	beq.n	401dfe <setvbuf+0x11e>
  401d62:	9b00      	ldr	r3, [sp, #0]
  401d64:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  401d68:	6027      	str	r7, [r4, #0]
  401d6a:	429e      	cmp	r6, r3
  401d6c:	bf1c      	itt	ne
  401d6e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  401d72:	81a0      	strhne	r0, [r4, #12]
  401d74:	f1b8 0f01 	cmp.w	r8, #1
  401d78:	bf08      	it	eq
  401d7a:	f040 0001 	orreq.w	r0, r0, #1
  401d7e:	b283      	uxth	r3, r0
  401d80:	bf08      	it	eq
  401d82:	81a0      	strheq	r0, [r4, #12]
  401d84:	f003 0008 	and.w	r0, r3, #8
  401d88:	b280      	uxth	r0, r0
  401d8a:	6127      	str	r7, [r4, #16]
  401d8c:	6166      	str	r6, [r4, #20]
  401d8e:	b318      	cbz	r0, 401dd8 <setvbuf+0xf8>
  401d90:	f013 0001 	ands.w	r0, r3, #1
  401d94:	d02f      	beq.n	401df6 <setvbuf+0x116>
  401d96:	2000      	movs	r0, #0
  401d98:	4276      	negs	r6, r6
  401d9a:	61a6      	str	r6, [r4, #24]
  401d9c:	60a0      	str	r0, [r4, #8]
  401d9e:	b003      	add	sp, #12
  401da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401da4:	9e00      	ldr	r6, [sp, #0]
  401da6:	4630      	mov	r0, r6
  401da8:	f7ff f944 	bl	401034 <malloc>
  401dac:	4607      	mov	r7, r0
  401dae:	b368      	cbz	r0, 401e0c <setvbuf+0x12c>
  401db0:	89a3      	ldrh	r3, [r4, #12]
  401db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401db6:	81a3      	strh	r3, [r4, #12]
  401db8:	e7d0      	b.n	401d5c <setvbuf+0x7c>
  401dba:	2000      	movs	r0, #0
  401dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401dc0:	f043 0302 	orr.w	r3, r3, #2
  401dc4:	2500      	movs	r5, #0
  401dc6:	2101      	movs	r1, #1
  401dc8:	81a3      	strh	r3, [r4, #12]
  401dca:	60a5      	str	r5, [r4, #8]
  401dcc:	6022      	str	r2, [r4, #0]
  401dce:	6122      	str	r2, [r4, #16]
  401dd0:	6161      	str	r1, [r4, #20]
  401dd2:	b003      	add	sp, #12
  401dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401dd8:	60a0      	str	r0, [r4, #8]
  401dda:	b003      	add	sp, #12
  401ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401de0:	6921      	ldr	r1, [r4, #16]
  401de2:	4628      	mov	r0, r5
  401de4:	f002 f8a6 	bl	403f34 <_free_r>
  401de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401dec:	e7a3      	b.n	401d36 <setvbuf+0x56>
  401dee:	4628      	mov	r0, r5
  401df0:	f001 ff08 	bl	403c04 <__sinit>
  401df4:	e781      	b.n	401cfa <setvbuf+0x1a>
  401df6:	60a6      	str	r6, [r4, #8]
  401df8:	b003      	add	sp, #12
  401dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401dfe:	4628      	mov	r0, r5
  401e00:	f001 ff00 	bl	403c04 <__sinit>
  401e04:	e7ad      	b.n	401d62 <setvbuf+0x82>
  401e06:	f04f 30ff 	mov.w	r0, #4294967295
  401e0a:	e7e2      	b.n	401dd2 <setvbuf+0xf2>
  401e0c:	f8dd 9000 	ldr.w	r9, [sp]
  401e10:	45b1      	cmp	r9, r6
  401e12:	d006      	beq.n	401e22 <setvbuf+0x142>
  401e14:	4648      	mov	r0, r9
  401e16:	f7ff f90d 	bl	401034 <malloc>
  401e1a:	4607      	mov	r7, r0
  401e1c:	b108      	cbz	r0, 401e22 <setvbuf+0x142>
  401e1e:	464e      	mov	r6, r9
  401e20:	e7c6      	b.n	401db0 <setvbuf+0xd0>
  401e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e26:	f04f 30ff 	mov.w	r0, #4294967295
  401e2a:	e7c7      	b.n	401dbc <setvbuf+0xdc>
  401e2c:	20000438 	.word	0x20000438
	...

00401e40 <strlen>:
  401e40:	f890 f000 	pld	[r0]
  401e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401e48:	f020 0107 	bic.w	r1, r0, #7
  401e4c:	f06f 0c00 	mvn.w	ip, #0
  401e50:	f010 0407 	ands.w	r4, r0, #7
  401e54:	f891 f020 	pld	[r1, #32]
  401e58:	f040 8049 	bne.w	401eee <strlen+0xae>
  401e5c:	f04f 0400 	mov.w	r4, #0
  401e60:	f06f 0007 	mvn.w	r0, #7
  401e64:	e9d1 2300 	ldrd	r2, r3, [r1]
  401e68:	f891 f040 	pld	[r1, #64]	; 0x40
  401e6c:	f100 0008 	add.w	r0, r0, #8
  401e70:	fa82 f24c 	uadd8	r2, r2, ip
  401e74:	faa4 f28c 	sel	r2, r4, ip
  401e78:	fa83 f34c 	uadd8	r3, r3, ip
  401e7c:	faa2 f38c 	sel	r3, r2, ip
  401e80:	bb4b      	cbnz	r3, 401ed6 <strlen+0x96>
  401e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401e86:	fa82 f24c 	uadd8	r2, r2, ip
  401e8a:	f100 0008 	add.w	r0, r0, #8
  401e8e:	faa4 f28c 	sel	r2, r4, ip
  401e92:	fa83 f34c 	uadd8	r3, r3, ip
  401e96:	faa2 f38c 	sel	r3, r2, ip
  401e9a:	b9e3      	cbnz	r3, 401ed6 <strlen+0x96>
  401e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401ea0:	fa82 f24c 	uadd8	r2, r2, ip
  401ea4:	f100 0008 	add.w	r0, r0, #8
  401ea8:	faa4 f28c 	sel	r2, r4, ip
  401eac:	fa83 f34c 	uadd8	r3, r3, ip
  401eb0:	faa2 f38c 	sel	r3, r2, ip
  401eb4:	b97b      	cbnz	r3, 401ed6 <strlen+0x96>
  401eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401eba:	f101 0120 	add.w	r1, r1, #32
  401ebe:	fa82 f24c 	uadd8	r2, r2, ip
  401ec2:	f100 0008 	add.w	r0, r0, #8
  401ec6:	faa4 f28c 	sel	r2, r4, ip
  401eca:	fa83 f34c 	uadd8	r3, r3, ip
  401ece:	faa2 f38c 	sel	r3, r2, ip
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d0c6      	beq.n	401e64 <strlen+0x24>
  401ed6:	2a00      	cmp	r2, #0
  401ed8:	bf04      	itt	eq
  401eda:	3004      	addeq	r0, #4
  401edc:	461a      	moveq	r2, r3
  401ede:	ba12      	rev	r2, r2
  401ee0:	fab2 f282 	clz	r2, r2
  401ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401eec:	4770      	bx	lr
  401eee:	e9d1 2300 	ldrd	r2, r3, [r1]
  401ef2:	f004 0503 	and.w	r5, r4, #3
  401ef6:	f1c4 0000 	rsb	r0, r4, #0
  401efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401efe:	f014 0f04 	tst.w	r4, #4
  401f02:	f891 f040 	pld	[r1, #64]	; 0x40
  401f06:	fa0c f505 	lsl.w	r5, ip, r5
  401f0a:	ea62 0205 	orn	r2, r2, r5
  401f0e:	bf1c      	itt	ne
  401f10:	ea63 0305 	ornne	r3, r3, r5
  401f14:	4662      	movne	r2, ip
  401f16:	f04f 0400 	mov.w	r4, #0
  401f1a:	e7a9      	b.n	401e70 <strlen+0x30>

00401f1c <__sprint_r.part.0>:
  401f1c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f22:	049c      	lsls	r4, r3, #18
  401f24:	4692      	mov	sl, r2
  401f26:	d52c      	bpl.n	401f82 <__sprint_r.part.0+0x66>
  401f28:	6893      	ldr	r3, [r2, #8]
  401f2a:	6812      	ldr	r2, [r2, #0]
  401f2c:	b33b      	cbz	r3, 401f7e <__sprint_r.part.0+0x62>
  401f2e:	460f      	mov	r7, r1
  401f30:	4680      	mov	r8, r0
  401f32:	f102 0908 	add.w	r9, r2, #8
  401f36:	e919 0060 	ldmdb	r9, {r5, r6}
  401f3a:	08b6      	lsrs	r6, r6, #2
  401f3c:	d017      	beq.n	401f6e <__sprint_r.part.0+0x52>
  401f3e:	3d04      	subs	r5, #4
  401f40:	2400      	movs	r4, #0
  401f42:	e001      	b.n	401f48 <__sprint_r.part.0+0x2c>
  401f44:	42a6      	cmp	r6, r4
  401f46:	d010      	beq.n	401f6a <__sprint_r.part.0+0x4e>
  401f48:	463a      	mov	r2, r7
  401f4a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401f4e:	4640      	mov	r0, r8
  401f50:	f001 fec2 	bl	403cd8 <_fputwc_r>
  401f54:	1c43      	adds	r3, r0, #1
  401f56:	f104 0401 	add.w	r4, r4, #1
  401f5a:	d1f3      	bne.n	401f44 <__sprint_r.part.0+0x28>
  401f5c:	2300      	movs	r3, #0
  401f5e:	f8ca 3008 	str.w	r3, [sl, #8]
  401f62:	f8ca 3004 	str.w	r3, [sl, #4]
  401f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  401f6e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  401f72:	f8ca 3008 	str.w	r3, [sl, #8]
  401f76:	f109 0908 	add.w	r9, r9, #8
  401f7a:	2b00      	cmp	r3, #0
  401f7c:	d1db      	bne.n	401f36 <__sprint_r.part.0+0x1a>
  401f7e:	2000      	movs	r0, #0
  401f80:	e7ec      	b.n	401f5c <__sprint_r.part.0+0x40>
  401f82:	f002 f8bf 	bl	404104 <__sfvwrite_r>
  401f86:	2300      	movs	r3, #0
  401f88:	f8ca 3008 	str.w	r3, [sl, #8]
  401f8c:	f8ca 3004 	str.w	r3, [sl, #4]
  401f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401f94 <_vfiprintf_r>:
  401f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f98:	b0ab      	sub	sp, #172	; 0xac
  401f9a:	461c      	mov	r4, r3
  401f9c:	9100      	str	r1, [sp, #0]
  401f9e:	4690      	mov	r8, r2
  401fa0:	9304      	str	r3, [sp, #16]
  401fa2:	9005      	str	r0, [sp, #20]
  401fa4:	b118      	cbz	r0, 401fae <_vfiprintf_r+0x1a>
  401fa6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401fa8:	2b00      	cmp	r3, #0
  401faa:	f000 80de 	beq.w	40216a <_vfiprintf_r+0x1d6>
  401fae:	9800      	ldr	r0, [sp, #0]
  401fb0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  401fb4:	b28a      	uxth	r2, r1
  401fb6:	0495      	lsls	r5, r2, #18
  401fb8:	d407      	bmi.n	401fca <_vfiprintf_r+0x36>
  401fba:	6e43      	ldr	r3, [r0, #100]	; 0x64
  401fbc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401fc4:	8182      	strh	r2, [r0, #12]
  401fc6:	6643      	str	r3, [r0, #100]	; 0x64
  401fc8:	b292      	uxth	r2, r2
  401fca:	0711      	lsls	r1, r2, #28
  401fcc:	f140 80b1 	bpl.w	402132 <_vfiprintf_r+0x19e>
  401fd0:	9b00      	ldr	r3, [sp, #0]
  401fd2:	691b      	ldr	r3, [r3, #16]
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	f000 80ac 	beq.w	402132 <_vfiprintf_r+0x19e>
  401fda:	f002 021a 	and.w	r2, r2, #26
  401fde:	2a0a      	cmp	r2, #10
  401fe0:	f000 80b5 	beq.w	40214e <_vfiprintf_r+0x1ba>
  401fe4:	2300      	movs	r3, #0
  401fe6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  401fea:	9302      	str	r3, [sp, #8]
  401fec:	930f      	str	r3, [sp, #60]	; 0x3c
  401fee:	930e      	str	r3, [sp, #56]	; 0x38
  401ff0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  401ff4:	46da      	mov	sl, fp
  401ff6:	f898 3000 	ldrb.w	r3, [r8]
  401ffa:	4644      	mov	r4, r8
  401ffc:	b1fb      	cbz	r3, 40203e <_vfiprintf_r+0xaa>
  401ffe:	2b25      	cmp	r3, #37	; 0x25
  402000:	d102      	bne.n	402008 <_vfiprintf_r+0x74>
  402002:	e01c      	b.n	40203e <_vfiprintf_r+0xaa>
  402004:	2b25      	cmp	r3, #37	; 0x25
  402006:	d003      	beq.n	402010 <_vfiprintf_r+0x7c>
  402008:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40200c:	2b00      	cmp	r3, #0
  40200e:	d1f9      	bne.n	402004 <_vfiprintf_r+0x70>
  402010:	ebc8 0504 	rsb	r5, r8, r4
  402014:	b19d      	cbz	r5, 40203e <_vfiprintf_r+0xaa>
  402016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40201a:	f8ca 8000 	str.w	r8, [sl]
  40201e:	3301      	adds	r3, #1
  402020:	442a      	add	r2, r5
  402022:	2b07      	cmp	r3, #7
  402024:	f8ca 5004 	str.w	r5, [sl, #4]
  402028:	920f      	str	r2, [sp, #60]	; 0x3c
  40202a:	930e      	str	r3, [sp, #56]	; 0x38
  40202c:	dd7b      	ble.n	402126 <_vfiprintf_r+0x192>
  40202e:	2a00      	cmp	r2, #0
  402030:	f040 8528 	bne.w	402a84 <_vfiprintf_r+0xaf0>
  402034:	9b02      	ldr	r3, [sp, #8]
  402036:	920e      	str	r2, [sp, #56]	; 0x38
  402038:	442b      	add	r3, r5
  40203a:	46da      	mov	sl, fp
  40203c:	9302      	str	r3, [sp, #8]
  40203e:	7823      	ldrb	r3, [r4, #0]
  402040:	2b00      	cmp	r3, #0
  402042:	f000 843e 	beq.w	4028c2 <_vfiprintf_r+0x92e>
  402046:	2100      	movs	r1, #0
  402048:	f04f 0300 	mov.w	r3, #0
  40204c:	f04f 32ff 	mov.w	r2, #4294967295
  402050:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402054:	f104 0801 	add.w	r8, r4, #1
  402058:	7863      	ldrb	r3, [r4, #1]
  40205a:	9201      	str	r2, [sp, #4]
  40205c:	4608      	mov	r0, r1
  40205e:	460e      	mov	r6, r1
  402060:	460c      	mov	r4, r1
  402062:	f108 0801 	add.w	r8, r8, #1
  402066:	f1a3 0220 	sub.w	r2, r3, #32
  40206a:	2a58      	cmp	r2, #88	; 0x58
  40206c:	f200 8393 	bhi.w	402796 <_vfiprintf_r+0x802>
  402070:	e8df f012 	tbh	[pc, r2, lsl #1]
  402074:	03910346 	.word	0x03910346
  402078:	034e0391 	.word	0x034e0391
  40207c:	03910391 	.word	0x03910391
  402080:	03910391 	.word	0x03910391
  402084:	03910391 	.word	0x03910391
  402088:	02670289 	.word	0x02670289
  40208c:	00800391 	.word	0x00800391
  402090:	0391026c 	.word	0x0391026c
  402094:	025901c6 	.word	0x025901c6
  402098:	02590259 	.word	0x02590259
  40209c:	02590259 	.word	0x02590259
  4020a0:	02590259 	.word	0x02590259
  4020a4:	02590259 	.word	0x02590259
  4020a8:	03910391 	.word	0x03910391
  4020ac:	03910391 	.word	0x03910391
  4020b0:	03910391 	.word	0x03910391
  4020b4:	03910391 	.word	0x03910391
  4020b8:	03910391 	.word	0x03910391
  4020bc:	039101cb 	.word	0x039101cb
  4020c0:	03910391 	.word	0x03910391
  4020c4:	03910391 	.word	0x03910391
  4020c8:	03910391 	.word	0x03910391
  4020cc:	03910391 	.word	0x03910391
  4020d0:	02140391 	.word	0x02140391
  4020d4:	03910391 	.word	0x03910391
  4020d8:	03910391 	.word	0x03910391
  4020dc:	02ee0391 	.word	0x02ee0391
  4020e0:	03910391 	.word	0x03910391
  4020e4:	03910311 	.word	0x03910311
  4020e8:	03910391 	.word	0x03910391
  4020ec:	03910391 	.word	0x03910391
  4020f0:	03910391 	.word	0x03910391
  4020f4:	03910391 	.word	0x03910391
  4020f8:	03340391 	.word	0x03340391
  4020fc:	0391038a 	.word	0x0391038a
  402100:	03910391 	.word	0x03910391
  402104:	038a0367 	.word	0x038a0367
  402108:	03910391 	.word	0x03910391
  40210c:	0391036c 	.word	0x0391036c
  402110:	02950379 	.word	0x02950379
  402114:	02e90085 	.word	0x02e90085
  402118:	029b0391 	.word	0x029b0391
  40211c:	02ba0391 	.word	0x02ba0391
  402120:	03910391 	.word	0x03910391
  402124:	0353      	.short	0x0353
  402126:	f10a 0a08 	add.w	sl, sl, #8
  40212a:	9b02      	ldr	r3, [sp, #8]
  40212c:	442b      	add	r3, r5
  40212e:	9302      	str	r3, [sp, #8]
  402130:	e785      	b.n	40203e <_vfiprintf_r+0xaa>
  402132:	9900      	ldr	r1, [sp, #0]
  402134:	9805      	ldr	r0, [sp, #20]
  402136:	f001 fba7 	bl	403888 <__swsetup_r>
  40213a:	2800      	cmp	r0, #0
  40213c:	f040 8558 	bne.w	402bf0 <_vfiprintf_r+0xc5c>
  402140:	9b00      	ldr	r3, [sp, #0]
  402142:	899a      	ldrh	r2, [r3, #12]
  402144:	f002 021a 	and.w	r2, r2, #26
  402148:	2a0a      	cmp	r2, #10
  40214a:	f47f af4b 	bne.w	401fe4 <_vfiprintf_r+0x50>
  40214e:	9900      	ldr	r1, [sp, #0]
  402150:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  402154:	2b00      	cmp	r3, #0
  402156:	f6ff af45 	blt.w	401fe4 <_vfiprintf_r+0x50>
  40215a:	4623      	mov	r3, r4
  40215c:	4642      	mov	r2, r8
  40215e:	9805      	ldr	r0, [sp, #20]
  402160:	f000 fe16 	bl	402d90 <__sbprintf>
  402164:	b02b      	add	sp, #172	; 0xac
  402166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40216a:	f001 fd4b 	bl	403c04 <__sinit>
  40216e:	e71e      	b.n	401fae <_vfiprintf_r+0x1a>
  402170:	4264      	negs	r4, r4
  402172:	9304      	str	r3, [sp, #16]
  402174:	f046 0604 	orr.w	r6, r6, #4
  402178:	f898 3000 	ldrb.w	r3, [r8]
  40217c:	e771      	b.n	402062 <_vfiprintf_r+0xce>
  40217e:	2130      	movs	r1, #48	; 0x30
  402180:	9804      	ldr	r0, [sp, #16]
  402182:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  402186:	9901      	ldr	r1, [sp, #4]
  402188:	9406      	str	r4, [sp, #24]
  40218a:	f04f 0300 	mov.w	r3, #0
  40218e:	2278      	movs	r2, #120	; 0x78
  402190:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402194:	2900      	cmp	r1, #0
  402196:	4603      	mov	r3, r0
  402198:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  40219c:	6804      	ldr	r4, [r0, #0]
  40219e:	f103 0304 	add.w	r3, r3, #4
  4021a2:	f04f 0500 	mov.w	r5, #0
  4021a6:	f046 0202 	orr.w	r2, r6, #2
  4021aa:	f2c0 8525 	blt.w	402bf8 <_vfiprintf_r+0xc64>
  4021ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4021b2:	ea54 0205 	orrs.w	r2, r4, r5
  4021b6:	f046 0602 	orr.w	r6, r6, #2
  4021ba:	9304      	str	r3, [sp, #16]
  4021bc:	f040 84bf 	bne.w	402b3e <_vfiprintf_r+0xbaa>
  4021c0:	48b3      	ldr	r0, [pc, #716]	; (402490 <_vfiprintf_r+0x4fc>)
  4021c2:	9b01      	ldr	r3, [sp, #4]
  4021c4:	2b00      	cmp	r3, #0
  4021c6:	f040 841c 	bne.w	402a02 <_vfiprintf_r+0xa6e>
  4021ca:	4699      	mov	r9, r3
  4021cc:	2300      	movs	r3, #0
  4021ce:	9301      	str	r3, [sp, #4]
  4021d0:	9303      	str	r3, [sp, #12]
  4021d2:	465f      	mov	r7, fp
  4021d4:	9b01      	ldr	r3, [sp, #4]
  4021d6:	9a03      	ldr	r2, [sp, #12]
  4021d8:	4293      	cmp	r3, r2
  4021da:	bfb8      	it	lt
  4021dc:	4613      	movlt	r3, r2
  4021de:	461d      	mov	r5, r3
  4021e0:	f1b9 0f00 	cmp.w	r9, #0
  4021e4:	d000      	beq.n	4021e8 <_vfiprintf_r+0x254>
  4021e6:	3501      	adds	r5, #1
  4021e8:	f016 0302 	ands.w	r3, r6, #2
  4021ec:	9307      	str	r3, [sp, #28]
  4021ee:	bf18      	it	ne
  4021f0:	3502      	addne	r5, #2
  4021f2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  4021f6:	9308      	str	r3, [sp, #32]
  4021f8:	f040 82f1 	bne.w	4027de <_vfiprintf_r+0x84a>
  4021fc:	9b06      	ldr	r3, [sp, #24]
  4021fe:	1b5c      	subs	r4, r3, r5
  402200:	2c00      	cmp	r4, #0
  402202:	f340 82ec 	ble.w	4027de <_vfiprintf_r+0x84a>
  402206:	2c10      	cmp	r4, #16
  402208:	f340 8556 	ble.w	402cb8 <_vfiprintf_r+0xd24>
  40220c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 402494 <_vfiprintf_r+0x500>
  402210:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  402214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402216:	46d4      	mov	ip, sl
  402218:	2310      	movs	r3, #16
  40221a:	46c2      	mov	sl, r8
  40221c:	4670      	mov	r0, lr
  40221e:	46a8      	mov	r8, r5
  402220:	464d      	mov	r5, r9
  402222:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402226:	e007      	b.n	402238 <_vfiprintf_r+0x2a4>
  402228:	f100 0e02 	add.w	lr, r0, #2
  40222c:	f10c 0c08 	add.w	ip, ip, #8
  402230:	4608      	mov	r0, r1
  402232:	3c10      	subs	r4, #16
  402234:	2c10      	cmp	r4, #16
  402236:	dd13      	ble.n	402260 <_vfiprintf_r+0x2cc>
  402238:	1c41      	adds	r1, r0, #1
  40223a:	3210      	adds	r2, #16
  40223c:	2907      	cmp	r1, #7
  40223e:	920f      	str	r2, [sp, #60]	; 0x3c
  402240:	f8cc 5000 	str.w	r5, [ip]
  402244:	f8cc 3004 	str.w	r3, [ip, #4]
  402248:	910e      	str	r1, [sp, #56]	; 0x38
  40224a:	dded      	ble.n	402228 <_vfiprintf_r+0x294>
  40224c:	2a00      	cmp	r2, #0
  40224e:	f040 82b7 	bne.w	4027c0 <_vfiprintf_r+0x82c>
  402252:	3c10      	subs	r4, #16
  402254:	2c10      	cmp	r4, #16
  402256:	4610      	mov	r0, r2
  402258:	f04f 0e01 	mov.w	lr, #1
  40225c:	46dc      	mov	ip, fp
  40225e:	dceb      	bgt.n	402238 <_vfiprintf_r+0x2a4>
  402260:	46a9      	mov	r9, r5
  402262:	4670      	mov	r0, lr
  402264:	4645      	mov	r5, r8
  402266:	46d0      	mov	r8, sl
  402268:	46e2      	mov	sl, ip
  40226a:	4422      	add	r2, r4
  40226c:	2807      	cmp	r0, #7
  40226e:	920f      	str	r2, [sp, #60]	; 0x3c
  402270:	f8ca 9000 	str.w	r9, [sl]
  402274:	f8ca 4004 	str.w	r4, [sl, #4]
  402278:	900e      	str	r0, [sp, #56]	; 0x38
  40227a:	f300 8375 	bgt.w	402968 <_vfiprintf_r+0x9d4>
  40227e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402282:	f10a 0a08 	add.w	sl, sl, #8
  402286:	f100 0e01 	add.w	lr, r0, #1
  40228a:	2b00      	cmp	r3, #0
  40228c:	f040 82b0 	bne.w	4027f0 <_vfiprintf_r+0x85c>
  402290:	9b07      	ldr	r3, [sp, #28]
  402292:	2b00      	cmp	r3, #0
  402294:	f000 82c3 	beq.w	40281e <_vfiprintf_r+0x88a>
  402298:	3202      	adds	r2, #2
  40229a:	a90c      	add	r1, sp, #48	; 0x30
  40229c:	2302      	movs	r3, #2
  40229e:	f1be 0f07 	cmp.w	lr, #7
  4022a2:	920f      	str	r2, [sp, #60]	; 0x3c
  4022a4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4022a8:	e88a 000a 	stmia.w	sl, {r1, r3}
  4022ac:	f340 8378 	ble.w	4029a0 <_vfiprintf_r+0xa0c>
  4022b0:	2a00      	cmp	r2, #0
  4022b2:	f040 840a 	bne.w	402aca <_vfiprintf_r+0xb36>
  4022b6:	9b08      	ldr	r3, [sp, #32]
  4022b8:	2b80      	cmp	r3, #128	; 0x80
  4022ba:	f04f 0e01 	mov.w	lr, #1
  4022be:	4610      	mov	r0, r2
  4022c0:	46da      	mov	sl, fp
  4022c2:	f040 82b0 	bne.w	402826 <_vfiprintf_r+0x892>
  4022c6:	9b06      	ldr	r3, [sp, #24]
  4022c8:	1b5c      	subs	r4, r3, r5
  4022ca:	2c00      	cmp	r4, #0
  4022cc:	f340 82ab 	ble.w	402826 <_vfiprintf_r+0x892>
  4022d0:	2c10      	cmp	r4, #16
  4022d2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 402498 <_vfiprintf_r+0x504>
  4022d6:	f340 850b 	ble.w	402cf0 <_vfiprintf_r+0xd5c>
  4022da:	46d6      	mov	lr, sl
  4022dc:	2310      	movs	r3, #16
  4022de:	46c2      	mov	sl, r8
  4022e0:	46a8      	mov	r8, r5
  4022e2:	464d      	mov	r5, r9
  4022e4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4022e8:	e007      	b.n	4022fa <_vfiprintf_r+0x366>
  4022ea:	f100 0c02 	add.w	ip, r0, #2
  4022ee:	f10e 0e08 	add.w	lr, lr, #8
  4022f2:	4608      	mov	r0, r1
  4022f4:	3c10      	subs	r4, #16
  4022f6:	2c10      	cmp	r4, #16
  4022f8:	dd13      	ble.n	402322 <_vfiprintf_r+0x38e>
  4022fa:	1c41      	adds	r1, r0, #1
  4022fc:	3210      	adds	r2, #16
  4022fe:	2907      	cmp	r1, #7
  402300:	920f      	str	r2, [sp, #60]	; 0x3c
  402302:	f8ce 5000 	str.w	r5, [lr]
  402306:	f8ce 3004 	str.w	r3, [lr, #4]
  40230a:	910e      	str	r1, [sp, #56]	; 0x38
  40230c:	dded      	ble.n	4022ea <_vfiprintf_r+0x356>
  40230e:	2a00      	cmp	r2, #0
  402310:	f040 8315 	bne.w	40293e <_vfiprintf_r+0x9aa>
  402314:	3c10      	subs	r4, #16
  402316:	2c10      	cmp	r4, #16
  402318:	f04f 0c01 	mov.w	ip, #1
  40231c:	4610      	mov	r0, r2
  40231e:	46de      	mov	lr, fp
  402320:	dceb      	bgt.n	4022fa <_vfiprintf_r+0x366>
  402322:	46a9      	mov	r9, r5
  402324:	4645      	mov	r5, r8
  402326:	46d0      	mov	r8, sl
  402328:	46f2      	mov	sl, lr
  40232a:	4422      	add	r2, r4
  40232c:	f1bc 0f07 	cmp.w	ip, #7
  402330:	920f      	str	r2, [sp, #60]	; 0x3c
  402332:	f8ca 9000 	str.w	r9, [sl]
  402336:	f8ca 4004 	str.w	r4, [sl, #4]
  40233a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  40233e:	f300 83d2 	bgt.w	402ae6 <_vfiprintf_r+0xb52>
  402342:	9b01      	ldr	r3, [sp, #4]
  402344:	9903      	ldr	r1, [sp, #12]
  402346:	1a5c      	subs	r4, r3, r1
  402348:	2c00      	cmp	r4, #0
  40234a:	f10a 0a08 	add.w	sl, sl, #8
  40234e:	f10c 0e01 	add.w	lr, ip, #1
  402352:	4660      	mov	r0, ip
  402354:	f300 826d 	bgt.w	402832 <_vfiprintf_r+0x89e>
  402358:	9903      	ldr	r1, [sp, #12]
  40235a:	f8ca 7000 	str.w	r7, [sl]
  40235e:	440a      	add	r2, r1
  402360:	f1be 0f07 	cmp.w	lr, #7
  402364:	920f      	str	r2, [sp, #60]	; 0x3c
  402366:	f8ca 1004 	str.w	r1, [sl, #4]
  40236a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40236e:	f340 82ce 	ble.w	40290e <_vfiprintf_r+0x97a>
  402372:	2a00      	cmp	r2, #0
  402374:	f040 833a 	bne.w	4029ec <_vfiprintf_r+0xa58>
  402378:	0770      	lsls	r0, r6, #29
  40237a:	920e      	str	r2, [sp, #56]	; 0x38
  40237c:	d538      	bpl.n	4023f0 <_vfiprintf_r+0x45c>
  40237e:	9b06      	ldr	r3, [sp, #24]
  402380:	1b5c      	subs	r4, r3, r5
  402382:	2c00      	cmp	r4, #0
  402384:	dd34      	ble.n	4023f0 <_vfiprintf_r+0x45c>
  402386:	46da      	mov	sl, fp
  402388:	2c10      	cmp	r4, #16
  40238a:	f340 84ab 	ble.w	402ce4 <_vfiprintf_r+0xd50>
  40238e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 402494 <_vfiprintf_r+0x500>
  402392:	990e      	ldr	r1, [sp, #56]	; 0x38
  402394:	464f      	mov	r7, r9
  402396:	2610      	movs	r6, #16
  402398:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40239c:	e006      	b.n	4023ac <_vfiprintf_r+0x418>
  40239e:	1c88      	adds	r0, r1, #2
  4023a0:	f10a 0a08 	add.w	sl, sl, #8
  4023a4:	4619      	mov	r1, r3
  4023a6:	3c10      	subs	r4, #16
  4023a8:	2c10      	cmp	r4, #16
  4023aa:	dd13      	ble.n	4023d4 <_vfiprintf_r+0x440>
  4023ac:	1c4b      	adds	r3, r1, #1
  4023ae:	3210      	adds	r2, #16
  4023b0:	2b07      	cmp	r3, #7
  4023b2:	920f      	str	r2, [sp, #60]	; 0x3c
  4023b4:	f8ca 7000 	str.w	r7, [sl]
  4023b8:	f8ca 6004 	str.w	r6, [sl, #4]
  4023bc:	930e      	str	r3, [sp, #56]	; 0x38
  4023be:	ddee      	ble.n	40239e <_vfiprintf_r+0x40a>
  4023c0:	2a00      	cmp	r2, #0
  4023c2:	f040 828e 	bne.w	4028e2 <_vfiprintf_r+0x94e>
  4023c6:	3c10      	subs	r4, #16
  4023c8:	2c10      	cmp	r4, #16
  4023ca:	f04f 0001 	mov.w	r0, #1
  4023ce:	4611      	mov	r1, r2
  4023d0:	46da      	mov	sl, fp
  4023d2:	dceb      	bgt.n	4023ac <_vfiprintf_r+0x418>
  4023d4:	46b9      	mov	r9, r7
  4023d6:	4422      	add	r2, r4
  4023d8:	2807      	cmp	r0, #7
  4023da:	920f      	str	r2, [sp, #60]	; 0x3c
  4023dc:	f8ca 9000 	str.w	r9, [sl]
  4023e0:	f8ca 4004 	str.w	r4, [sl, #4]
  4023e4:	900e      	str	r0, [sp, #56]	; 0x38
  4023e6:	f340 829b 	ble.w	402920 <_vfiprintf_r+0x98c>
  4023ea:	2a00      	cmp	r2, #0
  4023ec:	f040 8425 	bne.w	402c3a <_vfiprintf_r+0xca6>
  4023f0:	9b02      	ldr	r3, [sp, #8]
  4023f2:	9a06      	ldr	r2, [sp, #24]
  4023f4:	42aa      	cmp	r2, r5
  4023f6:	bfac      	ite	ge
  4023f8:	189b      	addge	r3, r3, r2
  4023fa:	195b      	addlt	r3, r3, r5
  4023fc:	9302      	str	r3, [sp, #8]
  4023fe:	e299      	b.n	402934 <_vfiprintf_r+0x9a0>
  402400:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402404:	f898 3000 	ldrb.w	r3, [r8]
  402408:	e62b      	b.n	402062 <_vfiprintf_r+0xce>
  40240a:	9406      	str	r4, [sp, #24]
  40240c:	2900      	cmp	r1, #0
  40240e:	f040 84af 	bne.w	402d70 <_vfiprintf_r+0xddc>
  402412:	f046 0610 	orr.w	r6, r6, #16
  402416:	06b3      	lsls	r3, r6, #26
  402418:	f140 8312 	bpl.w	402a40 <_vfiprintf_r+0xaac>
  40241c:	9904      	ldr	r1, [sp, #16]
  40241e:	3107      	adds	r1, #7
  402420:	f021 0107 	bic.w	r1, r1, #7
  402424:	e9d1 2300 	ldrd	r2, r3, [r1]
  402428:	3108      	adds	r1, #8
  40242a:	9104      	str	r1, [sp, #16]
  40242c:	4614      	mov	r4, r2
  40242e:	461d      	mov	r5, r3
  402430:	2a00      	cmp	r2, #0
  402432:	f173 0300 	sbcs.w	r3, r3, #0
  402436:	f2c0 8386 	blt.w	402b46 <_vfiprintf_r+0xbb2>
  40243a:	9b01      	ldr	r3, [sp, #4]
  40243c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402440:	2b00      	cmp	r3, #0
  402442:	f2c0 831a 	blt.w	402a7a <_vfiprintf_r+0xae6>
  402446:	ea54 0305 	orrs.w	r3, r4, r5
  40244a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40244e:	f000 80ed 	beq.w	40262c <_vfiprintf_r+0x698>
  402452:	2d00      	cmp	r5, #0
  402454:	bf08      	it	eq
  402456:	2c0a      	cmpeq	r4, #10
  402458:	f0c0 80ed 	bcc.w	402636 <_vfiprintf_r+0x6a2>
  40245c:	465f      	mov	r7, fp
  40245e:	4620      	mov	r0, r4
  402460:	4629      	mov	r1, r5
  402462:	220a      	movs	r2, #10
  402464:	2300      	movs	r3, #0
  402466:	f002 ff87 	bl	405378 <__aeabi_uldivmod>
  40246a:	3230      	adds	r2, #48	; 0x30
  40246c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  402470:	4620      	mov	r0, r4
  402472:	4629      	mov	r1, r5
  402474:	2300      	movs	r3, #0
  402476:	220a      	movs	r2, #10
  402478:	f002 ff7e 	bl	405378 <__aeabi_uldivmod>
  40247c:	4604      	mov	r4, r0
  40247e:	460d      	mov	r5, r1
  402480:	ea54 0305 	orrs.w	r3, r4, r5
  402484:	d1eb      	bne.n	40245e <_vfiprintf_r+0x4ca>
  402486:	ebc7 030b 	rsb	r3, r7, fp
  40248a:	9303      	str	r3, [sp, #12]
  40248c:	e6a2      	b.n	4021d4 <_vfiprintf_r+0x240>
  40248e:	bf00      	nop
  402490:	004057b4 	.word	0x004057b4
  402494:	004057d0 	.word	0x004057d0
  402498:	00405790 	.word	0x00405790
  40249c:	9406      	str	r4, [sp, #24]
  40249e:	2900      	cmp	r1, #0
  4024a0:	f040 8462 	bne.w	402d68 <_vfiprintf_r+0xdd4>
  4024a4:	f046 0610 	orr.w	r6, r6, #16
  4024a8:	f016 0320 	ands.w	r3, r6, #32
  4024ac:	f000 82ae 	beq.w	402a0c <_vfiprintf_r+0xa78>
  4024b0:	9b04      	ldr	r3, [sp, #16]
  4024b2:	3307      	adds	r3, #7
  4024b4:	f023 0307 	bic.w	r3, r3, #7
  4024b8:	f04f 0200 	mov.w	r2, #0
  4024bc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4024c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4024c4:	f103 0208 	add.w	r2, r3, #8
  4024c8:	9b01      	ldr	r3, [sp, #4]
  4024ca:	9204      	str	r2, [sp, #16]
  4024cc:	2b00      	cmp	r3, #0
  4024ce:	f2c0 8174 	blt.w	4027ba <_vfiprintf_r+0x826>
  4024d2:	ea54 0305 	orrs.w	r3, r4, r5
  4024d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4024da:	f040 816e 	bne.w	4027ba <_vfiprintf_r+0x826>
  4024de:	9b01      	ldr	r3, [sp, #4]
  4024e0:	2b00      	cmp	r3, #0
  4024e2:	f000 8430 	beq.w	402d46 <_vfiprintf_r+0xdb2>
  4024e6:	f04f 0900 	mov.w	r9, #0
  4024ea:	2400      	movs	r4, #0
  4024ec:	2500      	movs	r5, #0
  4024ee:	465f      	mov	r7, fp
  4024f0:	08e2      	lsrs	r2, r4, #3
  4024f2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4024f6:	08e9      	lsrs	r1, r5, #3
  4024f8:	f004 0307 	and.w	r3, r4, #7
  4024fc:	460d      	mov	r5, r1
  4024fe:	4614      	mov	r4, r2
  402500:	3330      	adds	r3, #48	; 0x30
  402502:	ea54 0205 	orrs.w	r2, r4, r5
  402506:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40250a:	d1f1      	bne.n	4024f0 <_vfiprintf_r+0x55c>
  40250c:	07f4      	lsls	r4, r6, #31
  40250e:	d5ba      	bpl.n	402486 <_vfiprintf_r+0x4f2>
  402510:	2b30      	cmp	r3, #48	; 0x30
  402512:	d0b8      	beq.n	402486 <_vfiprintf_r+0x4f2>
  402514:	2230      	movs	r2, #48	; 0x30
  402516:	1e7b      	subs	r3, r7, #1
  402518:	f807 2c01 	strb.w	r2, [r7, #-1]
  40251c:	ebc3 020b 	rsb	r2, r3, fp
  402520:	9203      	str	r2, [sp, #12]
  402522:	461f      	mov	r7, r3
  402524:	e656      	b.n	4021d4 <_vfiprintf_r+0x240>
  402526:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40252a:	2400      	movs	r4, #0
  40252c:	f818 3b01 	ldrb.w	r3, [r8], #1
  402530:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402534:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  402538:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40253c:	2a09      	cmp	r2, #9
  40253e:	d9f5      	bls.n	40252c <_vfiprintf_r+0x598>
  402540:	e591      	b.n	402066 <_vfiprintf_r+0xd2>
  402542:	f898 3000 	ldrb.w	r3, [r8]
  402546:	2101      	movs	r1, #1
  402548:	202b      	movs	r0, #43	; 0x2b
  40254a:	e58a      	b.n	402062 <_vfiprintf_r+0xce>
  40254c:	f898 3000 	ldrb.w	r3, [r8]
  402550:	2b2a      	cmp	r3, #42	; 0x2a
  402552:	f108 0501 	add.w	r5, r8, #1
  402556:	f000 83dd 	beq.w	402d14 <_vfiprintf_r+0xd80>
  40255a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40255e:	2a09      	cmp	r2, #9
  402560:	46a8      	mov	r8, r5
  402562:	bf98      	it	ls
  402564:	2500      	movls	r5, #0
  402566:	f200 83ce 	bhi.w	402d06 <_vfiprintf_r+0xd72>
  40256a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40256e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402572:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  402576:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40257a:	2a09      	cmp	r2, #9
  40257c:	d9f5      	bls.n	40256a <_vfiprintf_r+0x5d6>
  40257e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  402582:	9201      	str	r2, [sp, #4]
  402584:	e56f      	b.n	402066 <_vfiprintf_r+0xd2>
  402586:	9a04      	ldr	r2, [sp, #16]
  402588:	6814      	ldr	r4, [r2, #0]
  40258a:	4613      	mov	r3, r2
  40258c:	2c00      	cmp	r4, #0
  40258e:	f103 0304 	add.w	r3, r3, #4
  402592:	f6ff aded 	blt.w	402170 <_vfiprintf_r+0x1dc>
  402596:	9304      	str	r3, [sp, #16]
  402598:	f898 3000 	ldrb.w	r3, [r8]
  40259c:	e561      	b.n	402062 <_vfiprintf_r+0xce>
  40259e:	9406      	str	r4, [sp, #24]
  4025a0:	2900      	cmp	r1, #0
  4025a2:	d081      	beq.n	4024a8 <_vfiprintf_r+0x514>
  4025a4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4025a8:	e77e      	b.n	4024a8 <_vfiprintf_r+0x514>
  4025aa:	9a04      	ldr	r2, [sp, #16]
  4025ac:	9406      	str	r4, [sp, #24]
  4025ae:	6817      	ldr	r7, [r2, #0]
  4025b0:	f04f 0300 	mov.w	r3, #0
  4025b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4025b8:	1d14      	adds	r4, r2, #4
  4025ba:	9b01      	ldr	r3, [sp, #4]
  4025bc:	2f00      	cmp	r7, #0
  4025be:	f000 8386 	beq.w	402cce <_vfiprintf_r+0xd3a>
  4025c2:	2b00      	cmp	r3, #0
  4025c4:	f2c0 835f 	blt.w	402c86 <_vfiprintf_r+0xcf2>
  4025c8:	461a      	mov	r2, r3
  4025ca:	2100      	movs	r1, #0
  4025cc:	4638      	mov	r0, r7
  4025ce:	f002 f83f 	bl	404650 <memchr>
  4025d2:	2800      	cmp	r0, #0
  4025d4:	f000 838f 	beq.w	402cf6 <_vfiprintf_r+0xd62>
  4025d8:	1bc3      	subs	r3, r0, r7
  4025da:	9303      	str	r3, [sp, #12]
  4025dc:	2300      	movs	r3, #0
  4025de:	9404      	str	r4, [sp, #16]
  4025e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4025e4:	9301      	str	r3, [sp, #4]
  4025e6:	e5f5      	b.n	4021d4 <_vfiprintf_r+0x240>
  4025e8:	9406      	str	r4, [sp, #24]
  4025ea:	2900      	cmp	r1, #0
  4025ec:	f040 83b9 	bne.w	402d62 <_vfiprintf_r+0xdce>
  4025f0:	f016 0920 	ands.w	r9, r6, #32
  4025f4:	d135      	bne.n	402662 <_vfiprintf_r+0x6ce>
  4025f6:	f016 0310 	ands.w	r3, r6, #16
  4025fa:	d103      	bne.n	402604 <_vfiprintf_r+0x670>
  4025fc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402600:	f040 832a 	bne.w	402c58 <_vfiprintf_r+0xcc4>
  402604:	9a04      	ldr	r2, [sp, #16]
  402606:	4613      	mov	r3, r2
  402608:	6814      	ldr	r4, [r2, #0]
  40260a:	9a01      	ldr	r2, [sp, #4]
  40260c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402610:	2a00      	cmp	r2, #0
  402612:	f103 0304 	add.w	r3, r3, #4
  402616:	f04f 0500 	mov.w	r5, #0
  40261a:	f2c0 8332 	blt.w	402c82 <_vfiprintf_r+0xcee>
  40261e:	ea54 0205 	orrs.w	r2, r4, r5
  402622:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402626:	9304      	str	r3, [sp, #16]
  402628:	f47f af13 	bne.w	402452 <_vfiprintf_r+0x4be>
  40262c:	9b01      	ldr	r3, [sp, #4]
  40262e:	2b00      	cmp	r3, #0
  402630:	f43f adcc 	beq.w	4021cc <_vfiprintf_r+0x238>
  402634:	2400      	movs	r4, #0
  402636:	af2a      	add	r7, sp, #168	; 0xa8
  402638:	3430      	adds	r4, #48	; 0x30
  40263a:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40263e:	ebc7 030b 	rsb	r3, r7, fp
  402642:	9303      	str	r3, [sp, #12]
  402644:	e5c6      	b.n	4021d4 <_vfiprintf_r+0x240>
  402646:	f046 0620 	orr.w	r6, r6, #32
  40264a:	f898 3000 	ldrb.w	r3, [r8]
  40264e:	e508      	b.n	402062 <_vfiprintf_r+0xce>
  402650:	9406      	str	r4, [sp, #24]
  402652:	2900      	cmp	r1, #0
  402654:	f040 836e 	bne.w	402d34 <_vfiprintf_r+0xda0>
  402658:	f046 0610 	orr.w	r6, r6, #16
  40265c:	f016 0920 	ands.w	r9, r6, #32
  402660:	d0c9      	beq.n	4025f6 <_vfiprintf_r+0x662>
  402662:	9b04      	ldr	r3, [sp, #16]
  402664:	3307      	adds	r3, #7
  402666:	f023 0307 	bic.w	r3, r3, #7
  40266a:	f04f 0200 	mov.w	r2, #0
  40266e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402672:	e9d3 4500 	ldrd	r4, r5, [r3]
  402676:	f103 0208 	add.w	r2, r3, #8
  40267a:	9b01      	ldr	r3, [sp, #4]
  40267c:	9204      	str	r2, [sp, #16]
  40267e:	2b00      	cmp	r3, #0
  402680:	f2c0 81f9 	blt.w	402a76 <_vfiprintf_r+0xae2>
  402684:	ea54 0305 	orrs.w	r3, r4, r5
  402688:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40268c:	f04f 0900 	mov.w	r9, #0
  402690:	f47f aedf 	bne.w	402452 <_vfiprintf_r+0x4be>
  402694:	e7ca      	b.n	40262c <_vfiprintf_r+0x698>
  402696:	9406      	str	r4, [sp, #24]
  402698:	2900      	cmp	r1, #0
  40269a:	f040 8351 	bne.w	402d40 <_vfiprintf_r+0xdac>
  40269e:	06b2      	lsls	r2, r6, #26
  4026a0:	48ae      	ldr	r0, [pc, #696]	; (40295c <_vfiprintf_r+0x9c8>)
  4026a2:	d541      	bpl.n	402728 <_vfiprintf_r+0x794>
  4026a4:	9a04      	ldr	r2, [sp, #16]
  4026a6:	3207      	adds	r2, #7
  4026a8:	f022 0207 	bic.w	r2, r2, #7
  4026ac:	e9d2 4500 	ldrd	r4, r5, [r2]
  4026b0:	f102 0108 	add.w	r1, r2, #8
  4026b4:	9104      	str	r1, [sp, #16]
  4026b6:	f016 0901 	ands.w	r9, r6, #1
  4026ba:	f000 8177 	beq.w	4029ac <_vfiprintf_r+0xa18>
  4026be:	ea54 0205 	orrs.w	r2, r4, r5
  4026c2:	f040 8226 	bne.w	402b12 <_vfiprintf_r+0xb7e>
  4026c6:	f04f 0300 	mov.w	r3, #0
  4026ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4026ce:	9b01      	ldr	r3, [sp, #4]
  4026d0:	2b00      	cmp	r3, #0
  4026d2:	f2c0 8196 	blt.w	402a02 <_vfiprintf_r+0xa6e>
  4026d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4026da:	e572      	b.n	4021c2 <_vfiprintf_r+0x22e>
  4026dc:	9a04      	ldr	r2, [sp, #16]
  4026de:	9406      	str	r4, [sp, #24]
  4026e0:	6813      	ldr	r3, [r2, #0]
  4026e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4026e6:	4613      	mov	r3, r2
  4026e8:	f04f 0100 	mov.w	r1, #0
  4026ec:	2501      	movs	r5, #1
  4026ee:	3304      	adds	r3, #4
  4026f0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4026f4:	9304      	str	r3, [sp, #16]
  4026f6:	9503      	str	r5, [sp, #12]
  4026f8:	af10      	add	r7, sp, #64	; 0x40
  4026fa:	2300      	movs	r3, #0
  4026fc:	9301      	str	r3, [sp, #4]
  4026fe:	e573      	b.n	4021e8 <_vfiprintf_r+0x254>
  402700:	f898 3000 	ldrb.w	r3, [r8]
  402704:	2800      	cmp	r0, #0
  402706:	f47f acac 	bne.w	402062 <_vfiprintf_r+0xce>
  40270a:	2101      	movs	r1, #1
  40270c:	2020      	movs	r0, #32
  40270e:	e4a8      	b.n	402062 <_vfiprintf_r+0xce>
  402710:	f046 0601 	orr.w	r6, r6, #1
  402714:	f898 3000 	ldrb.w	r3, [r8]
  402718:	e4a3      	b.n	402062 <_vfiprintf_r+0xce>
  40271a:	9406      	str	r4, [sp, #24]
  40271c:	2900      	cmp	r1, #0
  40271e:	f040 830c 	bne.w	402d3a <_vfiprintf_r+0xda6>
  402722:	06b2      	lsls	r2, r6, #26
  402724:	488e      	ldr	r0, [pc, #568]	; (402960 <_vfiprintf_r+0x9cc>)
  402726:	d4bd      	bmi.n	4026a4 <_vfiprintf_r+0x710>
  402728:	9904      	ldr	r1, [sp, #16]
  40272a:	06f7      	lsls	r7, r6, #27
  40272c:	460a      	mov	r2, r1
  40272e:	f100 819d 	bmi.w	402a6c <_vfiprintf_r+0xad8>
  402732:	0675      	lsls	r5, r6, #25
  402734:	f140 819a 	bpl.w	402a6c <_vfiprintf_r+0xad8>
  402738:	3204      	adds	r2, #4
  40273a:	880c      	ldrh	r4, [r1, #0]
  40273c:	9204      	str	r2, [sp, #16]
  40273e:	2500      	movs	r5, #0
  402740:	e7b9      	b.n	4026b6 <_vfiprintf_r+0x722>
  402742:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402746:	f898 3000 	ldrb.w	r3, [r8]
  40274a:	e48a      	b.n	402062 <_vfiprintf_r+0xce>
  40274c:	f898 3000 	ldrb.w	r3, [r8]
  402750:	2b6c      	cmp	r3, #108	; 0x6c
  402752:	bf03      	ittte	eq
  402754:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  402758:	f046 0620 	orreq.w	r6, r6, #32
  40275c:	f108 0801 	addeq.w	r8, r8, #1
  402760:	f046 0610 	orrne.w	r6, r6, #16
  402764:	e47d      	b.n	402062 <_vfiprintf_r+0xce>
  402766:	2900      	cmp	r1, #0
  402768:	f040 8309 	bne.w	402d7e <_vfiprintf_r+0xdea>
  40276c:	06b4      	lsls	r4, r6, #26
  40276e:	f140 821c 	bpl.w	402baa <_vfiprintf_r+0xc16>
  402772:	9a04      	ldr	r2, [sp, #16]
  402774:	9902      	ldr	r1, [sp, #8]
  402776:	6813      	ldr	r3, [r2, #0]
  402778:	17cd      	asrs	r5, r1, #31
  40277a:	4608      	mov	r0, r1
  40277c:	3204      	adds	r2, #4
  40277e:	4629      	mov	r1, r5
  402780:	9204      	str	r2, [sp, #16]
  402782:	e9c3 0100 	strd	r0, r1, [r3]
  402786:	e436      	b.n	401ff6 <_vfiprintf_r+0x62>
  402788:	9406      	str	r4, [sp, #24]
  40278a:	2900      	cmp	r1, #0
  40278c:	f43f ae43 	beq.w	402416 <_vfiprintf_r+0x482>
  402790:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402794:	e63f      	b.n	402416 <_vfiprintf_r+0x482>
  402796:	9406      	str	r4, [sp, #24]
  402798:	2900      	cmp	r1, #0
  40279a:	f040 82ed 	bne.w	402d78 <_vfiprintf_r+0xde4>
  40279e:	2b00      	cmp	r3, #0
  4027a0:	f000 808f 	beq.w	4028c2 <_vfiprintf_r+0x92e>
  4027a4:	2501      	movs	r5, #1
  4027a6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4027aa:	f04f 0300 	mov.w	r3, #0
  4027ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4027b2:	9503      	str	r5, [sp, #12]
  4027b4:	af10      	add	r7, sp, #64	; 0x40
  4027b6:	e7a0      	b.n	4026fa <_vfiprintf_r+0x766>
  4027b8:	9304      	str	r3, [sp, #16]
  4027ba:	f04f 0900 	mov.w	r9, #0
  4027be:	e696      	b.n	4024ee <_vfiprintf_r+0x55a>
  4027c0:	aa0d      	add	r2, sp, #52	; 0x34
  4027c2:	9900      	ldr	r1, [sp, #0]
  4027c4:	9309      	str	r3, [sp, #36]	; 0x24
  4027c6:	4648      	mov	r0, r9
  4027c8:	f7ff fba8 	bl	401f1c <__sprint_r.part.0>
  4027cc:	2800      	cmp	r0, #0
  4027ce:	d17f      	bne.n	4028d0 <_vfiprintf_r+0x93c>
  4027d0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4027d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4027d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4027d6:	f100 0e01 	add.w	lr, r0, #1
  4027da:	46dc      	mov	ip, fp
  4027dc:	e529      	b.n	402232 <_vfiprintf_r+0x29e>
  4027de:	980e      	ldr	r0, [sp, #56]	; 0x38
  4027e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4027e2:	f100 0e01 	add.w	lr, r0, #1
  4027e6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4027ea:	2b00      	cmp	r3, #0
  4027ec:	f43f ad50 	beq.w	402290 <_vfiprintf_r+0x2fc>
  4027f0:	3201      	adds	r2, #1
  4027f2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4027f6:	2301      	movs	r3, #1
  4027f8:	f1be 0f07 	cmp.w	lr, #7
  4027fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4027fe:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402802:	e88a 000a 	stmia.w	sl, {r1, r3}
  402806:	f340 80bf 	ble.w	402988 <_vfiprintf_r+0x9f4>
  40280a:	2a00      	cmp	r2, #0
  40280c:	f040 814e 	bne.w	402aac <_vfiprintf_r+0xb18>
  402810:	9907      	ldr	r1, [sp, #28]
  402812:	2900      	cmp	r1, #0
  402814:	f040 80be 	bne.w	402994 <_vfiprintf_r+0xa00>
  402818:	469e      	mov	lr, r3
  40281a:	4610      	mov	r0, r2
  40281c:	46da      	mov	sl, fp
  40281e:	9b08      	ldr	r3, [sp, #32]
  402820:	2b80      	cmp	r3, #128	; 0x80
  402822:	f43f ad50 	beq.w	4022c6 <_vfiprintf_r+0x332>
  402826:	9b01      	ldr	r3, [sp, #4]
  402828:	9903      	ldr	r1, [sp, #12]
  40282a:	1a5c      	subs	r4, r3, r1
  40282c:	2c00      	cmp	r4, #0
  40282e:	f77f ad93 	ble.w	402358 <_vfiprintf_r+0x3c4>
  402832:	2c10      	cmp	r4, #16
  402834:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402964 <_vfiprintf_r+0x9d0>
  402838:	dd25      	ble.n	402886 <_vfiprintf_r+0x8f2>
  40283a:	46d4      	mov	ip, sl
  40283c:	2310      	movs	r3, #16
  40283e:	46c2      	mov	sl, r8
  402840:	46a8      	mov	r8, r5
  402842:	464d      	mov	r5, r9
  402844:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402848:	e007      	b.n	40285a <_vfiprintf_r+0x8c6>
  40284a:	f100 0e02 	add.w	lr, r0, #2
  40284e:	f10c 0c08 	add.w	ip, ip, #8
  402852:	4608      	mov	r0, r1
  402854:	3c10      	subs	r4, #16
  402856:	2c10      	cmp	r4, #16
  402858:	dd11      	ble.n	40287e <_vfiprintf_r+0x8ea>
  40285a:	1c41      	adds	r1, r0, #1
  40285c:	3210      	adds	r2, #16
  40285e:	2907      	cmp	r1, #7
  402860:	920f      	str	r2, [sp, #60]	; 0x3c
  402862:	f8cc 5000 	str.w	r5, [ip]
  402866:	f8cc 3004 	str.w	r3, [ip, #4]
  40286a:	910e      	str	r1, [sp, #56]	; 0x38
  40286c:	dded      	ble.n	40284a <_vfiprintf_r+0x8b6>
  40286e:	b9d2      	cbnz	r2, 4028a6 <_vfiprintf_r+0x912>
  402870:	3c10      	subs	r4, #16
  402872:	2c10      	cmp	r4, #16
  402874:	f04f 0e01 	mov.w	lr, #1
  402878:	4610      	mov	r0, r2
  40287a:	46dc      	mov	ip, fp
  40287c:	dced      	bgt.n	40285a <_vfiprintf_r+0x8c6>
  40287e:	46a9      	mov	r9, r5
  402880:	4645      	mov	r5, r8
  402882:	46d0      	mov	r8, sl
  402884:	46e2      	mov	sl, ip
  402886:	4422      	add	r2, r4
  402888:	f1be 0f07 	cmp.w	lr, #7
  40288c:	920f      	str	r2, [sp, #60]	; 0x3c
  40288e:	f8ca 9000 	str.w	r9, [sl]
  402892:	f8ca 4004 	str.w	r4, [sl, #4]
  402896:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40289a:	dc2e      	bgt.n	4028fa <_vfiprintf_r+0x966>
  40289c:	f10a 0a08 	add.w	sl, sl, #8
  4028a0:	f10e 0e01 	add.w	lr, lr, #1
  4028a4:	e558      	b.n	402358 <_vfiprintf_r+0x3c4>
  4028a6:	aa0d      	add	r2, sp, #52	; 0x34
  4028a8:	9900      	ldr	r1, [sp, #0]
  4028aa:	9301      	str	r3, [sp, #4]
  4028ac:	4648      	mov	r0, r9
  4028ae:	f7ff fb35 	bl	401f1c <__sprint_r.part.0>
  4028b2:	b968      	cbnz	r0, 4028d0 <_vfiprintf_r+0x93c>
  4028b4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4028b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4028b8:	9b01      	ldr	r3, [sp, #4]
  4028ba:	f100 0e01 	add.w	lr, r0, #1
  4028be:	46dc      	mov	ip, fp
  4028c0:	e7c8      	b.n	402854 <_vfiprintf_r+0x8c0>
  4028c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4028c4:	b123      	cbz	r3, 4028d0 <_vfiprintf_r+0x93c>
  4028c6:	9805      	ldr	r0, [sp, #20]
  4028c8:	9900      	ldr	r1, [sp, #0]
  4028ca:	aa0d      	add	r2, sp, #52	; 0x34
  4028cc:	f7ff fb26 	bl	401f1c <__sprint_r.part.0>
  4028d0:	9b00      	ldr	r3, [sp, #0]
  4028d2:	899b      	ldrh	r3, [r3, #12]
  4028d4:	065a      	lsls	r2, r3, #25
  4028d6:	f100 818b 	bmi.w	402bf0 <_vfiprintf_r+0xc5c>
  4028da:	9802      	ldr	r0, [sp, #8]
  4028dc:	b02b      	add	sp, #172	; 0xac
  4028de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028e2:	aa0d      	add	r2, sp, #52	; 0x34
  4028e4:	9900      	ldr	r1, [sp, #0]
  4028e6:	4648      	mov	r0, r9
  4028e8:	f7ff fb18 	bl	401f1c <__sprint_r.part.0>
  4028ec:	2800      	cmp	r0, #0
  4028ee:	d1ef      	bne.n	4028d0 <_vfiprintf_r+0x93c>
  4028f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4028f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4028f4:	1c48      	adds	r0, r1, #1
  4028f6:	46da      	mov	sl, fp
  4028f8:	e555      	b.n	4023a6 <_vfiprintf_r+0x412>
  4028fa:	2a00      	cmp	r2, #0
  4028fc:	f040 80fb 	bne.w	402af6 <_vfiprintf_r+0xb62>
  402900:	9a03      	ldr	r2, [sp, #12]
  402902:	921b      	str	r2, [sp, #108]	; 0x6c
  402904:	2301      	movs	r3, #1
  402906:	920f      	str	r2, [sp, #60]	; 0x3c
  402908:	971a      	str	r7, [sp, #104]	; 0x68
  40290a:	930e      	str	r3, [sp, #56]	; 0x38
  40290c:	46da      	mov	sl, fp
  40290e:	f10a 0a08 	add.w	sl, sl, #8
  402912:	0771      	lsls	r1, r6, #29
  402914:	d504      	bpl.n	402920 <_vfiprintf_r+0x98c>
  402916:	9b06      	ldr	r3, [sp, #24]
  402918:	1b5c      	subs	r4, r3, r5
  40291a:	2c00      	cmp	r4, #0
  40291c:	f73f ad34 	bgt.w	402388 <_vfiprintf_r+0x3f4>
  402920:	9b02      	ldr	r3, [sp, #8]
  402922:	9906      	ldr	r1, [sp, #24]
  402924:	42a9      	cmp	r1, r5
  402926:	bfac      	ite	ge
  402928:	185b      	addge	r3, r3, r1
  40292a:	195b      	addlt	r3, r3, r5
  40292c:	9302      	str	r3, [sp, #8]
  40292e:	2a00      	cmp	r2, #0
  402930:	f040 80b3 	bne.w	402a9a <_vfiprintf_r+0xb06>
  402934:	2300      	movs	r3, #0
  402936:	930e      	str	r3, [sp, #56]	; 0x38
  402938:	46da      	mov	sl, fp
  40293a:	f7ff bb5c 	b.w	401ff6 <_vfiprintf_r+0x62>
  40293e:	aa0d      	add	r2, sp, #52	; 0x34
  402940:	9900      	ldr	r1, [sp, #0]
  402942:	9307      	str	r3, [sp, #28]
  402944:	4648      	mov	r0, r9
  402946:	f7ff fae9 	bl	401f1c <__sprint_r.part.0>
  40294a:	2800      	cmp	r0, #0
  40294c:	d1c0      	bne.n	4028d0 <_vfiprintf_r+0x93c>
  40294e:	980e      	ldr	r0, [sp, #56]	; 0x38
  402950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402952:	9b07      	ldr	r3, [sp, #28]
  402954:	f100 0c01 	add.w	ip, r0, #1
  402958:	46de      	mov	lr, fp
  40295a:	e4cb      	b.n	4022f4 <_vfiprintf_r+0x360>
  40295c:	004057a0 	.word	0x004057a0
  402960:	004057b4 	.word	0x004057b4
  402964:	00405790 	.word	0x00405790
  402968:	2a00      	cmp	r2, #0
  40296a:	f040 8133 	bne.w	402bd4 <_vfiprintf_r+0xc40>
  40296e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402972:	2b00      	cmp	r3, #0
  402974:	f000 80f5 	beq.w	402b62 <_vfiprintf_r+0xbce>
  402978:	2301      	movs	r3, #1
  40297a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40297e:	461a      	mov	r2, r3
  402980:	931b      	str	r3, [sp, #108]	; 0x6c
  402982:	469e      	mov	lr, r3
  402984:	911a      	str	r1, [sp, #104]	; 0x68
  402986:	46da      	mov	sl, fp
  402988:	4670      	mov	r0, lr
  40298a:	f10a 0a08 	add.w	sl, sl, #8
  40298e:	f10e 0e01 	add.w	lr, lr, #1
  402992:	e47d      	b.n	402290 <_vfiprintf_r+0x2fc>
  402994:	a90c      	add	r1, sp, #48	; 0x30
  402996:	2202      	movs	r2, #2
  402998:	469e      	mov	lr, r3
  40299a:	911a      	str	r1, [sp, #104]	; 0x68
  40299c:	921b      	str	r2, [sp, #108]	; 0x6c
  40299e:	46da      	mov	sl, fp
  4029a0:	4670      	mov	r0, lr
  4029a2:	f10a 0a08 	add.w	sl, sl, #8
  4029a6:	f10e 0e01 	add.w	lr, lr, #1
  4029aa:	e738      	b.n	40281e <_vfiprintf_r+0x88a>
  4029ac:	9b01      	ldr	r3, [sp, #4]
  4029ae:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4029b2:	2b00      	cmp	r3, #0
  4029b4:	f2c0 812a 	blt.w	402c0c <_vfiprintf_r+0xc78>
  4029b8:	ea54 0305 	orrs.w	r3, r4, r5
  4029bc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4029c0:	f43f abff 	beq.w	4021c2 <_vfiprintf_r+0x22e>
  4029c4:	465f      	mov	r7, fp
  4029c6:	0923      	lsrs	r3, r4, #4
  4029c8:	f004 010f 	and.w	r1, r4, #15
  4029cc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4029d0:	092a      	lsrs	r2, r5, #4
  4029d2:	461c      	mov	r4, r3
  4029d4:	4615      	mov	r5, r2
  4029d6:	5c43      	ldrb	r3, [r0, r1]
  4029d8:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4029dc:	ea54 0305 	orrs.w	r3, r4, r5
  4029e0:	d1f1      	bne.n	4029c6 <_vfiprintf_r+0xa32>
  4029e2:	ebc7 030b 	rsb	r3, r7, fp
  4029e6:	9303      	str	r3, [sp, #12]
  4029e8:	f7ff bbf4 	b.w	4021d4 <_vfiprintf_r+0x240>
  4029ec:	aa0d      	add	r2, sp, #52	; 0x34
  4029ee:	9900      	ldr	r1, [sp, #0]
  4029f0:	9805      	ldr	r0, [sp, #20]
  4029f2:	f7ff fa93 	bl	401f1c <__sprint_r.part.0>
  4029f6:	2800      	cmp	r0, #0
  4029f8:	f47f af6a 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  4029fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4029fe:	46da      	mov	sl, fp
  402a00:	e787      	b.n	402912 <_vfiprintf_r+0x97e>
  402a02:	f04f 0900 	mov.w	r9, #0
  402a06:	2400      	movs	r4, #0
  402a08:	2500      	movs	r5, #0
  402a0a:	e7db      	b.n	4029c4 <_vfiprintf_r+0xa30>
  402a0c:	f016 0210 	ands.w	r2, r6, #16
  402a10:	f000 80b2 	beq.w	402b78 <_vfiprintf_r+0xbe4>
  402a14:	9904      	ldr	r1, [sp, #16]
  402a16:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402a1a:	460a      	mov	r2, r1
  402a1c:	680c      	ldr	r4, [r1, #0]
  402a1e:	9901      	ldr	r1, [sp, #4]
  402a20:	2900      	cmp	r1, #0
  402a22:	f102 0204 	add.w	r2, r2, #4
  402a26:	f04f 0500 	mov.w	r5, #0
  402a2a:	f2c0 8159 	blt.w	402ce0 <_vfiprintf_r+0xd4c>
  402a2e:	ea54 0105 	orrs.w	r1, r4, r5
  402a32:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402a36:	9204      	str	r2, [sp, #16]
  402a38:	f43f ad51 	beq.w	4024de <_vfiprintf_r+0x54a>
  402a3c:	4699      	mov	r9, r3
  402a3e:	e556      	b.n	4024ee <_vfiprintf_r+0x55a>
  402a40:	06f7      	lsls	r7, r6, #27
  402a42:	d40a      	bmi.n	402a5a <_vfiprintf_r+0xac6>
  402a44:	0675      	lsls	r5, r6, #25
  402a46:	d508      	bpl.n	402a5a <_vfiprintf_r+0xac6>
  402a48:	9904      	ldr	r1, [sp, #16]
  402a4a:	f9b1 4000 	ldrsh.w	r4, [r1]
  402a4e:	3104      	adds	r1, #4
  402a50:	17e5      	asrs	r5, r4, #31
  402a52:	4622      	mov	r2, r4
  402a54:	462b      	mov	r3, r5
  402a56:	9104      	str	r1, [sp, #16]
  402a58:	e4ea      	b.n	402430 <_vfiprintf_r+0x49c>
  402a5a:	9a04      	ldr	r2, [sp, #16]
  402a5c:	6814      	ldr	r4, [r2, #0]
  402a5e:	4613      	mov	r3, r2
  402a60:	3304      	adds	r3, #4
  402a62:	17e5      	asrs	r5, r4, #31
  402a64:	9304      	str	r3, [sp, #16]
  402a66:	4622      	mov	r2, r4
  402a68:	462b      	mov	r3, r5
  402a6a:	e4e1      	b.n	402430 <_vfiprintf_r+0x49c>
  402a6c:	6814      	ldr	r4, [r2, #0]
  402a6e:	3204      	adds	r2, #4
  402a70:	9204      	str	r2, [sp, #16]
  402a72:	2500      	movs	r5, #0
  402a74:	e61f      	b.n	4026b6 <_vfiprintf_r+0x722>
  402a76:	f04f 0900 	mov.w	r9, #0
  402a7a:	ea54 0305 	orrs.w	r3, r4, r5
  402a7e:	f47f ace8 	bne.w	402452 <_vfiprintf_r+0x4be>
  402a82:	e5d8      	b.n	402636 <_vfiprintf_r+0x6a2>
  402a84:	aa0d      	add	r2, sp, #52	; 0x34
  402a86:	9900      	ldr	r1, [sp, #0]
  402a88:	9805      	ldr	r0, [sp, #20]
  402a8a:	f7ff fa47 	bl	401f1c <__sprint_r.part.0>
  402a8e:	2800      	cmp	r0, #0
  402a90:	f47f af1e 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  402a94:	46da      	mov	sl, fp
  402a96:	f7ff bb48 	b.w	40212a <_vfiprintf_r+0x196>
  402a9a:	aa0d      	add	r2, sp, #52	; 0x34
  402a9c:	9900      	ldr	r1, [sp, #0]
  402a9e:	9805      	ldr	r0, [sp, #20]
  402aa0:	f7ff fa3c 	bl	401f1c <__sprint_r.part.0>
  402aa4:	2800      	cmp	r0, #0
  402aa6:	f43f af45 	beq.w	402934 <_vfiprintf_r+0x9a0>
  402aaa:	e711      	b.n	4028d0 <_vfiprintf_r+0x93c>
  402aac:	aa0d      	add	r2, sp, #52	; 0x34
  402aae:	9900      	ldr	r1, [sp, #0]
  402ab0:	9805      	ldr	r0, [sp, #20]
  402ab2:	f7ff fa33 	bl	401f1c <__sprint_r.part.0>
  402ab6:	2800      	cmp	r0, #0
  402ab8:	f47f af0a 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  402abc:	980e      	ldr	r0, [sp, #56]	; 0x38
  402abe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ac0:	f100 0e01 	add.w	lr, r0, #1
  402ac4:	46da      	mov	sl, fp
  402ac6:	f7ff bbe3 	b.w	402290 <_vfiprintf_r+0x2fc>
  402aca:	aa0d      	add	r2, sp, #52	; 0x34
  402acc:	9900      	ldr	r1, [sp, #0]
  402ace:	9805      	ldr	r0, [sp, #20]
  402ad0:	f7ff fa24 	bl	401f1c <__sprint_r.part.0>
  402ad4:	2800      	cmp	r0, #0
  402ad6:	f47f aefb 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  402ada:	980e      	ldr	r0, [sp, #56]	; 0x38
  402adc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ade:	f100 0e01 	add.w	lr, r0, #1
  402ae2:	46da      	mov	sl, fp
  402ae4:	e69b      	b.n	40281e <_vfiprintf_r+0x88a>
  402ae6:	2a00      	cmp	r2, #0
  402ae8:	f040 80d8 	bne.w	402c9c <_vfiprintf_r+0xd08>
  402aec:	f04f 0e01 	mov.w	lr, #1
  402af0:	4610      	mov	r0, r2
  402af2:	46da      	mov	sl, fp
  402af4:	e697      	b.n	402826 <_vfiprintf_r+0x892>
  402af6:	aa0d      	add	r2, sp, #52	; 0x34
  402af8:	9900      	ldr	r1, [sp, #0]
  402afa:	9805      	ldr	r0, [sp, #20]
  402afc:	f7ff fa0e 	bl	401f1c <__sprint_r.part.0>
  402b00:	2800      	cmp	r0, #0
  402b02:	f47f aee5 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  402b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402b0a:	f103 0e01 	add.w	lr, r3, #1
  402b0e:	46da      	mov	sl, fp
  402b10:	e422      	b.n	402358 <_vfiprintf_r+0x3c4>
  402b12:	2230      	movs	r2, #48	; 0x30
  402b14:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402b18:	9a01      	ldr	r2, [sp, #4]
  402b1a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  402b1e:	2a00      	cmp	r2, #0
  402b20:	f04f 0300 	mov.w	r3, #0
  402b24:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402b28:	f046 0302 	orr.w	r3, r6, #2
  402b2c:	f2c0 80cb 	blt.w	402cc6 <_vfiprintf_r+0xd32>
  402b30:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402b34:	f046 0602 	orr.w	r6, r6, #2
  402b38:	f04f 0900 	mov.w	r9, #0
  402b3c:	e742      	b.n	4029c4 <_vfiprintf_r+0xa30>
  402b3e:	f04f 0900 	mov.w	r9, #0
  402b42:	4890      	ldr	r0, [pc, #576]	; (402d84 <_vfiprintf_r+0xdf0>)
  402b44:	e73e      	b.n	4029c4 <_vfiprintf_r+0xa30>
  402b46:	9b01      	ldr	r3, [sp, #4]
  402b48:	4264      	negs	r4, r4
  402b4a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  402b4e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402b52:	2b00      	cmp	r3, #0
  402b54:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402b58:	f6ff ac7b 	blt.w	402452 <_vfiprintf_r+0x4be>
  402b5c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402b60:	e477      	b.n	402452 <_vfiprintf_r+0x4be>
  402b62:	9b07      	ldr	r3, [sp, #28]
  402b64:	2b00      	cmp	r3, #0
  402b66:	d072      	beq.n	402c4e <_vfiprintf_r+0xcba>
  402b68:	ab0c      	add	r3, sp, #48	; 0x30
  402b6a:	2202      	movs	r2, #2
  402b6c:	931a      	str	r3, [sp, #104]	; 0x68
  402b6e:	921b      	str	r2, [sp, #108]	; 0x6c
  402b70:	f04f 0e01 	mov.w	lr, #1
  402b74:	46da      	mov	sl, fp
  402b76:	e713      	b.n	4029a0 <_vfiprintf_r+0xa0c>
  402b78:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402b7c:	d048      	beq.n	402c10 <_vfiprintf_r+0xc7c>
  402b7e:	9904      	ldr	r1, [sp, #16]
  402b80:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402b84:	460b      	mov	r3, r1
  402b86:	880c      	ldrh	r4, [r1, #0]
  402b88:	9901      	ldr	r1, [sp, #4]
  402b8a:	2900      	cmp	r1, #0
  402b8c:	f103 0304 	add.w	r3, r3, #4
  402b90:	f04f 0500 	mov.w	r5, #0
  402b94:	f6ff ae10 	blt.w	4027b8 <_vfiprintf_r+0x824>
  402b98:	ea54 0105 	orrs.w	r1, r4, r5
  402b9c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402ba0:	9304      	str	r3, [sp, #16]
  402ba2:	f43f ac9c 	beq.w	4024de <_vfiprintf_r+0x54a>
  402ba6:	4691      	mov	r9, r2
  402ba8:	e4a1      	b.n	4024ee <_vfiprintf_r+0x55a>
  402baa:	06f0      	lsls	r0, r6, #27
  402bac:	d40a      	bmi.n	402bc4 <_vfiprintf_r+0xc30>
  402bae:	0671      	lsls	r1, r6, #25
  402bb0:	d508      	bpl.n	402bc4 <_vfiprintf_r+0xc30>
  402bb2:	9a04      	ldr	r2, [sp, #16]
  402bb4:	6813      	ldr	r3, [r2, #0]
  402bb6:	3204      	adds	r2, #4
  402bb8:	9204      	str	r2, [sp, #16]
  402bba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  402bbe:	801a      	strh	r2, [r3, #0]
  402bc0:	f7ff ba19 	b.w	401ff6 <_vfiprintf_r+0x62>
  402bc4:	9a04      	ldr	r2, [sp, #16]
  402bc6:	6813      	ldr	r3, [r2, #0]
  402bc8:	3204      	adds	r2, #4
  402bca:	9204      	str	r2, [sp, #16]
  402bcc:	9a02      	ldr	r2, [sp, #8]
  402bce:	601a      	str	r2, [r3, #0]
  402bd0:	f7ff ba11 	b.w	401ff6 <_vfiprintf_r+0x62>
  402bd4:	aa0d      	add	r2, sp, #52	; 0x34
  402bd6:	9900      	ldr	r1, [sp, #0]
  402bd8:	9805      	ldr	r0, [sp, #20]
  402bda:	f7ff f99f 	bl	401f1c <__sprint_r.part.0>
  402bde:	2800      	cmp	r0, #0
  402be0:	f47f ae76 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  402be4:	980e      	ldr	r0, [sp, #56]	; 0x38
  402be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402be8:	f100 0e01 	add.w	lr, r0, #1
  402bec:	46da      	mov	sl, fp
  402bee:	e5fa      	b.n	4027e6 <_vfiprintf_r+0x852>
  402bf0:	f04f 30ff 	mov.w	r0, #4294967295
  402bf4:	f7ff bab6 	b.w	402164 <_vfiprintf_r+0x1d0>
  402bf8:	4862      	ldr	r0, [pc, #392]	; (402d84 <_vfiprintf_r+0xdf0>)
  402bfa:	4616      	mov	r6, r2
  402bfc:	ea54 0205 	orrs.w	r2, r4, r5
  402c00:	9304      	str	r3, [sp, #16]
  402c02:	f04f 0900 	mov.w	r9, #0
  402c06:	f47f aedd 	bne.w	4029c4 <_vfiprintf_r+0xa30>
  402c0a:	e6fc      	b.n	402a06 <_vfiprintf_r+0xa72>
  402c0c:	9b04      	ldr	r3, [sp, #16]
  402c0e:	e7f5      	b.n	402bfc <_vfiprintf_r+0xc68>
  402c10:	9a04      	ldr	r2, [sp, #16]
  402c12:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402c16:	4613      	mov	r3, r2
  402c18:	6814      	ldr	r4, [r2, #0]
  402c1a:	9a01      	ldr	r2, [sp, #4]
  402c1c:	2a00      	cmp	r2, #0
  402c1e:	f103 0304 	add.w	r3, r3, #4
  402c22:	f04f 0500 	mov.w	r5, #0
  402c26:	f6ff adc7 	blt.w	4027b8 <_vfiprintf_r+0x824>
  402c2a:	ea54 0205 	orrs.w	r2, r4, r5
  402c2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402c32:	9304      	str	r3, [sp, #16]
  402c34:	f47f ac5b 	bne.w	4024ee <_vfiprintf_r+0x55a>
  402c38:	e451      	b.n	4024de <_vfiprintf_r+0x54a>
  402c3a:	aa0d      	add	r2, sp, #52	; 0x34
  402c3c:	9900      	ldr	r1, [sp, #0]
  402c3e:	9805      	ldr	r0, [sp, #20]
  402c40:	f7ff f96c 	bl	401f1c <__sprint_r.part.0>
  402c44:	2800      	cmp	r0, #0
  402c46:	f47f ae43 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  402c4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c4c:	e668      	b.n	402920 <_vfiprintf_r+0x98c>
  402c4e:	4610      	mov	r0, r2
  402c50:	f04f 0e01 	mov.w	lr, #1
  402c54:	46da      	mov	sl, fp
  402c56:	e5e6      	b.n	402826 <_vfiprintf_r+0x892>
  402c58:	9904      	ldr	r1, [sp, #16]
  402c5a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402c5e:	460a      	mov	r2, r1
  402c60:	880c      	ldrh	r4, [r1, #0]
  402c62:	9901      	ldr	r1, [sp, #4]
  402c64:	2900      	cmp	r1, #0
  402c66:	f102 0204 	add.w	r2, r2, #4
  402c6a:	f04f 0500 	mov.w	r5, #0
  402c6e:	db4e      	blt.n	402d0e <_vfiprintf_r+0xd7a>
  402c70:	ea54 0105 	orrs.w	r1, r4, r5
  402c74:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402c78:	9204      	str	r2, [sp, #16]
  402c7a:	4699      	mov	r9, r3
  402c7c:	f47f abe9 	bne.w	402452 <_vfiprintf_r+0x4be>
  402c80:	e4d4      	b.n	40262c <_vfiprintf_r+0x698>
  402c82:	9304      	str	r3, [sp, #16]
  402c84:	e6f9      	b.n	402a7a <_vfiprintf_r+0xae6>
  402c86:	4638      	mov	r0, r7
  402c88:	9404      	str	r4, [sp, #16]
  402c8a:	f7ff f8d9 	bl	401e40 <strlen>
  402c8e:	2300      	movs	r3, #0
  402c90:	9003      	str	r0, [sp, #12]
  402c92:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402c96:	9301      	str	r3, [sp, #4]
  402c98:	f7ff ba9c 	b.w	4021d4 <_vfiprintf_r+0x240>
  402c9c:	aa0d      	add	r2, sp, #52	; 0x34
  402c9e:	9900      	ldr	r1, [sp, #0]
  402ca0:	9805      	ldr	r0, [sp, #20]
  402ca2:	f7ff f93b 	bl	401f1c <__sprint_r.part.0>
  402ca6:	2800      	cmp	r0, #0
  402ca8:	f47f ae12 	bne.w	4028d0 <_vfiprintf_r+0x93c>
  402cac:	980e      	ldr	r0, [sp, #56]	; 0x38
  402cae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402cb0:	f100 0e01 	add.w	lr, r0, #1
  402cb4:	46da      	mov	sl, fp
  402cb6:	e5b6      	b.n	402826 <_vfiprintf_r+0x892>
  402cb8:	980e      	ldr	r0, [sp, #56]	; 0x38
  402cba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402cbc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 402d8c <_vfiprintf_r+0xdf8>
  402cc0:	3001      	adds	r0, #1
  402cc2:	f7ff bad2 	b.w	40226a <_vfiprintf_r+0x2d6>
  402cc6:	461e      	mov	r6, r3
  402cc8:	f04f 0900 	mov.w	r9, #0
  402ccc:	e67a      	b.n	4029c4 <_vfiprintf_r+0xa30>
  402cce:	2b06      	cmp	r3, #6
  402cd0:	bf28      	it	cs
  402cd2:	2306      	movcs	r3, #6
  402cd4:	9303      	str	r3, [sp, #12]
  402cd6:	9404      	str	r4, [sp, #16]
  402cd8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  402cdc:	4f2a      	ldr	r7, [pc, #168]	; (402d88 <_vfiprintf_r+0xdf4>)
  402cde:	e50c      	b.n	4026fa <_vfiprintf_r+0x766>
  402ce0:	9204      	str	r2, [sp, #16]
  402ce2:	e56a      	b.n	4027ba <_vfiprintf_r+0x826>
  402ce4:	980e      	ldr	r0, [sp, #56]	; 0x38
  402ce6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 402d8c <_vfiprintf_r+0xdf8>
  402cea:	3001      	adds	r0, #1
  402cec:	f7ff bb73 	b.w	4023d6 <_vfiprintf_r+0x442>
  402cf0:	46f4      	mov	ip, lr
  402cf2:	f7ff bb1a 	b.w	40232a <_vfiprintf_r+0x396>
  402cf6:	9b01      	ldr	r3, [sp, #4]
  402cf8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402cfc:	9303      	str	r3, [sp, #12]
  402cfe:	9404      	str	r4, [sp, #16]
  402d00:	9001      	str	r0, [sp, #4]
  402d02:	f7ff ba67 	b.w	4021d4 <_vfiprintf_r+0x240>
  402d06:	2200      	movs	r2, #0
  402d08:	9201      	str	r2, [sp, #4]
  402d0a:	f7ff b9ac 	b.w	402066 <_vfiprintf_r+0xd2>
  402d0e:	9204      	str	r2, [sp, #16]
  402d10:	4699      	mov	r9, r3
  402d12:	e6b2      	b.n	402a7a <_vfiprintf_r+0xae6>
  402d14:	9a04      	ldr	r2, [sp, #16]
  402d16:	6813      	ldr	r3, [r2, #0]
  402d18:	9301      	str	r3, [sp, #4]
  402d1a:	3204      	adds	r2, #4
  402d1c:	2b00      	cmp	r3, #0
  402d1e:	9204      	str	r2, [sp, #16]
  402d20:	f898 3001 	ldrb.w	r3, [r8, #1]
  402d24:	46a8      	mov	r8, r5
  402d26:	f6bf a99c 	bge.w	402062 <_vfiprintf_r+0xce>
  402d2a:	f04f 32ff 	mov.w	r2, #4294967295
  402d2e:	9201      	str	r2, [sp, #4]
  402d30:	f7ff b997 	b.w	402062 <_vfiprintf_r+0xce>
  402d34:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d38:	e48e      	b.n	402658 <_vfiprintf_r+0x6c4>
  402d3a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d3e:	e4f0      	b.n	402722 <_vfiprintf_r+0x78e>
  402d40:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d44:	e4ab      	b.n	40269e <_vfiprintf_r+0x70a>
  402d46:	4699      	mov	r9, r3
  402d48:	07f3      	lsls	r3, r6, #31
  402d4a:	d505      	bpl.n	402d58 <_vfiprintf_r+0xdc4>
  402d4c:	af2a      	add	r7, sp, #168	; 0xa8
  402d4e:	2330      	movs	r3, #48	; 0x30
  402d50:	f807 3d41 	strb.w	r3, [r7, #-65]!
  402d54:	f7ff bb97 	b.w	402486 <_vfiprintf_r+0x4f2>
  402d58:	9b01      	ldr	r3, [sp, #4]
  402d5a:	9303      	str	r3, [sp, #12]
  402d5c:	465f      	mov	r7, fp
  402d5e:	f7ff ba39 	b.w	4021d4 <_vfiprintf_r+0x240>
  402d62:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d66:	e443      	b.n	4025f0 <_vfiprintf_r+0x65c>
  402d68:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d6c:	f7ff bb9a 	b.w	4024a4 <_vfiprintf_r+0x510>
  402d70:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d74:	f7ff bb4d 	b.w	402412 <_vfiprintf_r+0x47e>
  402d78:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d7c:	e50f      	b.n	40279e <_vfiprintf_r+0x80a>
  402d7e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d82:	e4f3      	b.n	40276c <_vfiprintf_r+0x7d8>
  402d84:	004057b4 	.word	0x004057b4
  402d88:	004057c8 	.word	0x004057c8
  402d8c:	004057d0 	.word	0x004057d0

00402d90 <__sbprintf>:
  402d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d92:	460c      	mov	r4, r1
  402d94:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402d98:	8989      	ldrh	r1, [r1, #12]
  402d9a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402d9c:	89e5      	ldrh	r5, [r4, #14]
  402d9e:	9619      	str	r6, [sp, #100]	; 0x64
  402da0:	f021 0102 	bic.w	r1, r1, #2
  402da4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402da6:	f8ad 500e 	strh.w	r5, [sp, #14]
  402daa:	2500      	movs	r5, #0
  402dac:	69e7      	ldr	r7, [r4, #28]
  402dae:	f8ad 100c 	strh.w	r1, [sp, #12]
  402db2:	9609      	str	r6, [sp, #36]	; 0x24
  402db4:	9506      	str	r5, [sp, #24]
  402db6:	ae1a      	add	r6, sp, #104	; 0x68
  402db8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  402dbc:	4669      	mov	r1, sp
  402dbe:	9600      	str	r6, [sp, #0]
  402dc0:	9604      	str	r6, [sp, #16]
  402dc2:	9502      	str	r5, [sp, #8]
  402dc4:	9505      	str	r5, [sp, #20]
  402dc6:	9707      	str	r7, [sp, #28]
  402dc8:	4606      	mov	r6, r0
  402dca:	f7ff f8e3 	bl	401f94 <_vfiprintf_r>
  402dce:	1e05      	subs	r5, r0, #0
  402dd0:	db07      	blt.n	402de2 <__sbprintf+0x52>
  402dd2:	4630      	mov	r0, r6
  402dd4:	4669      	mov	r1, sp
  402dd6:	f000 fe6f 	bl	403ab8 <_fflush_r>
  402dda:	2800      	cmp	r0, #0
  402ddc:	bf18      	it	ne
  402dde:	f04f 35ff 	movne.w	r5, #4294967295
  402de2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402de6:	065b      	lsls	r3, r3, #25
  402de8:	d503      	bpl.n	402df2 <__sbprintf+0x62>
  402dea:	89a3      	ldrh	r3, [r4, #12]
  402dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402df0:	81a3      	strh	r3, [r4, #12]
  402df2:	4628      	mov	r0, r5
  402df4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402dfa:	bf00      	nop

00402dfc <__svfiscanf_r>:
  402dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e00:	468b      	mov	fp, r1
  402e02:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
  402e06:	b0d9      	sub	sp, #356	; 0x164
  402e08:	4607      	mov	r7, r0
  402e0a:	0488      	lsls	r0, r1, #18
  402e0c:	9305      	str	r3, [sp, #20]
  402e0e:	d409      	bmi.n	402e24 <__svfiscanf_r+0x28>
  402e10:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402e14:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  402e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402e1c:	f8ab 100c 	strh.w	r1, [fp, #12]
  402e20:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402e24:	4616      	mov	r6, r2
  402e26:	2300      	movs	r3, #0
  402e28:	f816 1b01 	ldrb.w	r1, [r6], #1
  402e2c:	9306      	str	r3, [sp, #24]
  402e2e:	9303      	str	r3, [sp, #12]
  402e30:	4699      	mov	r9, r3
  402e32:	9307      	str	r3, [sp, #28]
  402e34:	f8df a4dc 	ldr.w	sl, [pc, #1244]	; 403314 <__svfiscanf_r+0x518>
  402e38:	910b      	str	r1, [sp, #44]	; 0x2c
  402e3a:	b371      	cbz	r1, 402e9a <__svfiscanf_r+0x9e>
  402e3c:	f8da c000 	ldr.w	ip, [sl]
  402e40:	eb0c 0301 	add.w	r3, ip, r1
  402e44:	785b      	ldrb	r3, [r3, #1]
  402e46:	f003 0308 	and.w	r3, r3, #8
  402e4a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  402e4e:	b343      	cbz	r3, 402ea2 <__svfiscanf_r+0xa6>
  402e50:	f8db 3004 	ldr.w	r3, [fp, #4]
  402e54:	e012      	b.n	402e7c <__svfiscanf_r+0x80>
  402e56:	f8db 3000 	ldr.w	r3, [fp]
  402e5a:	f8da 1000 	ldr.w	r1, [sl]
  402e5e:	781a      	ldrb	r2, [r3, #0]
  402e60:	440a      	add	r2, r1
  402e62:	3301      	adds	r3, #1
  402e64:	7852      	ldrb	r2, [r2, #1]
  402e66:	0712      	lsls	r2, r2, #28
  402e68:	d510      	bpl.n	402e8c <__svfiscanf_r+0x90>
  402e6a:	f8db 2004 	ldr.w	r2, [fp, #4]
  402e6e:	f8cb 3000 	str.w	r3, [fp]
  402e72:	1e53      	subs	r3, r2, #1
  402e74:	f109 0901 	add.w	r9, r9, #1
  402e78:	f8cb 3004 	str.w	r3, [fp, #4]
  402e7c:	2b00      	cmp	r3, #0
  402e7e:	dcea      	bgt.n	402e56 <__svfiscanf_r+0x5a>
  402e80:	4659      	mov	r1, fp
  402e82:	4638      	mov	r0, r7
  402e84:	f001 fc3e 	bl	404704 <__srefill_r>
  402e88:	2800      	cmp	r0, #0
  402e8a:	d0e4      	beq.n	402e56 <__svfiscanf_r+0x5a>
  402e8c:	4632      	mov	r2, r6
  402e8e:	4616      	mov	r6, r2
  402e90:	f816 1b01 	ldrb.w	r1, [r6], #1
  402e94:	910b      	str	r1, [sp, #44]	; 0x2c
  402e96:	2900      	cmp	r1, #0
  402e98:	d1d0      	bne.n	402e3c <__svfiscanf_r+0x40>
  402e9a:	9807      	ldr	r0, [sp, #28]
  402e9c:	b059      	add	sp, #356	; 0x164
  402e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ea2:	2925      	cmp	r1, #37	; 0x25
  402ea4:	f040 8082 	bne.w	402fac <__svfiscanf_r+0x1b0>
  402ea8:	7853      	ldrb	r3, [r2, #1]
  402eaa:	462c      	mov	r4, r5
  402eac:	1c72      	adds	r2, r6, #1
  402eae:	2b78      	cmp	r3, #120	; 0x78
  402eb0:	f200 8264 	bhi.w	40337c <__svfiscanf_r+0x580>
  402eb4:	e8df f013 	tbh	[pc, r3, lsl #1]
  402eb8:	02620093 	.word	0x02620093
  402ebc:	02620262 	.word	0x02620262
  402ec0:	02620262 	.word	0x02620262
  402ec4:	02620262 	.word	0x02620262
  402ec8:	02620262 	.word	0x02620262
  402ecc:	02620262 	.word	0x02620262
  402ed0:	02620262 	.word	0x02620262
  402ed4:	02620262 	.word	0x02620262
  402ed8:	02620262 	.word	0x02620262
  402edc:	02620262 	.word	0x02620262
  402ee0:	02620262 	.word	0x02620262
  402ee4:	02620262 	.word	0x02620262
  402ee8:	02620262 	.word	0x02620262
  402eec:	02620262 	.word	0x02620262
  402ef0:	02620262 	.word	0x02620262
  402ef4:	02620262 	.word	0x02620262
  402ef8:	02620262 	.word	0x02620262
  402efc:	02620262 	.word	0x02620262
  402f00:	00790262 	.word	0x00790262
  402f04:	02620262 	.word	0x02620262
  402f08:	02620262 	.word	0x02620262
  402f0c:	026201a7 	.word	0x026201a7
  402f10:	02620262 	.word	0x02620262
  402f14:	02620262 	.word	0x02620262
  402f18:	019f019f 	.word	0x019f019f
  402f1c:	019f019f 	.word	0x019f019f
  402f20:	019f019f 	.word	0x019f019f
  402f24:	019f019f 	.word	0x019f019f
  402f28:	019f019f 	.word	0x019f019f
  402f2c:	02620262 	.word	0x02620262
  402f30:	02620262 	.word	0x02620262
  402f34:	02620262 	.word	0x02620262
  402f38:	02620262 	.word	0x02620262
  402f3c:	02620262 	.word	0x02620262
  402f40:	0262018d 	.word	0x0262018d
  402f44:	02620262 	.word	0x02620262
  402f48:	02620262 	.word	0x02620262
  402f4c:	02620262 	.word	0x02620262
  402f50:	026201be 	.word	0x026201be
  402f54:	01ac0262 	.word	0x01ac0262
  402f58:	02620262 	.word	0x02620262
  402f5c:	02620262 	.word	0x02620262
  402f60:	02620262 	.word	0x02620262
  402f64:	02620262 	.word	0x02620262
  402f68:	0262017b 	.word	0x0262017b
  402f6c:	01440262 	.word	0x01440262
  402f70:	02620262 	.word	0x02620262
  402f74:	02620262 	.word	0x02620262
  402f78:	02620262 	.word	0x02620262
  402f7c:	01150262 	.word	0x01150262
  402f80:	02620109 	.word	0x02620109
  402f84:	02620262 	.word	0x02620262
  402f88:	01c30104 	.word	0x01c30104
  402f8c:	02620262 	.word	0x02620262
  402f90:	026200fc 	.word	0x026200fc
  402f94:	00df00eb 	.word	0x00df00eb
  402f98:	026200d1 	.word	0x026200d1
  402f9c:	00c90262 	.word	0x00c90262
  402fa0:	00980262 	.word	0x00980262
  402fa4:	02620262 	.word	0x02620262
  402fa8:	017b      	.short	0x017b
  402faa:	4616      	mov	r6, r2
  402fac:	f8db 3004 	ldr.w	r3, [fp, #4]
  402fb0:	2b00      	cmp	r3, #0
  402fb2:	f340 8244 	ble.w	40343e <__svfiscanf_r+0x642>
  402fb6:	f8db 3000 	ldr.w	r3, [fp]
  402fba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
  402fbe:	7819      	ldrb	r1, [r3, #0]
  402fc0:	4291      	cmp	r1, r2
  402fc2:	f47f af6a 	bne.w	402e9a <__svfiscanf_r+0x9e>
  402fc6:	f8db 2004 	ldr.w	r2, [fp, #4]
  402fca:	3301      	adds	r3, #1
  402fcc:	3a01      	subs	r2, #1
  402fce:	f8cb 2004 	str.w	r2, [fp, #4]
  402fd2:	f8cb 3000 	str.w	r3, [fp]
  402fd6:	f109 0901 	add.w	r9, r9, #1
  402fda:	4632      	mov	r2, r6
  402fdc:	e757      	b.n	402e8e <__svfiscanf_r+0x92>
  402fde:	f04f 30ff 	mov.w	r0, #4294967295
  402fe2:	b059      	add	sp, #356	; 0x164
  402fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fe8:	f8db 3004 	ldr.w	r3, [fp, #4]
  402fec:	9202      	str	r2, [sp, #8]
  402fee:	2b00      	cmp	r3, #0
  402ff0:	f340 8259 	ble.w	4034a6 <__svfiscanf_r+0x6aa>
  402ff4:	4bc5      	ldr	r3, [pc, #788]	; (40330c <__svfiscanf_r+0x510>)
  402ff6:	9306      	str	r3, [sp, #24]
  402ff8:	230a      	movs	r3, #10
  402ffa:	9303      	str	r3, [sp, #12]
  402ffc:	2603      	movs	r6, #3
  402ffe:	f8db 3000 	ldr.w	r3, [fp]
  403002:	e001      	b.n	403008 <__svfiscanf_r+0x20c>
  403004:	f8cb 3000 	str.w	r3, [fp]
  403008:	f893 e000 	ldrb.w	lr, [r3]
  40300c:	eb0c 020e 	add.w	r2, ip, lr
  403010:	7850      	ldrb	r0, [r2, #1]
  403012:	f000 0208 	and.w	r2, r0, #8
  403016:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  40301a:	2a00      	cmp	r2, #0
  40301c:	f000 826e 	beq.w	4034fc <__svfiscanf_r+0x700>
  403020:	f8db 2004 	ldr.w	r2, [fp, #4]
  403024:	3a01      	subs	r2, #1
  403026:	2a00      	cmp	r2, #0
  403028:	f109 0901 	add.w	r9, r9, #1
  40302c:	f8cb 2004 	str.w	r2, [fp, #4]
  403030:	f103 0301 	add.w	r3, r3, #1
  403034:	dce6      	bgt.n	403004 <__svfiscanf_r+0x208>
  403036:	4659      	mov	r1, fp
  403038:	4638      	mov	r0, r7
  40303a:	f001 fb63 	bl	404704 <__srefill_r>
  40303e:	2800      	cmp	r0, #0
  403040:	f040 818c 	bne.w	40335c <__svfiscanf_r+0x560>
  403044:	f8da c000 	ldr.w	ip, [sl]
  403048:	e7d9      	b.n	402ffe <__svfiscanf_r+0x202>
  40304a:	f8db 3004 	ldr.w	r3, [fp, #4]
  40304e:	9202      	str	r2, [sp, #8]
  403050:	2b00      	cmp	r3, #0
  403052:	f340 8232 	ble.w	4034ba <__svfiscanf_r+0x6be>
  403056:	2602      	movs	r6, #2
  403058:	e7d1      	b.n	402ffe <__svfiscanf_r+0x202>
  40305a:	f8db 3004 	ldr.w	r3, [fp, #4]
  40305e:	9202      	str	r2, [sp, #8]
  403060:	2b00      	cmp	r3, #0
  403062:	f445 7508 	orr.w	r5, r5, #544	; 0x220
  403066:	f340 80aa 	ble.w	4031be <__svfiscanf_r+0x3c2>
  40306a:	4ba8      	ldr	r3, [pc, #672]	; (40330c <__svfiscanf_r+0x510>)
  40306c:	9306      	str	r3, [sp, #24]
  40306e:	2310      	movs	r3, #16
  403070:	9303      	str	r3, [sp, #12]
  403072:	2603      	movs	r6, #3
  403074:	e7c3      	b.n	402ffe <__svfiscanf_r+0x202>
  403076:	f8db 3004 	ldr.w	r3, [fp, #4]
  40307a:	9202      	str	r2, [sp, #8]
  40307c:	2b00      	cmp	r3, #0
  40307e:	f340 80cf 	ble.w	403220 <__svfiscanf_r+0x424>
  403082:	4ba2      	ldr	r3, [pc, #648]	; (40330c <__svfiscanf_r+0x510>)
  403084:	9306      	str	r3, [sp, #24]
  403086:	2308      	movs	r3, #8
  403088:	9303      	str	r3, [sp, #12]
  40308a:	2603      	movs	r6, #3
  40308c:	e7b7      	b.n	402ffe <__svfiscanf_r+0x202>
  40308e:	06eb      	lsls	r3, r5, #27
  403090:	9202      	str	r2, [sp, #8]
  403092:	f100 812c 	bmi.w	4032ee <__svfiscanf_r+0x4f2>
  403096:	076e      	lsls	r6, r5, #29
  403098:	f140 81e4 	bpl.w	403464 <__svfiscanf_r+0x668>
  40309c:	9905      	ldr	r1, [sp, #20]
  40309e:	680b      	ldr	r3, [r1, #0]
  4030a0:	f8a3 9000 	strh.w	r9, [r3]
  4030a4:	460b      	mov	r3, r1
  4030a6:	4616      	mov	r6, r2
  4030a8:	3304      	adds	r3, #4
  4030aa:	9305      	str	r3, [sp, #20]
  4030ac:	4632      	mov	r2, r6
  4030ae:	e6ee      	b.n	402e8e <__svfiscanf_r+0x92>
  4030b0:	7873      	ldrb	r3, [r6, #1]
  4030b2:	2b6c      	cmp	r3, #108	; 0x6c
  4030b4:	f000 81cb 	beq.w	40344e <__svfiscanf_r+0x652>
  4030b8:	f045 0501 	orr.w	r5, r5, #1
  4030bc:	4616      	mov	r6, r2
  4030be:	e6f5      	b.n	402eac <__svfiscanf_r+0xb0>
  4030c0:	7873      	ldrb	r3, [r6, #1]
  4030c2:	f045 0504 	orr.w	r5, r5, #4
  4030c6:	4616      	mov	r6, r2
  4030c8:	e6f0      	b.n	402eac <__svfiscanf_r+0xb0>
  4030ca:	f8db 3004 	ldr.w	r3, [fp, #4]
  4030ce:	9202      	str	r2, [sp, #8]
  4030d0:	2b00      	cmp	r3, #0
  4030d2:	f340 8086 	ble.w	4031e2 <__svfiscanf_r+0x3e6>
  4030d6:	4b8e      	ldr	r3, [pc, #568]	; (403310 <__svfiscanf_r+0x514>)
  4030d8:	9306      	str	r3, [sp, #24]
  4030da:	230a      	movs	r3, #10
  4030dc:	9303      	str	r3, [sp, #12]
  4030de:	2603      	movs	r6, #3
  4030e0:	e78d      	b.n	402ffe <__svfiscanf_r+0x202>
  4030e2:	f8db 3004 	ldr.w	r3, [fp, #4]
  4030e6:	9202      	str	r2, [sp, #8]
  4030e8:	2b00      	cmp	r3, #0
  4030ea:	f340 81d4 	ble.w	403496 <__svfiscanf_r+0x69a>
  4030ee:	2c00      	cmp	r4, #0
  4030f0:	bf08      	it	eq
  4030f2:	2401      	moveq	r4, #1
  4030f4:	f015 0301 	ands.w	r3, r5, #1
  4030f8:	f040 80ad 	bne.w	403256 <__svfiscanf_r+0x45a>
  4030fc:	06ea      	lsls	r2, r5, #27
  4030fe:	f140 818a 	bpl.w	403416 <__svfiscanf_r+0x61a>
  403102:	461d      	mov	r5, r3
  403104:	e009      	b.n	40311a <__svfiscanf_r+0x31e>
  403106:	4413      	add	r3, r2
  403108:	f8cb 3000 	str.w	r3, [fp]
  40310c:	4415      	add	r5, r2
  40310e:	1aa4      	subs	r4, r4, r2
  403110:	f001 faf8 	bl	404704 <__srefill_r>
  403114:	2800      	cmp	r0, #0
  403116:	f040 8175 	bne.w	403404 <__svfiscanf_r+0x608>
  40311a:	f8db 2004 	ldr.w	r2, [fp, #4]
  40311e:	f8db 3000 	ldr.w	r3, [fp]
  403122:	42a2      	cmp	r2, r4
  403124:	4659      	mov	r1, fp
  403126:	4638      	mov	r0, r7
  403128:	dbed      	blt.n	403106 <__svfiscanf_r+0x30a>
  40312a:	1b12      	subs	r2, r2, r4
  40312c:	4423      	add	r3, r4
  40312e:	f8cb 2004 	str.w	r2, [fp, #4]
  403132:	4425      	add	r5, r4
  403134:	f8cb 3000 	str.w	r3, [fp]
  403138:	9e02      	ldr	r6, [sp, #8]
  40313a:	44a9      	add	r9, r5
  40313c:	4632      	mov	r2, r6
  40313e:	e6a6      	b.n	402e8e <__svfiscanf_r+0x92>
  403140:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  403144:	4611      	mov	r1, r2
  403146:	4640      	mov	r0, r8
  403148:	f001 fb66 	bl	404818 <__sccl>
  40314c:	f8db 3004 	ldr.w	r3, [fp, #4]
  403150:	2b00      	cmp	r3, #0
  403152:	4606      	mov	r6, r0
  403154:	f340 81ca 	ble.w	4034ec <__svfiscanf_r+0x6f0>
  403158:	2c00      	cmp	r4, #0
  40315a:	f8db 1000 	ldr.w	r1, [fp]
  40315e:	bf08      	it	eq
  403160:	f04f 34ff 	moveq.w	r4, #4294967295
  403164:	06eb      	lsls	r3, r5, #27
  403166:	7808      	ldrb	r0, [r1, #0]
  403168:	f140 80c4 	bpl.w	4032f4 <__svfiscanf_r+0x4f8>
  40316c:	9402      	str	r4, [sp, #8]
  40316e:	2500      	movs	r5, #0
  403170:	e000      	b.n	403174 <__svfiscanf_r+0x378>
  403172:	7808      	ldrb	r0, [r1, #0]
  403174:	f818 3000 	ldrb.w	r3, [r8, r0]
  403178:	3101      	adds	r1, #1
  40317a:	2b00      	cmp	r3, #0
  40317c:	f000 8146 	beq.w	40340c <__svfiscanf_r+0x610>
  403180:	f8db 3004 	ldr.w	r3, [fp, #4]
  403184:	f8cb 1000 	str.w	r1, [fp]
  403188:	3501      	adds	r5, #1
  40318a:	3b01      	subs	r3, #1
  40318c:	42a5      	cmp	r5, r4
  40318e:	f8cb 3004 	str.w	r3, [fp, #4]
  403192:	f000 8110 	beq.w	4033b6 <__svfiscanf_r+0x5ba>
  403196:	2b00      	cmp	r3, #0
  403198:	dceb      	bgt.n	403172 <__svfiscanf_r+0x376>
  40319a:	4659      	mov	r1, fp
  40319c:	4638      	mov	r0, r7
  40319e:	f001 fab1 	bl	404704 <__srefill_r>
  4031a2:	2800      	cmp	r0, #0
  4031a4:	f040 8106 	bne.w	4033b4 <__svfiscanf_r+0x5b8>
  4031a8:	f8db 1000 	ldr.w	r1, [fp]
  4031ac:	e7e1      	b.n	403172 <__svfiscanf_r+0x376>
  4031ae:	f8db 3004 	ldr.w	r3, [fp, #4]
  4031b2:	9202      	str	r2, [sp, #8]
  4031b4:	2b00      	cmp	r3, #0
  4031b6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  4031ba:	f73f af56 	bgt.w	40306a <__svfiscanf_r+0x26e>
  4031be:	4659      	mov	r1, fp
  4031c0:	4638      	mov	r0, r7
  4031c2:	f001 fa9f 	bl	404704 <__srefill_r>
  4031c6:	2800      	cmp	r0, #0
  4031c8:	f040 80c8 	bne.w	40335c <__svfiscanf_r+0x560>
  4031cc:	f8da c000 	ldr.w	ip, [sl]
  4031d0:	e74b      	b.n	40306a <__svfiscanf_r+0x26e>
  4031d2:	f8db 3004 	ldr.w	r3, [fp, #4]
  4031d6:	9202      	str	r2, [sp, #8]
  4031d8:	2b00      	cmp	r3, #0
  4031da:	f045 0501 	orr.w	r5, r5, #1
  4031de:	f73f af7a 	bgt.w	4030d6 <__svfiscanf_r+0x2da>
  4031e2:	4659      	mov	r1, fp
  4031e4:	4638      	mov	r0, r7
  4031e6:	f001 fa8d 	bl	404704 <__srefill_r>
  4031ea:	2800      	cmp	r0, #0
  4031ec:	f040 80b6 	bne.w	40335c <__svfiscanf_r+0x560>
  4031f0:	f8da c000 	ldr.w	ip, [sl]
  4031f4:	e76f      	b.n	4030d6 <__svfiscanf_r+0x2da>
  4031f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4031fa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
  4031fe:	3c30      	subs	r4, #48	; 0x30
  403200:	7873      	ldrb	r3, [r6, #1]
  403202:	4616      	mov	r6, r2
  403204:	e652      	b.n	402eac <__svfiscanf_r+0xb0>
  403206:	7873      	ldrb	r3, [r6, #1]
  403208:	f045 0510 	orr.w	r5, r5, #16
  40320c:	4616      	mov	r6, r2
  40320e:	e64d      	b.n	402eac <__svfiscanf_r+0xb0>
  403210:	f8db 3004 	ldr.w	r3, [fp, #4]
  403214:	9202      	str	r2, [sp, #8]
  403216:	2b00      	cmp	r3, #0
  403218:	f045 0501 	orr.w	r5, r5, #1
  40321c:	f73f af31 	bgt.w	403082 <__svfiscanf_r+0x286>
  403220:	4659      	mov	r1, fp
  403222:	4638      	mov	r0, r7
  403224:	f001 fa6e 	bl	404704 <__srefill_r>
  403228:	2800      	cmp	r0, #0
  40322a:	f040 8097 	bne.w	40335c <__svfiscanf_r+0x560>
  40322e:	f8da c000 	ldr.w	ip, [sl]
  403232:	e726      	b.n	403082 <__svfiscanf_r+0x286>
  403234:	7873      	ldrb	r3, [r6, #1]
  403236:	f045 0502 	orr.w	r5, r5, #2
  40323a:	4616      	mov	r6, r2
  40323c:	e636      	b.n	402eac <__svfiscanf_r+0xb0>
  40323e:	f8db 3004 	ldr.w	r3, [fp, #4]
  403242:	9202      	str	r2, [sp, #8]
  403244:	2b00      	cmp	r3, #0
  403246:	f340 8143 	ble.w	4034d0 <__svfiscanf_r+0x6d4>
  40324a:	4b31      	ldr	r3, [pc, #196]	; (403310 <__svfiscanf_r+0x514>)
  40324c:	9306      	str	r3, [sp, #24]
  40324e:	2300      	movs	r3, #0
  403250:	9303      	str	r3, [sp, #12]
  403252:	2603      	movs	r6, #3
  403254:	e6d3      	b.n	402ffe <__svfiscanf_r+0x202>
  403256:	ab0c      	add	r3, sp, #48	; 0x30
  403258:	4618      	mov	r0, r3
  40325a:	2208      	movs	r2, #8
  40325c:	2100      	movs	r1, #0
  40325e:	9308      	str	r3, [sp, #32]
  403260:	f7fe faa6 	bl	4017b0 <memset>
  403264:	f015 0310 	ands.w	r3, r5, #16
  403268:	9309      	str	r3, [sp, #36]	; 0x24
  40326a:	f000 80ab 	beq.w	4033c4 <__svfiscanf_r+0x5c8>
  40326e:	2300      	movs	r3, #0
  403270:	9304      	str	r3, [sp, #16]
  403272:	2500      	movs	r5, #0
  403274:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  403278:	f001 f928 	bl	4044cc <__locale_mb_cur_max>
  40327c:	42a8      	cmp	r0, r5
  40327e:	d06d      	beq.n	40335c <__svfiscanf_r+0x560>
  403280:	e89b 000c 	ldmia.w	fp, {r2, r3}
  403284:	f812 0b01 	ldrb.w	r0, [r2], #1
  403288:	f8cb 2000 	str.w	r2, [fp]
  40328c:	3b01      	subs	r3, #1
  40328e:	9a08      	ldr	r2, [sp, #32]
  403290:	9200      	str	r2, [sp, #0]
  403292:	1c6e      	adds	r6, r5, #1
  403294:	f8cb 3004 	str.w	r3, [fp, #4]
  403298:	9904      	ldr	r1, [sp, #16]
  40329a:	f808 0005 	strb.w	r0, [r8, r5]
  40329e:	4633      	mov	r3, r6
  4032a0:	4642      	mov	r2, r8
  4032a2:	4638      	mov	r0, r7
  4032a4:	f001 f98c 	bl	4045c0 <_mbrtowc_r>
  4032a8:	1c41      	adds	r1, r0, #1
  4032aa:	d057      	beq.n	40335c <__svfiscanf_r+0x560>
  4032ac:	2800      	cmp	r0, #0
  4032ae:	f040 8090 	bne.w	4033d2 <__svfiscanf_r+0x5d6>
  4032b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4032b4:	2b00      	cmp	r3, #0
  4032b6:	f040 809b 	bne.w	4033f0 <__svfiscanf_r+0x5f4>
  4032ba:	9a04      	ldr	r2, [sp, #16]
  4032bc:	44b1      	add	r9, r6
  4032be:	6013      	str	r3, [r2, #0]
  4032c0:	3c01      	subs	r4, #1
  4032c2:	9b04      	ldr	r3, [sp, #16]
  4032c4:	3304      	adds	r3, #4
  4032c6:	9304      	str	r3, [sp, #16]
  4032c8:	f8db 3004 	ldr.w	r3, [fp, #4]
  4032cc:	2b00      	cmp	r3, #0
  4032ce:	f04f 0500 	mov.w	r5, #0
  4032d2:	dc73      	bgt.n	4033bc <__svfiscanf_r+0x5c0>
  4032d4:	4659      	mov	r1, fp
  4032d6:	4638      	mov	r0, r7
  4032d8:	f001 fa14 	bl	404704 <__srefill_r>
  4032dc:	2800      	cmp	r0, #0
  4032de:	d06d      	beq.n	4033bc <__svfiscanf_r+0x5c0>
  4032e0:	2d00      	cmp	r5, #0
  4032e2:	d13b      	bne.n	40335c <__svfiscanf_r+0x560>
  4032e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4032e6:	b913      	cbnz	r3, 4032ee <__svfiscanf_r+0x4f2>
  4032e8:	9b07      	ldr	r3, [sp, #28]
  4032ea:	3301      	adds	r3, #1
  4032ec:	9307      	str	r3, [sp, #28]
  4032ee:	9e02      	ldr	r6, [sp, #8]
  4032f0:	4632      	mov	r2, r6
  4032f2:	e5cc      	b.n	402e8e <__svfiscanf_r+0x92>
  4032f4:	9a05      	ldr	r2, [sp, #20]
  4032f6:	6815      	ldr	r5, [r2, #0]
  4032f8:	9504      	str	r5, [sp, #16]
  4032fa:	4613      	mov	r3, r2
  4032fc:	3304      	adds	r3, #4
  4032fe:	192a      	adds	r2, r5, r4
  403300:	9302      	str	r3, [sp, #8]
  403302:	462c      	mov	r4, r5
  403304:	4603      	mov	r3, r0
  403306:	463d      	mov	r5, r7
  403308:	4617      	mov	r7, r2
  40330a:	e008      	b.n	40331e <__svfiscanf_r+0x522>
  40330c:	00404bed 	.word	0x00404bed
  403310:	00404915 	.word	0x00404915
  403314:	2000084c 	.word	0x2000084c
  403318:	f8db 1000 	ldr.w	r1, [fp]
  40331c:	780b      	ldrb	r3, [r1, #0]
  40331e:	f818 3003 	ldrb.w	r3, [r8, r3]
  403322:	1c48      	adds	r0, r1, #1
  403324:	2b00      	cmp	r3, #0
  403326:	d036      	beq.n	403396 <__svfiscanf_r+0x59a>
  403328:	f8db 3004 	ldr.w	r3, [fp, #4]
  40332c:	f8cb 0000 	str.w	r0, [fp]
  403330:	3b01      	subs	r3, #1
  403332:	f8cb 3004 	str.w	r3, [fp, #4]
  403336:	780b      	ldrb	r3, [r1, #0]
  403338:	f804 3b01 	strb.w	r3, [r4], #1
  40333c:	42a7      	cmp	r7, r4
  40333e:	d02a      	beq.n	403396 <__svfiscanf_r+0x59a>
  403340:	f8db 3004 	ldr.w	r3, [fp, #4]
  403344:	2b00      	cmp	r3, #0
  403346:	dce7      	bgt.n	403318 <__svfiscanf_r+0x51c>
  403348:	4659      	mov	r1, fp
  40334a:	4628      	mov	r0, r5
  40334c:	f001 f9da 	bl	404704 <__srefill_r>
  403350:	2800      	cmp	r0, #0
  403352:	d0e1      	beq.n	403318 <__svfiscanf_r+0x51c>
  403354:	462f      	mov	r7, r5
  403356:	9d04      	ldr	r5, [sp, #16]
  403358:	42a5      	cmp	r5, r4
  40335a:	d11e      	bne.n	40339a <__svfiscanf_r+0x59e>
  40335c:	9a07      	ldr	r2, [sp, #28]
  40335e:	2a00      	cmp	r2, #0
  403360:	f43f ae3d 	beq.w	402fde <__svfiscanf_r+0x1e2>
  403364:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403368:	f013 0f40 	tst.w	r3, #64	; 0x40
  40336c:	4613      	mov	r3, r2
  40336e:	bf18      	it	ne
  403370:	f04f 33ff 	movne.w	r3, #4294967295
  403374:	4618      	mov	r0, r3
  403376:	b059      	add	sp, #356	; 0x164
  403378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40337c:	4463      	add	r3, ip
  40337e:	9202      	str	r2, [sp, #8]
  403380:	785b      	ldrb	r3, [r3, #1]
  403382:	f003 0303 	and.w	r3, r3, #3
  403386:	2b01      	cmp	r3, #1
  403388:	f8db 3004 	ldr.w	r3, [fp, #4]
  40338c:	d064      	beq.n	403458 <__svfiscanf_r+0x65c>
  40338e:	2b00      	cmp	r3, #0
  403390:	f73f aea1 	bgt.w	4030d6 <__svfiscanf_r+0x2da>
  403394:	e725      	b.n	4031e2 <__svfiscanf_r+0x3e6>
  403396:	462f      	mov	r7, r5
  403398:	9d04      	ldr	r5, [sp, #16]
  40339a:	1b65      	subs	r5, r4, r5
  40339c:	f43f ad7d 	beq.w	402e9a <__svfiscanf_r+0x9e>
  4033a0:	9b07      	ldr	r3, [sp, #28]
  4033a2:	3301      	adds	r3, #1
  4033a4:	2200      	movs	r2, #0
  4033a6:	9307      	str	r3, [sp, #28]
  4033a8:	9b02      	ldr	r3, [sp, #8]
  4033aa:	9305      	str	r3, [sp, #20]
  4033ac:	7022      	strb	r2, [r4, #0]
  4033ae:	44a9      	add	r9, r5
  4033b0:	4632      	mov	r2, r6
  4033b2:	e56c      	b.n	402e8e <__svfiscanf_r+0x92>
  4033b4:	9502      	str	r5, [sp, #8]
  4033b6:	9d02      	ldr	r5, [sp, #8]
  4033b8:	44a9      	add	r9, r5
  4033ba:	e7f9      	b.n	4033b0 <__svfiscanf_r+0x5b4>
  4033bc:	2c00      	cmp	r4, #0
  4033be:	f47f af5b 	bne.w	403278 <__svfiscanf_r+0x47c>
  4033c2:	e78f      	b.n	4032e4 <__svfiscanf_r+0x4e8>
  4033c4:	9a05      	ldr	r2, [sp, #20]
  4033c6:	6813      	ldr	r3, [r2, #0]
  4033c8:	9304      	str	r3, [sp, #16]
  4033ca:	4613      	mov	r3, r2
  4033cc:	3304      	adds	r3, #4
  4033ce:	9305      	str	r3, [sp, #20]
  4033d0:	e74f      	b.n	403272 <__svfiscanf_r+0x476>
  4033d2:	3002      	adds	r0, #2
  4033d4:	d10f      	bne.n	4033f6 <__svfiscanf_r+0x5fa>
  4033d6:	f8db 3004 	ldr.w	r3, [fp, #4]
  4033da:	2b00      	cmp	r3, #0
  4033dc:	4635      	mov	r5, r6
  4033de:	f73f af4b 	bgt.w	403278 <__svfiscanf_r+0x47c>
  4033e2:	4659      	mov	r1, fp
  4033e4:	4638      	mov	r0, r7
  4033e6:	f001 f98d 	bl	404704 <__srefill_r>
  4033ea:	2800      	cmp	r0, #0
  4033ec:	d0e6      	beq.n	4033bc <__svfiscanf_r+0x5c0>
  4033ee:	e777      	b.n	4032e0 <__svfiscanf_r+0x4e4>
  4033f0:	44b1      	add	r9, r6
  4033f2:	3c01      	subs	r4, #1
  4033f4:	e768      	b.n	4032c8 <__svfiscanf_r+0x4cc>
  4033f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4033f8:	44b1      	add	r9, r6
  4033fa:	3c01      	subs	r4, #1
  4033fc:	2b00      	cmp	r3, #0
  4033fe:	f43f af60 	beq.w	4032c2 <__svfiscanf_r+0x4c6>
  403402:	e761      	b.n	4032c8 <__svfiscanf_r+0x4cc>
  403404:	2d00      	cmp	r5, #0
  403406:	f47f ae97 	bne.w	403138 <__svfiscanf_r+0x33c>
  40340a:	e7a7      	b.n	40335c <__svfiscanf_r+0x560>
  40340c:	2d00      	cmp	r5, #0
  40340e:	f43f ad44 	beq.w	402e9a <__svfiscanf_r+0x9e>
  403412:	44a9      	add	r9, r5
  403414:	e7cc      	b.n	4033b0 <__svfiscanf_r+0x5b4>
  403416:	9d05      	ldr	r5, [sp, #20]
  403418:	4623      	mov	r3, r4
  40341a:	6829      	ldr	r1, [r5, #0]
  40341c:	f8cd b000 	str.w	fp, [sp]
  403420:	2201      	movs	r2, #1
  403422:	4638      	mov	r0, r7
  403424:	f000 fc6a 	bl	403cfc <_fread_r>
  403428:	3504      	adds	r5, #4
  40342a:	2800      	cmp	r0, #0
  40342c:	d096      	beq.n	40335c <__svfiscanf_r+0x560>
  40342e:	9b07      	ldr	r3, [sp, #28]
  403430:	9e02      	ldr	r6, [sp, #8]
  403432:	9505      	str	r5, [sp, #20]
  403434:	3301      	adds	r3, #1
  403436:	4481      	add	r9, r0
  403438:	9307      	str	r3, [sp, #28]
  40343a:	4632      	mov	r2, r6
  40343c:	e527      	b.n	402e8e <__svfiscanf_r+0x92>
  40343e:	4659      	mov	r1, fp
  403440:	4638      	mov	r0, r7
  403442:	f001 f95f 	bl	404704 <__srefill_r>
  403446:	2800      	cmp	r0, #0
  403448:	f43f adb5 	beq.w	402fb6 <__svfiscanf_r+0x1ba>
  40344c:	e786      	b.n	40335c <__svfiscanf_r+0x560>
  40344e:	78b3      	ldrb	r3, [r6, #2]
  403450:	f045 0502 	orr.w	r5, r5, #2
  403454:	3602      	adds	r6, #2
  403456:	e529      	b.n	402eac <__svfiscanf_r+0xb0>
  403458:	2b00      	cmp	r3, #0
  40345a:	f045 0501 	orr.w	r5, r5, #1
  40345e:	f73f ae3a 	bgt.w	4030d6 <__svfiscanf_r+0x2da>
  403462:	e6be      	b.n	4031e2 <__svfiscanf_r+0x3e6>
  403464:	07ec      	lsls	r4, r5, #31
  403466:	d40c      	bmi.n	403482 <__svfiscanf_r+0x686>
  403468:	07a8      	lsls	r0, r5, #30
  40346a:	d50a      	bpl.n	403482 <__svfiscanf_r+0x686>
  40346c:	9805      	ldr	r0, [sp, #20]
  40346e:	9e02      	ldr	r6, [sp, #8]
  403470:	6801      	ldr	r1, [r0, #0]
  403472:	464a      	mov	r2, r9
  403474:	17d3      	asrs	r3, r2, #31
  403476:	3004      	adds	r0, #4
  403478:	e9c1 2300 	strd	r2, r3, [r1]
  40347c:	9005      	str	r0, [sp, #20]
  40347e:	4632      	mov	r2, r6
  403480:	e505      	b.n	402e8e <__svfiscanf_r+0x92>
  403482:	9a05      	ldr	r2, [sp, #20]
  403484:	9e02      	ldr	r6, [sp, #8]
  403486:	6813      	ldr	r3, [r2, #0]
  403488:	f8c3 9000 	str.w	r9, [r3]
  40348c:	4613      	mov	r3, r2
  40348e:	3304      	adds	r3, #4
  403490:	9305      	str	r3, [sp, #20]
  403492:	4632      	mov	r2, r6
  403494:	e4fb      	b.n	402e8e <__svfiscanf_r+0x92>
  403496:	4659      	mov	r1, fp
  403498:	4638      	mov	r0, r7
  40349a:	f001 f933 	bl	404704 <__srefill_r>
  40349e:	2800      	cmp	r0, #0
  4034a0:	f43f ae25 	beq.w	4030ee <__svfiscanf_r+0x2f2>
  4034a4:	e75a      	b.n	40335c <__svfiscanf_r+0x560>
  4034a6:	4659      	mov	r1, fp
  4034a8:	4638      	mov	r0, r7
  4034aa:	f001 f92b 	bl	404704 <__srefill_r>
  4034ae:	2800      	cmp	r0, #0
  4034b0:	f47f af54 	bne.w	40335c <__svfiscanf_r+0x560>
  4034b4:	f8da c000 	ldr.w	ip, [sl]
  4034b8:	e59c      	b.n	402ff4 <__svfiscanf_r+0x1f8>
  4034ba:	4659      	mov	r1, fp
  4034bc:	4638      	mov	r0, r7
  4034be:	f001 f921 	bl	404704 <__srefill_r>
  4034c2:	2800      	cmp	r0, #0
  4034c4:	f47f af4a 	bne.w	40335c <__svfiscanf_r+0x560>
  4034c8:	f8da c000 	ldr.w	ip, [sl]
  4034cc:	2602      	movs	r6, #2
  4034ce:	e596      	b.n	402ffe <__svfiscanf_r+0x202>
  4034d0:	4659      	mov	r1, fp
  4034d2:	4638      	mov	r0, r7
  4034d4:	f001 f916 	bl	404704 <__srefill_r>
  4034d8:	2800      	cmp	r0, #0
  4034da:	f47f af3f 	bne.w	40335c <__svfiscanf_r+0x560>
  4034de:	4b8b      	ldr	r3, [pc, #556]	; (40370c <__svfiscanf_r+0x910>)
  4034e0:	9003      	str	r0, [sp, #12]
  4034e2:	f8da c000 	ldr.w	ip, [sl]
  4034e6:	9306      	str	r3, [sp, #24]
  4034e8:	2603      	movs	r6, #3
  4034ea:	e588      	b.n	402ffe <__svfiscanf_r+0x202>
  4034ec:	4659      	mov	r1, fp
  4034ee:	4638      	mov	r0, r7
  4034f0:	f001 f908 	bl	404704 <__srefill_r>
  4034f4:	2800      	cmp	r0, #0
  4034f6:	f43f ae2f 	beq.w	403158 <__svfiscanf_r+0x35c>
  4034fa:	e72f      	b.n	40335c <__svfiscanf_r+0x560>
  4034fc:	2e03      	cmp	r6, #3
  4034fe:	f040 8098 	bne.w	403632 <__svfiscanf_r+0x836>
  403502:	1e62      	subs	r2, r4, #1
  403504:	2a26      	cmp	r2, #38	; 0x26
  403506:	bf98      	it	ls
  403508:	460a      	movls	r2, r1
  40350a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  40350e:	f04f 0100 	mov.w	r1, #0
  403512:	4618      	mov	r0, r3
  403514:	464b      	mov	r3, r9
  403516:	46b9      	mov	r9, r7
  403518:	9f03      	ldr	r7, [sp, #12]
  40351a:	9104      	str	r1, [sp, #16]
  40351c:	bf88      	it	hi
  40351e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
  403522:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
  403526:	bf88      	it	hi
  403528:	2427      	movhi	r4, #39	; 0x27
  40352a:	4646      	mov	r6, r8
  40352c:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
  403530:	294d      	cmp	r1, #77	; 0x4d
  403532:	d850      	bhi.n	4035d6 <__svfiscanf_r+0x7da>
  403534:	e8df f001 	tbb	[pc, r1]
  403538:	4f784f78 	.word	0x4f784f78
  40353c:	7272664f 	.word	0x7272664f
  403540:	72727272 	.word	0x72727272
  403544:	4f4a4a72 	.word	0x4f4a4a72
  403548:	4f4f4f4f 	.word	0x4f4f4f4f
  40354c:	45454f4f 	.word	0x45454f4f
  403550:	45454545 	.word	0x45454545
  403554:	4f4f4f4f 	.word	0x4f4f4f4f
  403558:	4f4f4f4f 	.word	0x4f4f4f4f
  40355c:	4f4f4f4f 	.word	0x4f4f4f4f
  403560:	4f4f4f4f 	.word	0x4f4f4f4f
  403564:	4f4f274f 	.word	0x4f4f274f
  403568:	4f4f4f4f 	.word	0x4f4f4f4f
  40356c:	45454f4f 	.word	0x45454f4f
  403570:	45454545 	.word	0x45454545
  403574:	4f4f4f4f 	.word	0x4f4f4f4f
  403578:	4f4f4f4f 	.word	0x4f4f4f4f
  40357c:	4f4f4f4f 	.word	0x4f4f4f4f
  403580:	4f4f4f4f 	.word	0x4f4f4f4f
  403584:	274f      	.short	0x274f
  403586:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
  40358a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40358e:	d122      	bne.n	4035d6 <__svfiscanf_r+0x7da>
  403590:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  403594:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
  403598:	2710      	movs	r7, #16
  40359a:	f886 e000 	strb.w	lr, [r6]
  40359e:	3601      	adds	r6, #1
  4035a0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4035a4:	3901      	subs	r1, #1
  4035a6:	2900      	cmp	r1, #0
  4035a8:	f8cb 1004 	str.w	r1, [fp, #4]
  4035ac:	dd6e      	ble.n	40368c <__svfiscanf_r+0x890>
  4035ae:	3001      	adds	r0, #1
  4035b0:	f8cb 0000 	str.w	r0, [fp]
  4035b4:	3c01      	subs	r4, #1
  4035b6:	d00e      	beq.n	4035d6 <__svfiscanf_r+0x7da>
  4035b8:	f8db 0000 	ldr.w	r0, [fp]
  4035bc:	f890 e000 	ldrb.w	lr, [r0]
  4035c0:	e7b4      	b.n	40352c <__svfiscanf_r+0x730>
  4035c2:	2f0a      	cmp	r7, #10
  4035c4:	dd07      	ble.n	4035d6 <__svfiscanf_r+0x7da>
  4035c6:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  4035ca:	e7e6      	b.n	40359a <__svfiscanf_r+0x79e>
  4035cc:	4950      	ldr	r1, [pc, #320]	; (403710 <__svfiscanf_r+0x914>)
  4035ce:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  4035d2:	2f08      	cmp	r7, #8
  4035d4:	dcf7      	bgt.n	4035c6 <__svfiscanf_r+0x7ca>
  4035d6:	05e8      	lsls	r0, r5, #23
  4035d8:	9703      	str	r7, [sp, #12]
  4035da:	464f      	mov	r7, r9
  4035dc:	4699      	mov	r9, r3
  4035de:	d505      	bpl.n	4035ec <__svfiscanf_r+0x7f0>
  4035e0:	4546      	cmp	r6, r8
  4035e2:	f200 80e0 	bhi.w	4037a6 <__svfiscanf_r+0x9aa>
  4035e6:	4546      	cmp	r6, r8
  4035e8:	f43f ac57 	beq.w	402e9a <__svfiscanf_r+0x9e>
  4035ec:	f015 0410 	ands.w	r4, r5, #16
  4035f0:	f000 80b3 	beq.w	40375a <__svfiscanf_r+0x95e>
  4035f4:	9b04      	ldr	r3, [sp, #16]
  4035f6:	ebc8 0606 	rsb	r6, r8, r6
  4035fa:	441e      	add	r6, r3
  4035fc:	44b1      	add	r9, r6
  4035fe:	9e02      	ldr	r6, [sp, #8]
  403600:	4632      	mov	r2, r6
  403602:	e444      	b.n	402e8e <__svfiscanf_r+0x92>
  403604:	0529      	lsls	r1, r5, #20
  403606:	d5c8      	bpl.n	40359a <__svfiscanf_r+0x79e>
  403608:	b917      	cbnz	r7, 403610 <__svfiscanf_r+0x814>
  40360a:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  40360e:	2708      	movs	r7, #8
  403610:	0569      	lsls	r1, r5, #21
  403612:	f140 80b6 	bpl.w	403782 <__svfiscanf_r+0x986>
  403616:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
  40361a:	e7be      	b.n	40359a <__svfiscanf_r+0x79e>
  40361c:	493c      	ldr	r1, [pc, #240]	; (403710 <__svfiscanf_r+0x914>)
  40361e:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  403622:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  403626:	e7b8      	b.n	40359a <__svfiscanf_r+0x79e>
  403628:	0629      	lsls	r1, r5, #24
  40362a:	d5d4      	bpl.n	4035d6 <__svfiscanf_r+0x7da>
  40362c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  403630:	e7b3      	b.n	40359a <__svfiscanf_r+0x79e>
  403632:	2c00      	cmp	r4, #0
  403634:	bf08      	it	eq
  403636:	f04f 34ff 	moveq.w	r4, #4294967295
  40363a:	f015 0201 	ands.w	r2, r5, #1
  40363e:	d169      	bne.n	403714 <__svfiscanf_r+0x918>
  403640:	06e9      	lsls	r1, r5, #27
  403642:	d52e      	bpl.n	4036a2 <__svfiscanf_r+0x8a6>
  403644:	4615      	mov	r5, r2
  403646:	4661      	mov	r1, ip
  403648:	e002      	b.n	403650 <__svfiscanf_r+0x854>
  40364a:	781a      	ldrb	r2, [r3, #0]
  40364c:	440a      	add	r2, r1
  40364e:	7850      	ldrb	r0, [r2, #1]
  403650:	0706      	lsls	r6, r0, #28
  403652:	f103 0301 	add.w	r3, r3, #1
  403656:	f53f ad6f 	bmi.w	403138 <__svfiscanf_r+0x33c>
  40365a:	f8db 2004 	ldr.w	r2, [fp, #4]
  40365e:	f8cb 3000 	str.w	r3, [fp]
  403662:	3501      	adds	r5, #1
  403664:	3a01      	subs	r2, #1
  403666:	42ac      	cmp	r4, r5
  403668:	f8cb 2004 	str.w	r2, [fp, #4]
  40366c:	f43f ad64 	beq.w	403138 <__svfiscanf_r+0x33c>
  403670:	2a00      	cmp	r2, #0
  403672:	dcea      	bgt.n	40364a <__svfiscanf_r+0x84e>
  403674:	4659      	mov	r1, fp
  403676:	4638      	mov	r0, r7
  403678:	f001 f844 	bl	404704 <__srefill_r>
  40367c:	2800      	cmp	r0, #0
  40367e:	f47f ad5b 	bne.w	403138 <__svfiscanf_r+0x33c>
  403682:	f8da 1000 	ldr.w	r1, [sl]
  403686:	f8db 3000 	ldr.w	r3, [fp]
  40368a:	e7de      	b.n	40364a <__svfiscanf_r+0x84e>
  40368c:	4659      	mov	r1, fp
  40368e:	4648      	mov	r0, r9
  403690:	9208      	str	r2, [sp, #32]
  403692:	9303      	str	r3, [sp, #12]
  403694:	f001 f836 	bl	404704 <__srefill_r>
  403698:	9b03      	ldr	r3, [sp, #12]
  40369a:	9a08      	ldr	r2, [sp, #32]
  40369c:	2800      	cmp	r0, #0
  40369e:	d089      	beq.n	4035b4 <__svfiscanf_r+0x7b8>
  4036a0:	e799      	b.n	4035d6 <__svfiscanf_r+0x7da>
  4036a2:	9905      	ldr	r1, [sp, #20]
  4036a4:	680e      	ldr	r6, [r1, #0]
  4036a6:	1d0d      	adds	r5, r1, #4
  4036a8:	4434      	add	r4, r6
  4036aa:	46b0      	mov	r8, r6
  4036ac:	e006      	b.n	4036bc <__svfiscanf_r+0x8c0>
  4036ae:	f8db 3000 	ldr.w	r3, [fp]
  4036b2:	f8da 2000 	ldr.w	r2, [sl]
  4036b6:	7819      	ldrb	r1, [r3, #0]
  4036b8:	440a      	add	r2, r1
  4036ba:	7850      	ldrb	r0, [r2, #1]
  4036bc:	0700      	lsls	r0, r0, #28
  4036be:	f103 0101 	add.w	r1, r3, #1
  4036c2:	d415      	bmi.n	4036f0 <__svfiscanf_r+0x8f4>
  4036c4:	f8db 2004 	ldr.w	r2, [fp, #4]
  4036c8:	f8cb 1000 	str.w	r1, [fp]
  4036cc:	3a01      	subs	r2, #1
  4036ce:	f8cb 2004 	str.w	r2, [fp, #4]
  4036d2:	781b      	ldrb	r3, [r3, #0]
  4036d4:	f808 3b01 	strb.w	r3, [r8], #1
  4036d8:	4544      	cmp	r4, r8
  4036da:	d009      	beq.n	4036f0 <__svfiscanf_r+0x8f4>
  4036dc:	f8db 3004 	ldr.w	r3, [fp, #4]
  4036e0:	2b00      	cmp	r3, #0
  4036e2:	dce4      	bgt.n	4036ae <__svfiscanf_r+0x8b2>
  4036e4:	4659      	mov	r1, fp
  4036e6:	4638      	mov	r0, r7
  4036e8:	f001 f80c 	bl	404704 <__srefill_r>
  4036ec:	2800      	cmp	r0, #0
  4036ee:	d0de      	beq.n	4036ae <__svfiscanf_r+0x8b2>
  4036f0:	ebc6 0608 	rsb	r6, r6, r8
  4036f4:	9a07      	ldr	r2, [sp, #28]
  4036f6:	9505      	str	r5, [sp, #20]
  4036f8:	44b1      	add	r9, r6
  4036fa:	9e02      	ldr	r6, [sp, #8]
  4036fc:	3201      	adds	r2, #1
  4036fe:	2300      	movs	r3, #0
  403700:	9207      	str	r2, [sp, #28]
  403702:	f888 3000 	strb.w	r3, [r8]
  403706:	4632      	mov	r2, r6
  403708:	f7ff bbc1 	b.w	402e8e <__svfiscanf_r+0x92>
  40370c:	00404915 	.word	0x00404915
  403710:	004057e0 	.word	0x004057e0
  403714:	ab0c      	add	r3, sp, #48	; 0x30
  403716:	4618      	mov	r0, r3
  403718:	2208      	movs	r2, #8
  40371a:	9308      	str	r3, [sp, #32]
  40371c:	f7fe f848 	bl	4017b0 <memset>
  403720:	f015 0310 	ands.w	r3, r5, #16
  403724:	9304      	str	r3, [sp, #16]
  403726:	d13b      	bne.n	4037a0 <__svfiscanf_r+0x9a4>
  403728:	9a05      	ldr	r2, [sp, #20]
  40372a:	4613      	mov	r3, r2
  40372c:	3304      	adds	r3, #4
  40372e:	f8d2 8000 	ldr.w	r8, [r2]
  403732:	9305      	str	r3, [sp, #20]
  403734:	2600      	movs	r6, #0
  403736:	f8db 3000 	ldr.w	r3, [fp]
  40373a:	f8da 2000 	ldr.w	r2, [sl]
  40373e:	781b      	ldrb	r3, [r3, #0]
  403740:	4413      	add	r3, r2
  403742:	785b      	ldrb	r3, [r3, #1]
  403744:	0718      	lsls	r0, r3, #28
  403746:	d401      	bmi.n	40374c <__svfiscanf_r+0x950>
  403748:	2c00      	cmp	r4, #0
  40374a:	d149      	bne.n	4037e0 <__svfiscanf_r+0x9e4>
  40374c:	9b04      	ldr	r3, [sp, #16]
  40374e:	2b00      	cmp	r3, #0
  403750:	f47f adcd 	bne.w	4032ee <__svfiscanf_r+0x4f2>
  403754:	f8c8 3000 	str.w	r3, [r8]
  403758:	e5c6      	b.n	4032e8 <__svfiscanf_r+0x4ec>
  40375a:	4622      	mov	r2, r4
  40375c:	4641      	mov	r1, r8
  40375e:	7034      	strb	r4, [r6, #0]
  403760:	9b03      	ldr	r3, [sp, #12]
  403762:	9c06      	ldr	r4, [sp, #24]
  403764:	4638      	mov	r0, r7
  403766:	47a0      	blx	r4
  403768:	06a9      	lsls	r1, r5, #26
  40376a:	d413      	bmi.n	403794 <__svfiscanf_r+0x998>
  40376c:	076a      	lsls	r2, r5, #29
  40376e:	d522      	bpl.n	4037b6 <__svfiscanf_r+0x9ba>
  403770:	9a05      	ldr	r2, [sp, #20]
  403772:	6813      	ldr	r3, [r2, #0]
  403774:	3204      	adds	r2, #4
  403776:	9205      	str	r2, [sp, #20]
  403778:	8018      	strh	r0, [r3, #0]
  40377a:	9b07      	ldr	r3, [sp, #28]
  40377c:	3301      	adds	r3, #1
  40377e:	9307      	str	r3, [sp, #28]
  403780:	e738      	b.n	4035f4 <__svfiscanf_r+0x7f8>
  403782:	f425 7560 	bic.w	r5, r5, #896	; 0x380
  403786:	b10a      	cbz	r2, 40378c <__svfiscanf_r+0x990>
  403788:	3a01      	subs	r2, #1
  40378a:	3401      	adds	r4, #1
  40378c:	9904      	ldr	r1, [sp, #16]
  40378e:	3101      	adds	r1, #1
  403790:	9104      	str	r1, [sp, #16]
  403792:	e705      	b.n	4035a0 <__svfiscanf_r+0x7a4>
  403794:	9a05      	ldr	r2, [sp, #20]
  403796:	6813      	ldr	r3, [r2, #0]
  403798:	3204      	adds	r2, #4
  40379a:	9205      	str	r2, [sp, #20]
  40379c:	6018      	str	r0, [r3, #0]
  40379e:	e7ec      	b.n	40377a <__svfiscanf_r+0x97e>
  4037a0:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
  4037a4:	e7c6      	b.n	403734 <__svfiscanf_r+0x938>
  4037a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
  4037aa:	465a      	mov	r2, fp
  4037ac:	4638      	mov	r0, r7
  4037ae:	f001 fbd7 	bl	404f60 <_ungetc_r>
  4037b2:	3e01      	subs	r6, #1
  4037b4:	e717      	b.n	4035e6 <__svfiscanf_r+0x7ea>
  4037b6:	f015 0201 	ands.w	r2, r5, #1
  4037ba:	d1eb      	bne.n	403794 <__svfiscanf_r+0x998>
  4037bc:	07ab      	lsls	r3, r5, #30
  4037be:	d5e9      	bpl.n	403794 <__svfiscanf_r+0x998>
  4037c0:	4b30      	ldr	r3, [pc, #192]	; (403884 <__svfiscanf_r+0xa88>)
  4037c2:	9906      	ldr	r1, [sp, #24]
  4037c4:	4299      	cmp	r1, r3
  4037c6:	4638      	mov	r0, r7
  4037c8:	9b03      	ldr	r3, [sp, #12]
  4037ca:	4641      	mov	r1, r8
  4037cc:	d053      	beq.n	403876 <__svfiscanf_r+0xa7a>
  4037ce:	f001 f935 	bl	404a3c <_strtoll_r>
  4037d2:	9a05      	ldr	r2, [sp, #20]
  4037d4:	6813      	ldr	r3, [r2, #0]
  4037d6:	3204      	adds	r2, #4
  4037d8:	9205      	str	r2, [sp, #20]
  4037da:	e9c3 0100 	strd	r0, r1, [r3]
  4037de:	e7cc      	b.n	40377a <__svfiscanf_r+0x97e>
  4037e0:	f000 fe74 	bl	4044cc <__locale_mb_cur_max>
  4037e4:	4286      	cmp	r6, r0
  4037e6:	f43f adb9 	beq.w	40335c <__svfiscanf_r+0x560>
  4037ea:	e89b 000c 	ldmia.w	fp, {r2, r3}
  4037ee:	f812 0b01 	ldrb.w	r0, [r2], #1
  4037f2:	f8cb 2000 	str.w	r2, [fp]
  4037f6:	9a08      	ldr	r2, [sp, #32]
  4037f8:	9200      	str	r2, [sp, #0]
  4037fa:	aa0e      	add	r2, sp, #56	; 0x38
  4037fc:	1c75      	adds	r5, r6, #1
  4037fe:	3b01      	subs	r3, #1
  403800:	5590      	strb	r0, [r2, r6]
  403802:	f8cb 3004 	str.w	r3, [fp, #4]
  403806:	4641      	mov	r1, r8
  403808:	462b      	mov	r3, r5
  40380a:	4638      	mov	r0, r7
  40380c:	f000 fed8 	bl	4045c0 <_mbrtowc_r>
  403810:	1c46      	adds	r6, r0, #1
  403812:	f43f ada3 	beq.w	40335c <__svfiscanf_r+0x560>
  403816:	b188      	cbz	r0, 40383c <__svfiscanf_r+0xa40>
  403818:	3002      	adds	r0, #2
  40381a:	bf08      	it	eq
  40381c:	462e      	moveq	r6, r5
  40381e:	d12d      	bne.n	40387c <__svfiscanf_r+0xa80>
  403820:	f8db 3004 	ldr.w	r3, [fp, #4]
  403824:	2b00      	cmp	r3, #0
  403826:	dc86      	bgt.n	403736 <__svfiscanf_r+0x93a>
  403828:	4659      	mov	r1, fp
  40382a:	4638      	mov	r0, r7
  40382c:	f000 ff6a 	bl	404704 <__srefill_r>
  403830:	2800      	cmp	r0, #0
  403832:	d080      	beq.n	403736 <__svfiscanf_r+0x93a>
  403834:	2e00      	cmp	r6, #0
  403836:	f47f ad91 	bne.w	40335c <__svfiscanf_r+0x560>
  40383a:	e787      	b.n	40374c <__svfiscanf_r+0x950>
  40383c:	f8c8 0000 	str.w	r0, [r8]
  403840:	f000 fe32 	bl	4044a8 <iswspace>
  403844:	b168      	cbz	r0, 403862 <__svfiscanf_r+0xa66>
  403846:	2d00      	cmp	r5, #0
  403848:	d080      	beq.n	40374c <__svfiscanf_r+0x950>
  40384a:	ab0e      	add	r3, sp, #56	; 0x38
  40384c:	195c      	adds	r4, r3, r5
  40384e:	3d01      	subs	r5, #1
  403850:	465a      	mov	r2, fp
  403852:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  403856:	4638      	mov	r0, r7
  403858:	f001 fb82 	bl	404f60 <_ungetc_r>
  40385c:	2d00      	cmp	r5, #0
  40385e:	d1f6      	bne.n	40384e <__svfiscanf_r+0xa52>
  403860:	e774      	b.n	40374c <__svfiscanf_r+0x950>
  403862:	9b04      	ldr	r3, [sp, #16]
  403864:	44a9      	add	r9, r5
  403866:	3c01      	subs	r4, #1
  403868:	b91b      	cbnz	r3, 403872 <__svfiscanf_r+0xa76>
  40386a:	f108 0804 	add.w	r8, r8, #4
  40386e:	461e      	mov	r6, r3
  403870:	e7d6      	b.n	403820 <__svfiscanf_r+0xa24>
  403872:	4606      	mov	r6, r0
  403874:	e7d4      	b.n	403820 <__svfiscanf_r+0xa24>
  403876:	f001 fa53 	bl	404d20 <_strtoull_r>
  40387a:	e7aa      	b.n	4037d2 <__svfiscanf_r+0x9d6>
  40387c:	f8d8 0000 	ldr.w	r0, [r8]
  403880:	e7de      	b.n	403840 <__svfiscanf_r+0xa44>
  403882:	bf00      	nop
  403884:	00404bed 	.word	0x00404bed

00403888 <__swsetup_r>:
  403888:	b538      	push	{r3, r4, r5, lr}
  40388a:	4b30      	ldr	r3, [pc, #192]	; (40394c <__swsetup_r+0xc4>)
  40388c:	681b      	ldr	r3, [r3, #0]
  40388e:	4605      	mov	r5, r0
  403890:	460c      	mov	r4, r1
  403892:	b113      	cbz	r3, 40389a <__swsetup_r+0x12>
  403894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403896:	2a00      	cmp	r2, #0
  403898:	d038      	beq.n	40390c <__swsetup_r+0x84>
  40389a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40389e:	b293      	uxth	r3, r2
  4038a0:	0718      	lsls	r0, r3, #28
  4038a2:	d50c      	bpl.n	4038be <__swsetup_r+0x36>
  4038a4:	6920      	ldr	r0, [r4, #16]
  4038a6:	b1a8      	cbz	r0, 4038d4 <__swsetup_r+0x4c>
  4038a8:	f013 0201 	ands.w	r2, r3, #1
  4038ac:	d01e      	beq.n	4038ec <__swsetup_r+0x64>
  4038ae:	6963      	ldr	r3, [r4, #20]
  4038b0:	2200      	movs	r2, #0
  4038b2:	425b      	negs	r3, r3
  4038b4:	61a3      	str	r3, [r4, #24]
  4038b6:	60a2      	str	r2, [r4, #8]
  4038b8:	b1f0      	cbz	r0, 4038f8 <__swsetup_r+0x70>
  4038ba:	2000      	movs	r0, #0
  4038bc:	bd38      	pop	{r3, r4, r5, pc}
  4038be:	06d9      	lsls	r1, r3, #27
  4038c0:	d53c      	bpl.n	40393c <__swsetup_r+0xb4>
  4038c2:	0758      	lsls	r0, r3, #29
  4038c4:	d426      	bmi.n	403914 <__swsetup_r+0x8c>
  4038c6:	6920      	ldr	r0, [r4, #16]
  4038c8:	f042 0308 	orr.w	r3, r2, #8
  4038cc:	81a3      	strh	r3, [r4, #12]
  4038ce:	b29b      	uxth	r3, r3
  4038d0:	2800      	cmp	r0, #0
  4038d2:	d1e9      	bne.n	4038a8 <__swsetup_r+0x20>
  4038d4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4038d8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4038dc:	d0e4      	beq.n	4038a8 <__swsetup_r+0x20>
  4038de:	4628      	mov	r0, r5
  4038e0:	4621      	mov	r1, r4
  4038e2:	f000 fe29 	bl	404538 <__smakebuf_r>
  4038e6:	89a3      	ldrh	r3, [r4, #12]
  4038e8:	6920      	ldr	r0, [r4, #16]
  4038ea:	e7dd      	b.n	4038a8 <__swsetup_r+0x20>
  4038ec:	0799      	lsls	r1, r3, #30
  4038ee:	bf58      	it	pl
  4038f0:	6962      	ldrpl	r2, [r4, #20]
  4038f2:	60a2      	str	r2, [r4, #8]
  4038f4:	2800      	cmp	r0, #0
  4038f6:	d1e0      	bne.n	4038ba <__swsetup_r+0x32>
  4038f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038fc:	061a      	lsls	r2, r3, #24
  4038fe:	d5dd      	bpl.n	4038bc <__swsetup_r+0x34>
  403900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403904:	81a3      	strh	r3, [r4, #12]
  403906:	f04f 30ff 	mov.w	r0, #4294967295
  40390a:	bd38      	pop	{r3, r4, r5, pc}
  40390c:	4618      	mov	r0, r3
  40390e:	f000 f979 	bl	403c04 <__sinit>
  403912:	e7c2      	b.n	40389a <__swsetup_r+0x12>
  403914:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403916:	b151      	cbz	r1, 40392e <__swsetup_r+0xa6>
  403918:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40391c:	4299      	cmp	r1, r3
  40391e:	d004      	beq.n	40392a <__swsetup_r+0xa2>
  403920:	4628      	mov	r0, r5
  403922:	f000 fb07 	bl	403f34 <_free_r>
  403926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40392a:	2300      	movs	r3, #0
  40392c:	6323      	str	r3, [r4, #48]	; 0x30
  40392e:	2300      	movs	r3, #0
  403930:	6920      	ldr	r0, [r4, #16]
  403932:	6063      	str	r3, [r4, #4]
  403934:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403938:	6020      	str	r0, [r4, #0]
  40393a:	e7c5      	b.n	4038c8 <__swsetup_r+0x40>
  40393c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403940:	2309      	movs	r3, #9
  403942:	602b      	str	r3, [r5, #0]
  403944:	f04f 30ff 	mov.w	r0, #4294967295
  403948:	81a2      	strh	r2, [r4, #12]
  40394a:	bd38      	pop	{r3, r4, r5, pc}
  40394c:	20000438 	.word	0x20000438

00403950 <register_fini>:
  403950:	4b02      	ldr	r3, [pc, #8]	; (40395c <register_fini+0xc>)
  403952:	b113      	cbz	r3, 40395a <register_fini+0xa>
  403954:	4802      	ldr	r0, [pc, #8]	; (403960 <register_fini+0x10>)
  403956:	f000 b805 	b.w	403964 <atexit>
  40395a:	4770      	bx	lr
  40395c:	00000000 	.word	0x00000000
  403960:	00403c19 	.word	0x00403c19

00403964 <atexit>:
  403964:	2300      	movs	r3, #0
  403966:	4601      	mov	r1, r0
  403968:	461a      	mov	r2, r3
  40396a:	4618      	mov	r0, r3
  40396c:	f001 bc0c 	b.w	405188 <__register_exitproc>

00403970 <__sflush_r>:
  403970:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403974:	b29a      	uxth	r2, r3
  403976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40397a:	460d      	mov	r5, r1
  40397c:	0711      	lsls	r1, r2, #28
  40397e:	4680      	mov	r8, r0
  403980:	d43c      	bmi.n	4039fc <__sflush_r+0x8c>
  403982:	686a      	ldr	r2, [r5, #4]
  403984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403988:	2a00      	cmp	r2, #0
  40398a:	81ab      	strh	r3, [r5, #12]
  40398c:	dd73      	ble.n	403a76 <__sflush_r+0x106>
  40398e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403990:	2c00      	cmp	r4, #0
  403992:	d04b      	beq.n	403a2c <__sflush_r+0xbc>
  403994:	b29b      	uxth	r3, r3
  403996:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40399a:	2100      	movs	r1, #0
  40399c:	b292      	uxth	r2, r2
  40399e:	f8d8 6000 	ldr.w	r6, [r8]
  4039a2:	f8c8 1000 	str.w	r1, [r8]
  4039a6:	2a00      	cmp	r2, #0
  4039a8:	d069      	beq.n	403a7e <__sflush_r+0x10e>
  4039aa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4039ac:	075f      	lsls	r7, r3, #29
  4039ae:	d505      	bpl.n	4039bc <__sflush_r+0x4c>
  4039b0:	6869      	ldr	r1, [r5, #4]
  4039b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4039b4:	1a52      	subs	r2, r2, r1
  4039b6:	b10b      	cbz	r3, 4039bc <__sflush_r+0x4c>
  4039b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4039ba:	1ad2      	subs	r2, r2, r3
  4039bc:	2300      	movs	r3, #0
  4039be:	69e9      	ldr	r1, [r5, #28]
  4039c0:	4640      	mov	r0, r8
  4039c2:	47a0      	blx	r4
  4039c4:	1c44      	adds	r4, r0, #1
  4039c6:	d03c      	beq.n	403a42 <__sflush_r+0xd2>
  4039c8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4039cc:	692a      	ldr	r2, [r5, #16]
  4039ce:	602a      	str	r2, [r5, #0]
  4039d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4039d4:	2200      	movs	r2, #0
  4039d6:	81ab      	strh	r3, [r5, #12]
  4039d8:	04db      	lsls	r3, r3, #19
  4039da:	606a      	str	r2, [r5, #4]
  4039dc:	d449      	bmi.n	403a72 <__sflush_r+0x102>
  4039de:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4039e0:	f8c8 6000 	str.w	r6, [r8]
  4039e4:	b311      	cbz	r1, 403a2c <__sflush_r+0xbc>
  4039e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4039ea:	4299      	cmp	r1, r3
  4039ec:	d002      	beq.n	4039f4 <__sflush_r+0x84>
  4039ee:	4640      	mov	r0, r8
  4039f0:	f000 faa0 	bl	403f34 <_free_r>
  4039f4:	2000      	movs	r0, #0
  4039f6:	6328      	str	r0, [r5, #48]	; 0x30
  4039f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039fc:	692e      	ldr	r6, [r5, #16]
  4039fe:	b1ae      	cbz	r6, 403a2c <__sflush_r+0xbc>
  403a00:	682c      	ldr	r4, [r5, #0]
  403a02:	602e      	str	r6, [r5, #0]
  403a04:	0790      	lsls	r0, r2, #30
  403a06:	bf0c      	ite	eq
  403a08:	696b      	ldreq	r3, [r5, #20]
  403a0a:	2300      	movne	r3, #0
  403a0c:	1ba4      	subs	r4, r4, r6
  403a0e:	60ab      	str	r3, [r5, #8]
  403a10:	e00a      	b.n	403a28 <__sflush_r+0xb8>
  403a12:	4623      	mov	r3, r4
  403a14:	4632      	mov	r2, r6
  403a16:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403a18:	69e9      	ldr	r1, [r5, #28]
  403a1a:	4640      	mov	r0, r8
  403a1c:	47b8      	blx	r7
  403a1e:	2800      	cmp	r0, #0
  403a20:	eba4 0400 	sub.w	r4, r4, r0
  403a24:	4406      	add	r6, r0
  403a26:	dd04      	ble.n	403a32 <__sflush_r+0xc2>
  403a28:	2c00      	cmp	r4, #0
  403a2a:	dcf2      	bgt.n	403a12 <__sflush_r+0xa2>
  403a2c:	2000      	movs	r0, #0
  403a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a32:	89ab      	ldrh	r3, [r5, #12]
  403a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a38:	81ab      	strh	r3, [r5, #12]
  403a3a:	f04f 30ff 	mov.w	r0, #4294967295
  403a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a42:	f8d8 2000 	ldr.w	r2, [r8]
  403a46:	2a1d      	cmp	r2, #29
  403a48:	d8f3      	bhi.n	403a32 <__sflush_r+0xc2>
  403a4a:	4b1a      	ldr	r3, [pc, #104]	; (403ab4 <__sflush_r+0x144>)
  403a4c:	40d3      	lsrs	r3, r2
  403a4e:	f003 0301 	and.w	r3, r3, #1
  403a52:	f083 0401 	eor.w	r4, r3, #1
  403a56:	2b00      	cmp	r3, #0
  403a58:	d0eb      	beq.n	403a32 <__sflush_r+0xc2>
  403a5a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403a5e:	6929      	ldr	r1, [r5, #16]
  403a60:	6029      	str	r1, [r5, #0]
  403a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403a66:	04d9      	lsls	r1, r3, #19
  403a68:	606c      	str	r4, [r5, #4]
  403a6a:	81ab      	strh	r3, [r5, #12]
  403a6c:	d5b7      	bpl.n	4039de <__sflush_r+0x6e>
  403a6e:	2a00      	cmp	r2, #0
  403a70:	d1b5      	bne.n	4039de <__sflush_r+0x6e>
  403a72:	6528      	str	r0, [r5, #80]	; 0x50
  403a74:	e7b3      	b.n	4039de <__sflush_r+0x6e>
  403a76:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403a78:	2a00      	cmp	r2, #0
  403a7a:	dc88      	bgt.n	40398e <__sflush_r+0x1e>
  403a7c:	e7d6      	b.n	403a2c <__sflush_r+0xbc>
  403a7e:	2301      	movs	r3, #1
  403a80:	69e9      	ldr	r1, [r5, #28]
  403a82:	4640      	mov	r0, r8
  403a84:	47a0      	blx	r4
  403a86:	1c43      	adds	r3, r0, #1
  403a88:	4602      	mov	r2, r0
  403a8a:	d002      	beq.n	403a92 <__sflush_r+0x122>
  403a8c:	89ab      	ldrh	r3, [r5, #12]
  403a8e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403a90:	e78c      	b.n	4039ac <__sflush_r+0x3c>
  403a92:	f8d8 3000 	ldr.w	r3, [r8]
  403a96:	2b00      	cmp	r3, #0
  403a98:	d0f8      	beq.n	403a8c <__sflush_r+0x11c>
  403a9a:	2b1d      	cmp	r3, #29
  403a9c:	d001      	beq.n	403aa2 <__sflush_r+0x132>
  403a9e:	2b16      	cmp	r3, #22
  403aa0:	d102      	bne.n	403aa8 <__sflush_r+0x138>
  403aa2:	f8c8 6000 	str.w	r6, [r8]
  403aa6:	e7c1      	b.n	403a2c <__sflush_r+0xbc>
  403aa8:	89ab      	ldrh	r3, [r5, #12]
  403aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403aae:	81ab      	strh	r3, [r5, #12]
  403ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ab4:	20400001 	.word	0x20400001

00403ab8 <_fflush_r>:
  403ab8:	b510      	push	{r4, lr}
  403aba:	4604      	mov	r4, r0
  403abc:	b082      	sub	sp, #8
  403abe:	b108      	cbz	r0, 403ac4 <_fflush_r+0xc>
  403ac0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ac2:	b153      	cbz	r3, 403ada <_fflush_r+0x22>
  403ac4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  403ac8:	b908      	cbnz	r0, 403ace <_fflush_r+0x16>
  403aca:	b002      	add	sp, #8
  403acc:	bd10      	pop	{r4, pc}
  403ace:	4620      	mov	r0, r4
  403ad0:	b002      	add	sp, #8
  403ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403ad6:	f7ff bf4b 	b.w	403970 <__sflush_r>
  403ada:	9101      	str	r1, [sp, #4]
  403adc:	f000 f892 	bl	403c04 <__sinit>
  403ae0:	9901      	ldr	r1, [sp, #4]
  403ae2:	e7ef      	b.n	403ac4 <_fflush_r+0xc>

00403ae4 <fflush>:
  403ae4:	b120      	cbz	r0, 403af0 <fflush+0xc>
  403ae6:	4b05      	ldr	r3, [pc, #20]	; (403afc <fflush+0x18>)
  403ae8:	4601      	mov	r1, r0
  403aea:	6818      	ldr	r0, [r3, #0]
  403aec:	f7ff bfe4 	b.w	403ab8 <_fflush_r>
  403af0:	4b03      	ldr	r3, [pc, #12]	; (403b00 <fflush+0x1c>)
  403af2:	4904      	ldr	r1, [pc, #16]	; (403b04 <fflush+0x20>)
  403af4:	6818      	ldr	r0, [r3, #0]
  403af6:	f000 bcad 	b.w	404454 <_fwalk_reent>
  403afa:	bf00      	nop
  403afc:	20000438 	.word	0x20000438
  403b00:	00405788 	.word	0x00405788
  403b04:	00403ab9 	.word	0x00403ab9

00403b08 <_cleanup_r>:
  403b08:	4901      	ldr	r1, [pc, #4]	; (403b10 <_cleanup_r+0x8>)
  403b0a:	f000 bca3 	b.w	404454 <_fwalk_reent>
  403b0e:	bf00      	nop
  403b10:	00405251 	.word	0x00405251

00403b14 <__sinit.part.1>:
  403b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b18:	4b35      	ldr	r3, [pc, #212]	; (403bf0 <__sinit.part.1+0xdc>)
  403b1a:	6845      	ldr	r5, [r0, #4]
  403b1c:	63c3      	str	r3, [r0, #60]	; 0x3c
  403b1e:	2400      	movs	r4, #0
  403b20:	4607      	mov	r7, r0
  403b22:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  403b26:	2304      	movs	r3, #4
  403b28:	2103      	movs	r1, #3
  403b2a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  403b2e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  403b32:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  403b36:	b083      	sub	sp, #12
  403b38:	602c      	str	r4, [r5, #0]
  403b3a:	606c      	str	r4, [r5, #4]
  403b3c:	60ac      	str	r4, [r5, #8]
  403b3e:	666c      	str	r4, [r5, #100]	; 0x64
  403b40:	81ec      	strh	r4, [r5, #14]
  403b42:	612c      	str	r4, [r5, #16]
  403b44:	616c      	str	r4, [r5, #20]
  403b46:	61ac      	str	r4, [r5, #24]
  403b48:	81ab      	strh	r3, [r5, #12]
  403b4a:	4621      	mov	r1, r4
  403b4c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403b50:	2208      	movs	r2, #8
  403b52:	f7fd fe2d 	bl	4017b0 <memset>
  403b56:	68be      	ldr	r6, [r7, #8]
  403b58:	f8df b098 	ldr.w	fp, [pc, #152]	; 403bf4 <__sinit.part.1+0xe0>
  403b5c:	f8df a098 	ldr.w	sl, [pc, #152]	; 403bf8 <__sinit.part.1+0xe4>
  403b60:	f8df 9098 	ldr.w	r9, [pc, #152]	; 403bfc <__sinit.part.1+0xe8>
  403b64:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403c00 <__sinit.part.1+0xec>
  403b68:	f8c5 b020 	str.w	fp, [r5, #32]
  403b6c:	2301      	movs	r3, #1
  403b6e:	2209      	movs	r2, #9
  403b70:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403b74:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403b78:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403b7c:	61ed      	str	r5, [r5, #28]
  403b7e:	4621      	mov	r1, r4
  403b80:	81f3      	strh	r3, [r6, #14]
  403b82:	81b2      	strh	r2, [r6, #12]
  403b84:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  403b88:	6034      	str	r4, [r6, #0]
  403b8a:	6074      	str	r4, [r6, #4]
  403b8c:	60b4      	str	r4, [r6, #8]
  403b8e:	6674      	str	r4, [r6, #100]	; 0x64
  403b90:	6134      	str	r4, [r6, #16]
  403b92:	6174      	str	r4, [r6, #20]
  403b94:	61b4      	str	r4, [r6, #24]
  403b96:	2208      	movs	r2, #8
  403b98:	9301      	str	r3, [sp, #4]
  403b9a:	f7fd fe09 	bl	4017b0 <memset>
  403b9e:	68fd      	ldr	r5, [r7, #12]
  403ba0:	61f6      	str	r6, [r6, #28]
  403ba2:	2012      	movs	r0, #18
  403ba4:	2202      	movs	r2, #2
  403ba6:	f8c6 b020 	str.w	fp, [r6, #32]
  403baa:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  403bae:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403bb2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  403bb6:	4621      	mov	r1, r4
  403bb8:	81a8      	strh	r0, [r5, #12]
  403bba:	81ea      	strh	r2, [r5, #14]
  403bbc:	602c      	str	r4, [r5, #0]
  403bbe:	606c      	str	r4, [r5, #4]
  403bc0:	60ac      	str	r4, [r5, #8]
  403bc2:	666c      	str	r4, [r5, #100]	; 0x64
  403bc4:	612c      	str	r4, [r5, #16]
  403bc6:	616c      	str	r4, [r5, #20]
  403bc8:	61ac      	str	r4, [r5, #24]
  403bca:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403bce:	2208      	movs	r2, #8
  403bd0:	f7fd fdee 	bl	4017b0 <memset>
  403bd4:	9b01      	ldr	r3, [sp, #4]
  403bd6:	61ed      	str	r5, [r5, #28]
  403bd8:	f8c5 b020 	str.w	fp, [r5, #32]
  403bdc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403be0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403be4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403be8:	63bb      	str	r3, [r7, #56]	; 0x38
  403bea:	b003      	add	sp, #12
  403bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bf0:	00403b09 	.word	0x00403b09
  403bf4:	0040488d 	.word	0x0040488d
  403bf8:	004048b1 	.word	0x004048b1
  403bfc:	004048ed 	.word	0x004048ed
  403c00:	0040490d 	.word	0x0040490d

00403c04 <__sinit>:
  403c04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c06:	b103      	cbz	r3, 403c0a <__sinit+0x6>
  403c08:	4770      	bx	lr
  403c0a:	f7ff bf83 	b.w	403b14 <__sinit.part.1>
  403c0e:	bf00      	nop

00403c10 <__sfp_lock_acquire>:
  403c10:	4770      	bx	lr
  403c12:	bf00      	nop

00403c14 <__sfp_lock_release>:
  403c14:	4770      	bx	lr
  403c16:	bf00      	nop

00403c18 <__libc_fini_array>:
  403c18:	b538      	push	{r3, r4, r5, lr}
  403c1a:	4d07      	ldr	r5, [pc, #28]	; (403c38 <__libc_fini_array+0x20>)
  403c1c:	4c07      	ldr	r4, [pc, #28]	; (403c3c <__libc_fini_array+0x24>)
  403c1e:	1b2c      	subs	r4, r5, r4
  403c20:	10a4      	asrs	r4, r4, #2
  403c22:	d005      	beq.n	403c30 <__libc_fini_array+0x18>
  403c24:	3c01      	subs	r4, #1
  403c26:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403c2a:	4798      	blx	r3
  403c2c:	2c00      	cmp	r4, #0
  403c2e:	d1f9      	bne.n	403c24 <__libc_fini_array+0xc>
  403c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403c34:	f001 be72 	b.w	40591c <_fini>
  403c38:	0040592c 	.word	0x0040592c
  403c3c:	00405928 	.word	0x00405928

00403c40 <__fputwc>:
  403c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c44:	b082      	sub	sp, #8
  403c46:	4680      	mov	r8, r0
  403c48:	4689      	mov	r9, r1
  403c4a:	4614      	mov	r4, r2
  403c4c:	f000 fc3e 	bl	4044cc <__locale_mb_cur_max>
  403c50:	2801      	cmp	r0, #1
  403c52:	d033      	beq.n	403cbc <__fputwc+0x7c>
  403c54:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403c58:	464a      	mov	r2, r9
  403c5a:	a901      	add	r1, sp, #4
  403c5c:	4640      	mov	r0, r8
  403c5e:	f001 fa45 	bl	4050ec <_wcrtomb_r>
  403c62:	f1b0 3fff 	cmp.w	r0, #4294967295
  403c66:	4682      	mov	sl, r0
  403c68:	d021      	beq.n	403cae <__fputwc+0x6e>
  403c6a:	b388      	cbz	r0, 403cd0 <__fputwc+0x90>
  403c6c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  403c70:	2500      	movs	r5, #0
  403c72:	e008      	b.n	403c86 <__fputwc+0x46>
  403c74:	6823      	ldr	r3, [r4, #0]
  403c76:	1c5a      	adds	r2, r3, #1
  403c78:	6022      	str	r2, [r4, #0]
  403c7a:	701e      	strb	r6, [r3, #0]
  403c7c:	3501      	adds	r5, #1
  403c7e:	4555      	cmp	r5, sl
  403c80:	d226      	bcs.n	403cd0 <__fputwc+0x90>
  403c82:	ab01      	add	r3, sp, #4
  403c84:	5d5e      	ldrb	r6, [r3, r5]
  403c86:	68a3      	ldr	r3, [r4, #8]
  403c88:	3b01      	subs	r3, #1
  403c8a:	2b00      	cmp	r3, #0
  403c8c:	60a3      	str	r3, [r4, #8]
  403c8e:	daf1      	bge.n	403c74 <__fputwc+0x34>
  403c90:	69a7      	ldr	r7, [r4, #24]
  403c92:	42bb      	cmp	r3, r7
  403c94:	4631      	mov	r1, r6
  403c96:	4622      	mov	r2, r4
  403c98:	4640      	mov	r0, r8
  403c9a:	db01      	blt.n	403ca0 <__fputwc+0x60>
  403c9c:	2e0a      	cmp	r6, #10
  403c9e:	d1e9      	bne.n	403c74 <__fputwc+0x34>
  403ca0:	f001 f9ce 	bl	405040 <__swbuf_r>
  403ca4:	1c43      	adds	r3, r0, #1
  403ca6:	d1e9      	bne.n	403c7c <__fputwc+0x3c>
  403ca8:	b002      	add	sp, #8
  403caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cae:	89a3      	ldrh	r3, [r4, #12]
  403cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403cb4:	81a3      	strh	r3, [r4, #12]
  403cb6:	b002      	add	sp, #8
  403cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cbc:	f109 33ff 	add.w	r3, r9, #4294967295
  403cc0:	2bfe      	cmp	r3, #254	; 0xfe
  403cc2:	d8c7      	bhi.n	403c54 <__fputwc+0x14>
  403cc4:	fa5f f689 	uxtb.w	r6, r9
  403cc8:	4682      	mov	sl, r0
  403cca:	f88d 6004 	strb.w	r6, [sp, #4]
  403cce:	e7cf      	b.n	403c70 <__fputwc+0x30>
  403cd0:	4648      	mov	r0, r9
  403cd2:	b002      	add	sp, #8
  403cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403cd8 <_fputwc_r>:
  403cd8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403cdc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403ce0:	d10a      	bne.n	403cf8 <_fputwc_r+0x20>
  403ce2:	b410      	push	{r4}
  403ce4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  403ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403cea:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403cee:	6654      	str	r4, [r2, #100]	; 0x64
  403cf0:	8193      	strh	r3, [r2, #12]
  403cf2:	bc10      	pop	{r4}
  403cf4:	f7ff bfa4 	b.w	403c40 <__fputwc>
  403cf8:	f7ff bfa2 	b.w	403c40 <__fputwc>

00403cfc <_fread_r>:
  403cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d00:	b083      	sub	sp, #12
  403d02:	fb02 f603 	mul.w	r6, r2, r3
  403d06:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403d0a:	2e00      	cmp	r6, #0
  403d0c:	d048      	beq.n	403da0 <_fread_r+0xa4>
  403d0e:	4691      	mov	r9, r2
  403d10:	4698      	mov	r8, r3
  403d12:	460c      	mov	r4, r1
  403d14:	4605      	mov	r5, r0
  403d16:	b118      	cbz	r0, 403d20 <_fread_r+0x24>
  403d18:	6b82      	ldr	r2, [r0, #56]	; 0x38
  403d1a:	2a00      	cmp	r2, #0
  403d1c:	f000 80ab 	beq.w	403e76 <_fread_r+0x17a>
  403d20:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
  403d24:	b291      	uxth	r1, r2
  403d26:	0488      	lsls	r0, r1, #18
  403d28:	d40a      	bmi.n	403d40 <_fread_r+0x44>
  403d2a:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
  403d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403d32:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
  403d36:	f8ab 200c 	strh.w	r2, [fp, #12]
  403d3a:	b291      	uxth	r1, r2
  403d3c:	f8cb 0064 	str.w	r0, [fp, #100]	; 0x64
  403d40:	f8db 7004 	ldr.w	r7, [fp, #4]
  403d44:	2f00      	cmp	r7, #0
  403d46:	db36      	blt.n	403db6 <_fread_r+0xba>
  403d48:	078b      	lsls	r3, r1, #30
  403d4a:	463a      	mov	r2, r7
  403d4c:	d43a      	bmi.n	403dc4 <_fread_r+0xc8>
  403d4e:	46b2      	mov	sl, r6
  403d50:	e012      	b.n	403d78 <_fread_r+0x7c>
  403d52:	f8db 1000 	ldr.w	r1, [fp]
  403d56:	f7fd fc2d 	bl	4015b4 <memcpy>
  403d5a:	f8db 3000 	ldr.w	r3, [fp]
  403d5e:	443b      	add	r3, r7
  403d60:	f8cb 3000 	str.w	r3, [fp]
  403d64:	4659      	mov	r1, fp
  403d66:	4628      	mov	r0, r5
  403d68:	443c      	add	r4, r7
  403d6a:	ebc7 0a0a 	rsb	sl, r7, sl
  403d6e:	f000 fcc9 	bl	404704 <__srefill_r>
  403d72:	b9c8      	cbnz	r0, 403da8 <_fread_r+0xac>
  403d74:	f8db 7004 	ldr.w	r7, [fp, #4]
  403d78:	45ba      	cmp	sl, r7
  403d7a:	463a      	mov	r2, r7
  403d7c:	4620      	mov	r0, r4
  403d7e:	d8e8      	bhi.n	403d52 <_fread_r+0x56>
  403d80:	4652      	mov	r2, sl
  403d82:	f8db 1000 	ldr.w	r1, [fp]
  403d86:	f7fd fc15 	bl	4015b4 <memcpy>
  403d8a:	e89b 0006 	ldmia.w	fp, {r1, r2}
  403d8e:	ebca 0202 	rsb	r2, sl, r2
  403d92:	4451      	add	r1, sl
  403d94:	e88b 0006 	stmia.w	fp, {r1, r2}
  403d98:	4640      	mov	r0, r8
  403d9a:	b003      	add	sp, #12
  403d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403da0:	4630      	mov	r0, r6
  403da2:	b003      	add	sp, #12
  403da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403da8:	ebca 0606 	rsb	r6, sl, r6
  403dac:	fbb6 f0f9 	udiv	r0, r6, r9
  403db0:	b003      	add	sp, #12
  403db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403db6:	2000      	movs	r0, #0
  403db8:	078b      	lsls	r3, r1, #30
  403dba:	4602      	mov	r2, r0
  403dbc:	f8cb 0004 	str.w	r0, [fp, #4]
  403dc0:	4607      	mov	r7, r0
  403dc2:	d5c4      	bpl.n	403d4e <_fread_r+0x52>
  403dc4:	42b2      	cmp	r2, r6
  403dc6:	4613      	mov	r3, r2
  403dc8:	bf28      	it	cs
  403dca:	4633      	movcs	r3, r6
  403dcc:	461a      	mov	r2, r3
  403dce:	f8db 1000 	ldr.w	r1, [fp]
  403dd2:	9300      	str	r3, [sp, #0]
  403dd4:	4620      	mov	r0, r4
  403dd6:	f7fd fbed 	bl	4015b4 <memcpy>
  403dda:	f8db 7000 	ldr.w	r7, [fp]
  403dde:	9b00      	ldr	r3, [sp, #0]
  403de0:	f8db 2004 	ldr.w	r2, [fp, #4]
  403de4:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
  403de8:	eb07 0a03 	add.w	sl, r7, r3
  403dec:	1ad2      	subs	r2, r2, r3
  403dee:	f8cb a000 	str.w	sl, [fp]
  403df2:	f8cb 2004 	str.w	r2, [fp, #4]
  403df6:	1af7      	subs	r7, r6, r3
  403df8:	2900      	cmp	r1, #0
  403dfa:	d049      	beq.n	403e90 <_fread_r+0x194>
  403dfc:	2f00      	cmp	r7, #0
  403dfe:	d045      	beq.n	403e8c <_fread_r+0x190>
  403e00:	f10b 0040 	add.w	r0, fp, #64	; 0x40
  403e04:	4281      	cmp	r1, r0
  403e06:	d006      	beq.n	403e16 <_fread_r+0x11a>
  403e08:	4628      	mov	r0, r5
  403e0a:	9300      	str	r3, [sp, #0]
  403e0c:	f000 f892 	bl	403f34 <_free_r>
  403e10:	f8db a000 	ldr.w	sl, [fp]
  403e14:	9b00      	ldr	r3, [sp, #0]
  403e16:	2100      	movs	r1, #0
  403e18:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
  403e1c:	f8db 2010 	ldr.w	r2, [fp, #16]
  403e20:	f8db 1014 	ldr.w	r1, [fp, #20]
  403e24:	9600      	str	r6, [sp, #0]
  403e26:	441c      	add	r4, r3
  403e28:	f8cd 8004 	str.w	r8, [sp, #4]
  403e2c:	4616      	mov	r6, r2
  403e2e:	46a0      	mov	r8, r4
  403e30:	4654      	mov	r4, sl
  403e32:	46aa      	mov	sl, r5
  403e34:	460d      	mov	r5, r1
  403e36:	e000      	b.n	403e3a <_fread_r+0x13e>
  403e38:	b337      	cbz	r7, 403e88 <_fread_r+0x18c>
  403e3a:	f8cb 8010 	str.w	r8, [fp, #16]
  403e3e:	f8cb 7014 	str.w	r7, [fp, #20]
  403e42:	f8cb 8000 	str.w	r8, [fp]
  403e46:	4659      	mov	r1, fp
  403e48:	4650      	mov	r0, sl
  403e4a:	f000 fc5b 	bl	404704 <__srefill_r>
  403e4e:	f8db 1004 	ldr.w	r1, [fp, #4]
  403e52:	f8cb 6010 	str.w	r6, [fp, #16]
  403e56:	2300      	movs	r3, #0
  403e58:	f8cb 5014 	str.w	r5, [fp, #20]
  403e5c:	f8cb 4000 	str.w	r4, [fp]
  403e60:	1a7f      	subs	r7, r7, r1
  403e62:	4488      	add	r8, r1
  403e64:	f8cb 3004 	str.w	r3, [fp, #4]
  403e68:	2800      	cmp	r0, #0
  403e6a:	d0e5      	beq.n	403e38 <_fread_r+0x13c>
  403e6c:	9e00      	ldr	r6, [sp, #0]
  403e6e:	1bf6      	subs	r6, r6, r7
  403e70:	fbb6 f0f9 	udiv	r0, r6, r9
  403e74:	e791      	b.n	403d9a <_fread_r+0x9e>
  403e76:	f7ff fec5 	bl	403c04 <__sinit>
  403e7a:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
  403e7e:	b291      	uxth	r1, r2
  403e80:	0488      	lsls	r0, r1, #18
  403e82:	f53f af5d 	bmi.w	403d40 <_fread_r+0x44>
  403e86:	e750      	b.n	403d2a <_fread_r+0x2e>
  403e88:	f8dd 8004 	ldr.w	r8, [sp, #4]
  403e8c:	4640      	mov	r0, r8
  403e8e:	e784      	b.n	403d9a <_fread_r+0x9e>
  403e90:	2f00      	cmp	r7, #0
  403e92:	d1c3      	bne.n	403e1c <_fread_r+0x120>
  403e94:	4640      	mov	r0, r8
  403e96:	e780      	b.n	403d9a <_fread_r+0x9e>

00403e98 <_malloc_trim_r>:
  403e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e9a:	4f23      	ldr	r7, [pc, #140]	; (403f28 <_malloc_trim_r+0x90>)
  403e9c:	460c      	mov	r4, r1
  403e9e:	4606      	mov	r6, r0
  403ea0:	f7fd fcd4 	bl	40184c <__malloc_lock>
  403ea4:	68bb      	ldr	r3, [r7, #8]
  403ea6:	685d      	ldr	r5, [r3, #4]
  403ea8:	f025 0503 	bic.w	r5, r5, #3
  403eac:	1b29      	subs	r1, r5, r4
  403eae:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  403eb2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403eb6:	f021 010f 	bic.w	r1, r1, #15
  403eba:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403ebe:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403ec2:	db07      	blt.n	403ed4 <_malloc_trim_r+0x3c>
  403ec4:	2100      	movs	r1, #0
  403ec6:	4630      	mov	r0, r6
  403ec8:	f7fd fef0 	bl	401cac <_sbrk_r>
  403ecc:	68bb      	ldr	r3, [r7, #8]
  403ece:	442b      	add	r3, r5
  403ed0:	4298      	cmp	r0, r3
  403ed2:	d004      	beq.n	403ede <_malloc_trim_r+0x46>
  403ed4:	4630      	mov	r0, r6
  403ed6:	f7fd fcbb 	bl	401850 <__malloc_unlock>
  403eda:	2000      	movs	r0, #0
  403edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ede:	4261      	negs	r1, r4
  403ee0:	4630      	mov	r0, r6
  403ee2:	f7fd fee3 	bl	401cac <_sbrk_r>
  403ee6:	3001      	adds	r0, #1
  403ee8:	d00d      	beq.n	403f06 <_malloc_trim_r+0x6e>
  403eea:	4b10      	ldr	r3, [pc, #64]	; (403f2c <_malloc_trim_r+0x94>)
  403eec:	68ba      	ldr	r2, [r7, #8]
  403eee:	6819      	ldr	r1, [r3, #0]
  403ef0:	1b2d      	subs	r5, r5, r4
  403ef2:	f045 0501 	orr.w	r5, r5, #1
  403ef6:	4630      	mov	r0, r6
  403ef8:	1b09      	subs	r1, r1, r4
  403efa:	6055      	str	r5, [r2, #4]
  403efc:	6019      	str	r1, [r3, #0]
  403efe:	f7fd fca7 	bl	401850 <__malloc_unlock>
  403f02:	2001      	movs	r0, #1
  403f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f06:	2100      	movs	r1, #0
  403f08:	4630      	mov	r0, r6
  403f0a:	f7fd fecf 	bl	401cac <_sbrk_r>
  403f0e:	68ba      	ldr	r2, [r7, #8]
  403f10:	1a83      	subs	r3, r0, r2
  403f12:	2b0f      	cmp	r3, #15
  403f14:	ddde      	ble.n	403ed4 <_malloc_trim_r+0x3c>
  403f16:	4c06      	ldr	r4, [pc, #24]	; (403f30 <_malloc_trim_r+0x98>)
  403f18:	4904      	ldr	r1, [pc, #16]	; (403f2c <_malloc_trim_r+0x94>)
  403f1a:	6824      	ldr	r4, [r4, #0]
  403f1c:	f043 0301 	orr.w	r3, r3, #1
  403f20:	1b00      	subs	r0, r0, r4
  403f22:	6053      	str	r3, [r2, #4]
  403f24:	6008      	str	r0, [r1, #0]
  403f26:	e7d5      	b.n	403ed4 <_malloc_trim_r+0x3c>
  403f28:	2000043c 	.word	0x2000043c
  403f2c:	20000960 	.word	0x20000960
  403f30:	20000848 	.word	0x20000848

00403f34 <_free_r>:
  403f34:	2900      	cmp	r1, #0
  403f36:	d045      	beq.n	403fc4 <_free_r+0x90>
  403f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f3c:	460d      	mov	r5, r1
  403f3e:	4680      	mov	r8, r0
  403f40:	f7fd fc84 	bl	40184c <__malloc_lock>
  403f44:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403f48:	496a      	ldr	r1, [pc, #424]	; (4040f4 <_free_r+0x1c0>)
  403f4a:	f027 0301 	bic.w	r3, r7, #1
  403f4e:	f1a5 0408 	sub.w	r4, r5, #8
  403f52:	18e2      	adds	r2, r4, r3
  403f54:	688e      	ldr	r6, [r1, #8]
  403f56:	6850      	ldr	r0, [r2, #4]
  403f58:	42b2      	cmp	r2, r6
  403f5a:	f020 0003 	bic.w	r0, r0, #3
  403f5e:	d062      	beq.n	404026 <_free_r+0xf2>
  403f60:	07fe      	lsls	r6, r7, #31
  403f62:	6050      	str	r0, [r2, #4]
  403f64:	d40b      	bmi.n	403f7e <_free_r+0x4a>
  403f66:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403f6a:	1be4      	subs	r4, r4, r7
  403f6c:	f101 0e08 	add.w	lr, r1, #8
  403f70:	68a5      	ldr	r5, [r4, #8]
  403f72:	4575      	cmp	r5, lr
  403f74:	443b      	add	r3, r7
  403f76:	d06f      	beq.n	404058 <_free_r+0x124>
  403f78:	68e7      	ldr	r7, [r4, #12]
  403f7a:	60ef      	str	r7, [r5, #12]
  403f7c:	60bd      	str	r5, [r7, #8]
  403f7e:	1815      	adds	r5, r2, r0
  403f80:	686d      	ldr	r5, [r5, #4]
  403f82:	07ed      	lsls	r5, r5, #31
  403f84:	d542      	bpl.n	40400c <_free_r+0xd8>
  403f86:	f043 0201 	orr.w	r2, r3, #1
  403f8a:	6062      	str	r2, [r4, #4]
  403f8c:	50e3      	str	r3, [r4, r3]
  403f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403f92:	d218      	bcs.n	403fc6 <_free_r+0x92>
  403f94:	08db      	lsrs	r3, r3, #3
  403f96:	1c5a      	adds	r2, r3, #1
  403f98:	684d      	ldr	r5, [r1, #4]
  403f9a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  403f9e:	60a7      	str	r7, [r4, #8]
  403fa0:	2001      	movs	r0, #1
  403fa2:	109b      	asrs	r3, r3, #2
  403fa4:	fa00 f303 	lsl.w	r3, r0, r3
  403fa8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  403fac:	431d      	orrs	r5, r3
  403fae:	3808      	subs	r0, #8
  403fb0:	60e0      	str	r0, [r4, #12]
  403fb2:	604d      	str	r5, [r1, #4]
  403fb4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  403fb8:	60fc      	str	r4, [r7, #12]
  403fba:	4640      	mov	r0, r8
  403fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403fc0:	f7fd bc46 	b.w	401850 <__malloc_unlock>
  403fc4:	4770      	bx	lr
  403fc6:	0a5a      	lsrs	r2, r3, #9
  403fc8:	2a04      	cmp	r2, #4
  403fca:	d853      	bhi.n	404074 <_free_r+0x140>
  403fcc:	099a      	lsrs	r2, r3, #6
  403fce:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403fd2:	007f      	lsls	r7, r7, #1
  403fd4:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403fd8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  403fdc:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  403fe0:	4944      	ldr	r1, [pc, #272]	; (4040f4 <_free_r+0x1c0>)
  403fe2:	3808      	subs	r0, #8
  403fe4:	4290      	cmp	r0, r2
  403fe6:	d04d      	beq.n	404084 <_free_r+0x150>
  403fe8:	6851      	ldr	r1, [r2, #4]
  403fea:	f021 0103 	bic.w	r1, r1, #3
  403fee:	428b      	cmp	r3, r1
  403ff0:	d202      	bcs.n	403ff8 <_free_r+0xc4>
  403ff2:	6892      	ldr	r2, [r2, #8]
  403ff4:	4290      	cmp	r0, r2
  403ff6:	d1f7      	bne.n	403fe8 <_free_r+0xb4>
  403ff8:	68d0      	ldr	r0, [r2, #12]
  403ffa:	60e0      	str	r0, [r4, #12]
  403ffc:	60a2      	str	r2, [r4, #8]
  403ffe:	6084      	str	r4, [r0, #8]
  404000:	60d4      	str	r4, [r2, #12]
  404002:	4640      	mov	r0, r8
  404004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404008:	f7fd bc22 	b.w	401850 <__malloc_unlock>
  40400c:	6895      	ldr	r5, [r2, #8]
  40400e:	4f3a      	ldr	r7, [pc, #232]	; (4040f8 <_free_r+0x1c4>)
  404010:	42bd      	cmp	r5, r7
  404012:	4403      	add	r3, r0
  404014:	d03f      	beq.n	404096 <_free_r+0x162>
  404016:	68d0      	ldr	r0, [r2, #12]
  404018:	60e8      	str	r0, [r5, #12]
  40401a:	f043 0201 	orr.w	r2, r3, #1
  40401e:	6085      	str	r5, [r0, #8]
  404020:	6062      	str	r2, [r4, #4]
  404022:	50e3      	str	r3, [r4, r3]
  404024:	e7b3      	b.n	403f8e <_free_r+0x5a>
  404026:	07ff      	lsls	r7, r7, #31
  404028:	4403      	add	r3, r0
  40402a:	d407      	bmi.n	40403c <_free_r+0x108>
  40402c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404030:	1aa4      	subs	r4, r4, r2
  404032:	4413      	add	r3, r2
  404034:	68a0      	ldr	r0, [r4, #8]
  404036:	68e2      	ldr	r2, [r4, #12]
  404038:	60c2      	str	r2, [r0, #12]
  40403a:	6090      	str	r0, [r2, #8]
  40403c:	4a2f      	ldr	r2, [pc, #188]	; (4040fc <_free_r+0x1c8>)
  40403e:	6812      	ldr	r2, [r2, #0]
  404040:	f043 0001 	orr.w	r0, r3, #1
  404044:	4293      	cmp	r3, r2
  404046:	6060      	str	r0, [r4, #4]
  404048:	608c      	str	r4, [r1, #8]
  40404a:	d3b6      	bcc.n	403fba <_free_r+0x86>
  40404c:	4b2c      	ldr	r3, [pc, #176]	; (404100 <_free_r+0x1cc>)
  40404e:	4640      	mov	r0, r8
  404050:	6819      	ldr	r1, [r3, #0]
  404052:	f7ff ff21 	bl	403e98 <_malloc_trim_r>
  404056:	e7b0      	b.n	403fba <_free_r+0x86>
  404058:	1811      	adds	r1, r2, r0
  40405a:	6849      	ldr	r1, [r1, #4]
  40405c:	07c9      	lsls	r1, r1, #31
  40405e:	d444      	bmi.n	4040ea <_free_r+0x1b6>
  404060:	6891      	ldr	r1, [r2, #8]
  404062:	68d2      	ldr	r2, [r2, #12]
  404064:	60ca      	str	r2, [r1, #12]
  404066:	4403      	add	r3, r0
  404068:	f043 0001 	orr.w	r0, r3, #1
  40406c:	6091      	str	r1, [r2, #8]
  40406e:	6060      	str	r0, [r4, #4]
  404070:	50e3      	str	r3, [r4, r3]
  404072:	e7a2      	b.n	403fba <_free_r+0x86>
  404074:	2a14      	cmp	r2, #20
  404076:	d817      	bhi.n	4040a8 <_free_r+0x174>
  404078:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40407c:	007f      	lsls	r7, r7, #1
  40407e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404082:	e7a9      	b.n	403fd8 <_free_r+0xa4>
  404084:	10aa      	asrs	r2, r5, #2
  404086:	684b      	ldr	r3, [r1, #4]
  404088:	2501      	movs	r5, #1
  40408a:	fa05 f202 	lsl.w	r2, r5, r2
  40408e:	4313      	orrs	r3, r2
  404090:	604b      	str	r3, [r1, #4]
  404092:	4602      	mov	r2, r0
  404094:	e7b1      	b.n	403ffa <_free_r+0xc6>
  404096:	f043 0201 	orr.w	r2, r3, #1
  40409a:	614c      	str	r4, [r1, #20]
  40409c:	610c      	str	r4, [r1, #16]
  40409e:	60e5      	str	r5, [r4, #12]
  4040a0:	60a5      	str	r5, [r4, #8]
  4040a2:	6062      	str	r2, [r4, #4]
  4040a4:	50e3      	str	r3, [r4, r3]
  4040a6:	e788      	b.n	403fba <_free_r+0x86>
  4040a8:	2a54      	cmp	r2, #84	; 0x54
  4040aa:	d806      	bhi.n	4040ba <_free_r+0x186>
  4040ac:	0b1a      	lsrs	r2, r3, #12
  4040ae:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4040b2:	007f      	lsls	r7, r7, #1
  4040b4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4040b8:	e78e      	b.n	403fd8 <_free_r+0xa4>
  4040ba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4040be:	d806      	bhi.n	4040ce <_free_r+0x19a>
  4040c0:	0bda      	lsrs	r2, r3, #15
  4040c2:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4040c6:	007f      	lsls	r7, r7, #1
  4040c8:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4040cc:	e784      	b.n	403fd8 <_free_r+0xa4>
  4040ce:	f240 5054 	movw	r0, #1364	; 0x554
  4040d2:	4282      	cmp	r2, r0
  4040d4:	d806      	bhi.n	4040e4 <_free_r+0x1b0>
  4040d6:	0c9a      	lsrs	r2, r3, #18
  4040d8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4040dc:	007f      	lsls	r7, r7, #1
  4040de:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4040e2:	e779      	b.n	403fd8 <_free_r+0xa4>
  4040e4:	27fe      	movs	r7, #254	; 0xfe
  4040e6:	257e      	movs	r5, #126	; 0x7e
  4040e8:	e776      	b.n	403fd8 <_free_r+0xa4>
  4040ea:	f043 0201 	orr.w	r2, r3, #1
  4040ee:	6062      	str	r2, [r4, #4]
  4040f0:	50e3      	str	r3, [r4, r3]
  4040f2:	e762      	b.n	403fba <_free_r+0x86>
  4040f4:	2000043c 	.word	0x2000043c
  4040f8:	20000444 	.word	0x20000444
  4040fc:	20000844 	.word	0x20000844
  404100:	2000095c 	.word	0x2000095c

00404104 <__sfvwrite_r>:
  404104:	6893      	ldr	r3, [r2, #8]
  404106:	2b00      	cmp	r3, #0
  404108:	d076      	beq.n	4041f8 <__sfvwrite_r+0xf4>
  40410a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40410e:	898b      	ldrh	r3, [r1, #12]
  404110:	b085      	sub	sp, #20
  404112:	460c      	mov	r4, r1
  404114:	0719      	lsls	r1, r3, #28
  404116:	9001      	str	r0, [sp, #4]
  404118:	4616      	mov	r6, r2
  40411a:	d529      	bpl.n	404170 <__sfvwrite_r+0x6c>
  40411c:	6922      	ldr	r2, [r4, #16]
  40411e:	b33a      	cbz	r2, 404170 <__sfvwrite_r+0x6c>
  404120:	f003 0802 	and.w	r8, r3, #2
  404124:	fa1f f088 	uxth.w	r0, r8
  404128:	6835      	ldr	r5, [r6, #0]
  40412a:	2800      	cmp	r0, #0
  40412c:	d02f      	beq.n	40418e <__sfvwrite_r+0x8a>
  40412e:	f04f 0900 	mov.w	r9, #0
  404132:	4fb4      	ldr	r7, [pc, #720]	; (404404 <__sfvwrite_r+0x300>)
  404134:	46c8      	mov	r8, r9
  404136:	46b2      	mov	sl, r6
  404138:	45b8      	cmp	r8, r7
  40413a:	4643      	mov	r3, r8
  40413c:	464a      	mov	r2, r9
  40413e:	bf28      	it	cs
  404140:	463b      	movcs	r3, r7
  404142:	9801      	ldr	r0, [sp, #4]
  404144:	f1b8 0f00 	cmp.w	r8, #0
  404148:	d050      	beq.n	4041ec <__sfvwrite_r+0xe8>
  40414a:	69e1      	ldr	r1, [r4, #28]
  40414c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40414e:	47b0      	blx	r6
  404150:	2800      	cmp	r0, #0
  404152:	dd71      	ble.n	404238 <__sfvwrite_r+0x134>
  404154:	f8da 3008 	ldr.w	r3, [sl, #8]
  404158:	1a1b      	subs	r3, r3, r0
  40415a:	4481      	add	r9, r0
  40415c:	ebc0 0808 	rsb	r8, r0, r8
  404160:	f8ca 3008 	str.w	r3, [sl, #8]
  404164:	2b00      	cmp	r3, #0
  404166:	d1e7      	bne.n	404138 <__sfvwrite_r+0x34>
  404168:	2000      	movs	r0, #0
  40416a:	b005      	add	sp, #20
  40416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404170:	4621      	mov	r1, r4
  404172:	9801      	ldr	r0, [sp, #4]
  404174:	f7ff fb88 	bl	403888 <__swsetup_r>
  404178:	2800      	cmp	r0, #0
  40417a:	f040 813a 	bne.w	4043f2 <__sfvwrite_r+0x2ee>
  40417e:	89a3      	ldrh	r3, [r4, #12]
  404180:	6835      	ldr	r5, [r6, #0]
  404182:	f003 0802 	and.w	r8, r3, #2
  404186:	fa1f f088 	uxth.w	r0, r8
  40418a:	2800      	cmp	r0, #0
  40418c:	d1cf      	bne.n	40412e <__sfvwrite_r+0x2a>
  40418e:	f013 0901 	ands.w	r9, r3, #1
  404192:	d15b      	bne.n	40424c <__sfvwrite_r+0x148>
  404194:	464f      	mov	r7, r9
  404196:	9602      	str	r6, [sp, #8]
  404198:	b31f      	cbz	r7, 4041e2 <__sfvwrite_r+0xde>
  40419a:	059a      	lsls	r2, r3, #22
  40419c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4041a0:	d52c      	bpl.n	4041fc <__sfvwrite_r+0xf8>
  4041a2:	4547      	cmp	r7, r8
  4041a4:	46c2      	mov	sl, r8
  4041a6:	f0c0 80a4 	bcc.w	4042f2 <__sfvwrite_r+0x1ee>
  4041aa:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4041ae:	f040 80b1 	bne.w	404314 <__sfvwrite_r+0x210>
  4041b2:	6820      	ldr	r0, [r4, #0]
  4041b4:	4652      	mov	r2, sl
  4041b6:	4649      	mov	r1, r9
  4041b8:	f7fd fa96 	bl	4016e8 <memmove>
  4041bc:	68a0      	ldr	r0, [r4, #8]
  4041be:	6823      	ldr	r3, [r4, #0]
  4041c0:	ebc8 0000 	rsb	r0, r8, r0
  4041c4:	4453      	add	r3, sl
  4041c6:	60a0      	str	r0, [r4, #8]
  4041c8:	6023      	str	r3, [r4, #0]
  4041ca:	4638      	mov	r0, r7
  4041cc:	9a02      	ldr	r2, [sp, #8]
  4041ce:	6893      	ldr	r3, [r2, #8]
  4041d0:	1a1b      	subs	r3, r3, r0
  4041d2:	4481      	add	r9, r0
  4041d4:	1a3f      	subs	r7, r7, r0
  4041d6:	6093      	str	r3, [r2, #8]
  4041d8:	2b00      	cmp	r3, #0
  4041da:	d0c5      	beq.n	404168 <__sfvwrite_r+0x64>
  4041dc:	89a3      	ldrh	r3, [r4, #12]
  4041de:	2f00      	cmp	r7, #0
  4041e0:	d1db      	bne.n	40419a <__sfvwrite_r+0x96>
  4041e2:	f8d5 9000 	ldr.w	r9, [r5]
  4041e6:	686f      	ldr	r7, [r5, #4]
  4041e8:	3508      	adds	r5, #8
  4041ea:	e7d5      	b.n	404198 <__sfvwrite_r+0x94>
  4041ec:	f8d5 9000 	ldr.w	r9, [r5]
  4041f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4041f4:	3508      	adds	r5, #8
  4041f6:	e79f      	b.n	404138 <__sfvwrite_r+0x34>
  4041f8:	2000      	movs	r0, #0
  4041fa:	4770      	bx	lr
  4041fc:	6820      	ldr	r0, [r4, #0]
  4041fe:	6923      	ldr	r3, [r4, #16]
  404200:	4298      	cmp	r0, r3
  404202:	d803      	bhi.n	40420c <__sfvwrite_r+0x108>
  404204:	6961      	ldr	r1, [r4, #20]
  404206:	428f      	cmp	r7, r1
  404208:	f080 80b7 	bcs.w	40437a <__sfvwrite_r+0x276>
  40420c:	45b8      	cmp	r8, r7
  40420e:	bf28      	it	cs
  404210:	46b8      	movcs	r8, r7
  404212:	4642      	mov	r2, r8
  404214:	4649      	mov	r1, r9
  404216:	f7fd fa67 	bl	4016e8 <memmove>
  40421a:	68a3      	ldr	r3, [r4, #8]
  40421c:	6822      	ldr	r2, [r4, #0]
  40421e:	ebc8 0303 	rsb	r3, r8, r3
  404222:	4442      	add	r2, r8
  404224:	60a3      	str	r3, [r4, #8]
  404226:	6022      	str	r2, [r4, #0]
  404228:	2b00      	cmp	r3, #0
  40422a:	d149      	bne.n	4042c0 <__sfvwrite_r+0x1bc>
  40422c:	4621      	mov	r1, r4
  40422e:	9801      	ldr	r0, [sp, #4]
  404230:	f7ff fc42 	bl	403ab8 <_fflush_r>
  404234:	2800      	cmp	r0, #0
  404236:	d043      	beq.n	4042c0 <__sfvwrite_r+0x1bc>
  404238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40423c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404240:	f04f 30ff 	mov.w	r0, #4294967295
  404244:	81a3      	strh	r3, [r4, #12]
  404246:	b005      	add	sp, #20
  404248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40424c:	4680      	mov	r8, r0
  40424e:	9002      	str	r0, [sp, #8]
  404250:	4682      	mov	sl, r0
  404252:	4681      	mov	r9, r0
  404254:	f1b9 0f00 	cmp.w	r9, #0
  404258:	d02a      	beq.n	4042b0 <__sfvwrite_r+0x1ac>
  40425a:	9b02      	ldr	r3, [sp, #8]
  40425c:	2b00      	cmp	r3, #0
  40425e:	d04c      	beq.n	4042fa <__sfvwrite_r+0x1f6>
  404260:	6820      	ldr	r0, [r4, #0]
  404262:	6923      	ldr	r3, [r4, #16]
  404264:	6962      	ldr	r2, [r4, #20]
  404266:	45c8      	cmp	r8, r9
  404268:	46c3      	mov	fp, r8
  40426a:	bf28      	it	cs
  40426c:	46cb      	movcs	fp, r9
  40426e:	4298      	cmp	r0, r3
  404270:	465f      	mov	r7, fp
  404272:	d904      	bls.n	40427e <__sfvwrite_r+0x17a>
  404274:	68a3      	ldr	r3, [r4, #8]
  404276:	4413      	add	r3, r2
  404278:	459b      	cmp	fp, r3
  40427a:	f300 8090 	bgt.w	40439e <__sfvwrite_r+0x29a>
  40427e:	4593      	cmp	fp, r2
  404280:	db20      	blt.n	4042c4 <__sfvwrite_r+0x1c0>
  404282:	4613      	mov	r3, r2
  404284:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404286:	69e1      	ldr	r1, [r4, #28]
  404288:	9801      	ldr	r0, [sp, #4]
  40428a:	4652      	mov	r2, sl
  40428c:	47b8      	blx	r7
  40428e:	1e07      	subs	r7, r0, #0
  404290:	ddd2      	ble.n	404238 <__sfvwrite_r+0x134>
  404292:	ebb8 0807 	subs.w	r8, r8, r7
  404296:	d023      	beq.n	4042e0 <__sfvwrite_r+0x1dc>
  404298:	68b3      	ldr	r3, [r6, #8]
  40429a:	1bdb      	subs	r3, r3, r7
  40429c:	44ba      	add	sl, r7
  40429e:	ebc7 0909 	rsb	r9, r7, r9
  4042a2:	60b3      	str	r3, [r6, #8]
  4042a4:	2b00      	cmp	r3, #0
  4042a6:	f43f af5f 	beq.w	404168 <__sfvwrite_r+0x64>
  4042aa:	f1b9 0f00 	cmp.w	r9, #0
  4042ae:	d1d4      	bne.n	40425a <__sfvwrite_r+0x156>
  4042b0:	2300      	movs	r3, #0
  4042b2:	f8d5 a000 	ldr.w	sl, [r5]
  4042b6:	f8d5 9004 	ldr.w	r9, [r5, #4]
  4042ba:	9302      	str	r3, [sp, #8]
  4042bc:	3508      	adds	r5, #8
  4042be:	e7c9      	b.n	404254 <__sfvwrite_r+0x150>
  4042c0:	4640      	mov	r0, r8
  4042c2:	e783      	b.n	4041cc <__sfvwrite_r+0xc8>
  4042c4:	465a      	mov	r2, fp
  4042c6:	4651      	mov	r1, sl
  4042c8:	f7fd fa0e 	bl	4016e8 <memmove>
  4042cc:	68a2      	ldr	r2, [r4, #8]
  4042ce:	6823      	ldr	r3, [r4, #0]
  4042d0:	ebcb 0202 	rsb	r2, fp, r2
  4042d4:	445b      	add	r3, fp
  4042d6:	ebb8 0807 	subs.w	r8, r8, r7
  4042da:	60a2      	str	r2, [r4, #8]
  4042dc:	6023      	str	r3, [r4, #0]
  4042de:	d1db      	bne.n	404298 <__sfvwrite_r+0x194>
  4042e0:	4621      	mov	r1, r4
  4042e2:	9801      	ldr	r0, [sp, #4]
  4042e4:	f7ff fbe8 	bl	403ab8 <_fflush_r>
  4042e8:	2800      	cmp	r0, #0
  4042ea:	d1a5      	bne.n	404238 <__sfvwrite_r+0x134>
  4042ec:	f8cd 8008 	str.w	r8, [sp, #8]
  4042f0:	e7d2      	b.n	404298 <__sfvwrite_r+0x194>
  4042f2:	6820      	ldr	r0, [r4, #0]
  4042f4:	46b8      	mov	r8, r7
  4042f6:	46ba      	mov	sl, r7
  4042f8:	e75c      	b.n	4041b4 <__sfvwrite_r+0xb0>
  4042fa:	464a      	mov	r2, r9
  4042fc:	210a      	movs	r1, #10
  4042fe:	4650      	mov	r0, sl
  404300:	f000 f9a6 	bl	404650 <memchr>
  404304:	2800      	cmp	r0, #0
  404306:	d06f      	beq.n	4043e8 <__sfvwrite_r+0x2e4>
  404308:	3001      	adds	r0, #1
  40430a:	2301      	movs	r3, #1
  40430c:	ebca 0800 	rsb	r8, sl, r0
  404310:	9302      	str	r3, [sp, #8]
  404312:	e7a5      	b.n	404260 <__sfvwrite_r+0x15c>
  404314:	6962      	ldr	r2, [r4, #20]
  404316:	6820      	ldr	r0, [r4, #0]
  404318:	6921      	ldr	r1, [r4, #16]
  40431a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40431e:	ebc1 0a00 	rsb	sl, r1, r0
  404322:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404326:	f10a 0001 	add.w	r0, sl, #1
  40432a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40432e:	4438      	add	r0, r7
  404330:	4540      	cmp	r0, r8
  404332:	4642      	mov	r2, r8
  404334:	bf84      	itt	hi
  404336:	4680      	movhi	r8, r0
  404338:	4642      	movhi	r2, r8
  40433a:	055b      	lsls	r3, r3, #21
  40433c:	d542      	bpl.n	4043c4 <__sfvwrite_r+0x2c0>
  40433e:	4611      	mov	r1, r2
  404340:	9801      	ldr	r0, [sp, #4]
  404342:	f7fc fe7f 	bl	401044 <_malloc_r>
  404346:	4683      	mov	fp, r0
  404348:	2800      	cmp	r0, #0
  40434a:	d055      	beq.n	4043f8 <__sfvwrite_r+0x2f4>
  40434c:	4652      	mov	r2, sl
  40434e:	6921      	ldr	r1, [r4, #16]
  404350:	f7fd f930 	bl	4015b4 <memcpy>
  404354:	89a3      	ldrh	r3, [r4, #12]
  404356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40435e:	81a3      	strh	r3, [r4, #12]
  404360:	ebca 0308 	rsb	r3, sl, r8
  404364:	eb0b 000a 	add.w	r0, fp, sl
  404368:	f8c4 8014 	str.w	r8, [r4, #20]
  40436c:	f8c4 b010 	str.w	fp, [r4, #16]
  404370:	6020      	str	r0, [r4, #0]
  404372:	60a3      	str	r3, [r4, #8]
  404374:	46b8      	mov	r8, r7
  404376:	46ba      	mov	sl, r7
  404378:	e71c      	b.n	4041b4 <__sfvwrite_r+0xb0>
  40437a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40437e:	42bb      	cmp	r3, r7
  404380:	bf28      	it	cs
  404382:	463b      	movcs	r3, r7
  404384:	464a      	mov	r2, r9
  404386:	fb93 f3f1 	sdiv	r3, r3, r1
  40438a:	9801      	ldr	r0, [sp, #4]
  40438c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40438e:	fb01 f303 	mul.w	r3, r1, r3
  404392:	69e1      	ldr	r1, [r4, #28]
  404394:	47b0      	blx	r6
  404396:	2800      	cmp	r0, #0
  404398:	f73f af18 	bgt.w	4041cc <__sfvwrite_r+0xc8>
  40439c:	e74c      	b.n	404238 <__sfvwrite_r+0x134>
  40439e:	461a      	mov	r2, r3
  4043a0:	4651      	mov	r1, sl
  4043a2:	9303      	str	r3, [sp, #12]
  4043a4:	f7fd f9a0 	bl	4016e8 <memmove>
  4043a8:	6822      	ldr	r2, [r4, #0]
  4043aa:	9b03      	ldr	r3, [sp, #12]
  4043ac:	9801      	ldr	r0, [sp, #4]
  4043ae:	441a      	add	r2, r3
  4043b0:	6022      	str	r2, [r4, #0]
  4043b2:	4621      	mov	r1, r4
  4043b4:	f7ff fb80 	bl	403ab8 <_fflush_r>
  4043b8:	9b03      	ldr	r3, [sp, #12]
  4043ba:	2800      	cmp	r0, #0
  4043bc:	f47f af3c 	bne.w	404238 <__sfvwrite_r+0x134>
  4043c0:	461f      	mov	r7, r3
  4043c2:	e766      	b.n	404292 <__sfvwrite_r+0x18e>
  4043c4:	9801      	ldr	r0, [sp, #4]
  4043c6:	f7fd fa81 	bl	4018cc <_realloc_r>
  4043ca:	4683      	mov	fp, r0
  4043cc:	2800      	cmp	r0, #0
  4043ce:	d1c7      	bne.n	404360 <__sfvwrite_r+0x25c>
  4043d0:	9d01      	ldr	r5, [sp, #4]
  4043d2:	6921      	ldr	r1, [r4, #16]
  4043d4:	4628      	mov	r0, r5
  4043d6:	f7ff fdad 	bl	403f34 <_free_r>
  4043da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043de:	220c      	movs	r2, #12
  4043e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4043e4:	602a      	str	r2, [r5, #0]
  4043e6:	e729      	b.n	40423c <__sfvwrite_r+0x138>
  4043e8:	2301      	movs	r3, #1
  4043ea:	f109 0801 	add.w	r8, r9, #1
  4043ee:	9302      	str	r3, [sp, #8]
  4043f0:	e736      	b.n	404260 <__sfvwrite_r+0x15c>
  4043f2:	f04f 30ff 	mov.w	r0, #4294967295
  4043f6:	e6b8      	b.n	40416a <__sfvwrite_r+0x66>
  4043f8:	9a01      	ldr	r2, [sp, #4]
  4043fa:	230c      	movs	r3, #12
  4043fc:	6013      	str	r3, [r2, #0]
  4043fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404402:	e71b      	b.n	40423c <__sfvwrite_r+0x138>
  404404:	7ffffc00 	.word	0x7ffffc00

00404408 <_fwalk>:
  404408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40440c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404410:	d01b      	beq.n	40444a <_fwalk+0x42>
  404412:	4688      	mov	r8, r1
  404414:	2600      	movs	r6, #0
  404416:	687d      	ldr	r5, [r7, #4]
  404418:	68bc      	ldr	r4, [r7, #8]
  40441a:	3d01      	subs	r5, #1
  40441c:	d40f      	bmi.n	40443e <_fwalk+0x36>
  40441e:	89a3      	ldrh	r3, [r4, #12]
  404420:	2b01      	cmp	r3, #1
  404422:	f105 35ff 	add.w	r5, r5, #4294967295
  404426:	d906      	bls.n	404436 <_fwalk+0x2e>
  404428:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40442c:	3301      	adds	r3, #1
  40442e:	4620      	mov	r0, r4
  404430:	d001      	beq.n	404436 <_fwalk+0x2e>
  404432:	47c0      	blx	r8
  404434:	4306      	orrs	r6, r0
  404436:	1c6b      	adds	r3, r5, #1
  404438:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40443c:	d1ef      	bne.n	40441e <_fwalk+0x16>
  40443e:	683f      	ldr	r7, [r7, #0]
  404440:	2f00      	cmp	r7, #0
  404442:	d1e8      	bne.n	404416 <_fwalk+0xe>
  404444:	4630      	mov	r0, r6
  404446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40444a:	463e      	mov	r6, r7
  40444c:	4630      	mov	r0, r6
  40444e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404452:	bf00      	nop

00404454 <_fwalk_reent>:
  404454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404458:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40445c:	d01f      	beq.n	40449e <_fwalk_reent+0x4a>
  40445e:	4688      	mov	r8, r1
  404460:	4606      	mov	r6, r0
  404462:	f04f 0900 	mov.w	r9, #0
  404466:	687d      	ldr	r5, [r7, #4]
  404468:	68bc      	ldr	r4, [r7, #8]
  40446a:	3d01      	subs	r5, #1
  40446c:	d411      	bmi.n	404492 <_fwalk_reent+0x3e>
  40446e:	89a3      	ldrh	r3, [r4, #12]
  404470:	2b01      	cmp	r3, #1
  404472:	f105 35ff 	add.w	r5, r5, #4294967295
  404476:	d908      	bls.n	40448a <_fwalk_reent+0x36>
  404478:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40447c:	3301      	adds	r3, #1
  40447e:	4621      	mov	r1, r4
  404480:	4630      	mov	r0, r6
  404482:	d002      	beq.n	40448a <_fwalk_reent+0x36>
  404484:	47c0      	blx	r8
  404486:	ea49 0900 	orr.w	r9, r9, r0
  40448a:	1c6b      	adds	r3, r5, #1
  40448c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404490:	d1ed      	bne.n	40446e <_fwalk_reent+0x1a>
  404492:	683f      	ldr	r7, [r7, #0]
  404494:	2f00      	cmp	r7, #0
  404496:	d1e6      	bne.n	404466 <_fwalk_reent+0x12>
  404498:	4648      	mov	r0, r9
  40449a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40449e:	46b9      	mov	r9, r7
  4044a0:	4648      	mov	r0, r9
  4044a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4044a6:	bf00      	nop

004044a8 <iswspace>:
  4044a8:	28ff      	cmp	r0, #255	; 0xff
  4044aa:	d807      	bhi.n	4044bc <iswspace+0x14>
  4044ac:	4b04      	ldr	r3, [pc, #16]	; (4044c0 <iswspace+0x18>)
  4044ae:	681b      	ldr	r3, [r3, #0]
  4044b0:	4418      	add	r0, r3
  4044b2:	7840      	ldrb	r0, [r0, #1]
  4044b4:	f000 0008 	and.w	r0, r0, #8
  4044b8:	b2c0      	uxtb	r0, r0
  4044ba:	4770      	bx	lr
  4044bc:	2000      	movs	r0, #0
  4044be:	4770      	bx	lr
  4044c0:	2000084c 	.word	0x2000084c

004044c4 <__locale_charset>:
  4044c4:	4800      	ldr	r0, [pc, #0]	; (4044c8 <__locale_charset+0x4>)
  4044c6:	4770      	bx	lr
  4044c8:	20000850 	.word	0x20000850

004044cc <__locale_mb_cur_max>:
  4044cc:	4b01      	ldr	r3, [pc, #4]	; (4044d4 <__locale_mb_cur_max+0x8>)
  4044ce:	6818      	ldr	r0, [r3, #0]
  4044d0:	4770      	bx	lr
  4044d2:	bf00      	nop
  4044d4:	20000870 	.word	0x20000870

004044d8 <__swhatbuf_r>:
  4044d8:	b570      	push	{r4, r5, r6, lr}
  4044da:	460d      	mov	r5, r1
  4044dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4044e0:	2900      	cmp	r1, #0
  4044e2:	b090      	sub	sp, #64	; 0x40
  4044e4:	4614      	mov	r4, r2
  4044e6:	461e      	mov	r6, r3
  4044e8:	db14      	blt.n	404514 <__swhatbuf_r+0x3c>
  4044ea:	aa01      	add	r2, sp, #4
  4044ec:	f000 fef2 	bl	4052d4 <_fstat_r>
  4044f0:	2800      	cmp	r0, #0
  4044f2:	db0f      	blt.n	404514 <__swhatbuf_r+0x3c>
  4044f4:	9a02      	ldr	r2, [sp, #8]
  4044f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4044fa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4044fe:	fab2 f282 	clz	r2, r2
  404502:	0952      	lsrs	r2, r2, #5
  404504:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404508:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40450c:	6032      	str	r2, [r6, #0]
  40450e:	6023      	str	r3, [r4, #0]
  404510:	b010      	add	sp, #64	; 0x40
  404512:	bd70      	pop	{r4, r5, r6, pc}
  404514:	89a8      	ldrh	r0, [r5, #12]
  404516:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40451a:	b282      	uxth	r2, r0
  40451c:	2000      	movs	r0, #0
  40451e:	6030      	str	r0, [r6, #0]
  404520:	b11a      	cbz	r2, 40452a <__swhatbuf_r+0x52>
  404522:	2340      	movs	r3, #64	; 0x40
  404524:	6023      	str	r3, [r4, #0]
  404526:	b010      	add	sp, #64	; 0x40
  404528:	bd70      	pop	{r4, r5, r6, pc}
  40452a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40452e:	4610      	mov	r0, r2
  404530:	6023      	str	r3, [r4, #0]
  404532:	b010      	add	sp, #64	; 0x40
  404534:	bd70      	pop	{r4, r5, r6, pc}
  404536:	bf00      	nop

00404538 <__smakebuf_r>:
  404538:	898a      	ldrh	r2, [r1, #12]
  40453a:	0792      	lsls	r2, r2, #30
  40453c:	460b      	mov	r3, r1
  40453e:	d506      	bpl.n	40454e <__smakebuf_r+0x16>
  404540:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404544:	2101      	movs	r1, #1
  404546:	601a      	str	r2, [r3, #0]
  404548:	611a      	str	r2, [r3, #16]
  40454a:	6159      	str	r1, [r3, #20]
  40454c:	4770      	bx	lr
  40454e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404550:	b083      	sub	sp, #12
  404552:	ab01      	add	r3, sp, #4
  404554:	466a      	mov	r2, sp
  404556:	460c      	mov	r4, r1
  404558:	4605      	mov	r5, r0
  40455a:	f7ff ffbd 	bl	4044d8 <__swhatbuf_r>
  40455e:	9900      	ldr	r1, [sp, #0]
  404560:	4606      	mov	r6, r0
  404562:	4628      	mov	r0, r5
  404564:	f7fc fd6e 	bl	401044 <_malloc_r>
  404568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40456c:	b1d0      	cbz	r0, 4045a4 <__smakebuf_r+0x6c>
  40456e:	9a01      	ldr	r2, [sp, #4]
  404570:	4f12      	ldr	r7, [pc, #72]	; (4045bc <__smakebuf_r+0x84>)
  404572:	9900      	ldr	r1, [sp, #0]
  404574:	63ef      	str	r7, [r5, #60]	; 0x3c
  404576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40457a:	81a3      	strh	r3, [r4, #12]
  40457c:	6020      	str	r0, [r4, #0]
  40457e:	6120      	str	r0, [r4, #16]
  404580:	6161      	str	r1, [r4, #20]
  404582:	b91a      	cbnz	r2, 40458c <__smakebuf_r+0x54>
  404584:	4333      	orrs	r3, r6
  404586:	81a3      	strh	r3, [r4, #12]
  404588:	b003      	add	sp, #12
  40458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40458c:	4628      	mov	r0, r5
  40458e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404592:	f000 feb3 	bl	4052fc <_isatty_r>
  404596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40459a:	2800      	cmp	r0, #0
  40459c:	d0f2      	beq.n	404584 <__smakebuf_r+0x4c>
  40459e:	f043 0301 	orr.w	r3, r3, #1
  4045a2:	e7ef      	b.n	404584 <__smakebuf_r+0x4c>
  4045a4:	059a      	lsls	r2, r3, #22
  4045a6:	d4ef      	bmi.n	404588 <__smakebuf_r+0x50>
  4045a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4045ac:	f043 0302 	orr.w	r3, r3, #2
  4045b0:	2101      	movs	r1, #1
  4045b2:	81a3      	strh	r3, [r4, #12]
  4045b4:	6022      	str	r2, [r4, #0]
  4045b6:	6122      	str	r2, [r4, #16]
  4045b8:	6161      	str	r1, [r4, #20]
  4045ba:	e7e5      	b.n	404588 <__smakebuf_r+0x50>
  4045bc:	00403b09 	.word	0x00403b09

004045c0 <_mbrtowc_r>:
  4045c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4045c4:	b083      	sub	sp, #12
  4045c6:	4605      	mov	r5, r0
  4045c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4045ca:	4614      	mov	r4, r2
  4045cc:	b1b2      	cbz	r2, 4045fc <_mbrtowc_r+0x3c>
  4045ce:	4698      	mov	r8, r3
  4045d0:	4b10      	ldr	r3, [pc, #64]	; (404614 <_mbrtowc_r+0x54>)
  4045d2:	460f      	mov	r7, r1
  4045d4:	f8d3 9000 	ldr.w	r9, [r3]
  4045d8:	f7ff ff74 	bl	4044c4 <__locale_charset>
  4045dc:	4643      	mov	r3, r8
  4045de:	e88d 0041 	stmia.w	sp, {r0, r6}
  4045e2:	4622      	mov	r2, r4
  4045e4:	4639      	mov	r1, r7
  4045e6:	4628      	mov	r0, r5
  4045e8:	47c8      	blx	r9
  4045ea:	1c43      	adds	r3, r0, #1
  4045ec:	d103      	bne.n	4045f6 <_mbrtowc_r+0x36>
  4045ee:	2200      	movs	r2, #0
  4045f0:	238a      	movs	r3, #138	; 0x8a
  4045f2:	6032      	str	r2, [r6, #0]
  4045f4:	602b      	str	r3, [r5, #0]
  4045f6:	b003      	add	sp, #12
  4045f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4045fc:	4b05      	ldr	r3, [pc, #20]	; (404614 <_mbrtowc_r+0x54>)
  4045fe:	681f      	ldr	r7, [r3, #0]
  404600:	f7ff ff60 	bl	4044c4 <__locale_charset>
  404604:	4621      	mov	r1, r4
  404606:	e88d 0041 	stmia.w	sp, {r0, r6}
  40460a:	2301      	movs	r3, #1
  40460c:	4a02      	ldr	r2, [pc, #8]	; (404618 <_mbrtowc_r+0x58>)
  40460e:	4628      	mov	r0, r5
  404610:	47b8      	blx	r7
  404612:	e7ea      	b.n	4045ea <_mbrtowc_r+0x2a>
  404614:	20000874 	.word	0x20000874
  404618:	004056e8 	.word	0x004056e8

0040461c <__ascii_mbtowc>:
  40461c:	b082      	sub	sp, #8
  40461e:	b149      	cbz	r1, 404634 <__ascii_mbtowc+0x18>
  404620:	b15a      	cbz	r2, 40463a <__ascii_mbtowc+0x1e>
  404622:	b16b      	cbz	r3, 404640 <__ascii_mbtowc+0x24>
  404624:	7813      	ldrb	r3, [r2, #0]
  404626:	600b      	str	r3, [r1, #0]
  404628:	7812      	ldrb	r2, [r2, #0]
  40462a:	1c10      	adds	r0, r2, #0
  40462c:	bf18      	it	ne
  40462e:	2001      	movne	r0, #1
  404630:	b002      	add	sp, #8
  404632:	4770      	bx	lr
  404634:	a901      	add	r1, sp, #4
  404636:	2a00      	cmp	r2, #0
  404638:	d1f3      	bne.n	404622 <__ascii_mbtowc+0x6>
  40463a:	4610      	mov	r0, r2
  40463c:	b002      	add	sp, #8
  40463e:	4770      	bx	lr
  404640:	f06f 0001 	mvn.w	r0, #1
  404644:	e7f4      	b.n	404630 <__ascii_mbtowc+0x14>
  404646:	bf00      	nop
	...

00404650 <memchr>:
  404650:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404654:	2a10      	cmp	r2, #16
  404656:	db2b      	blt.n	4046b0 <memchr+0x60>
  404658:	f010 0f07 	tst.w	r0, #7
  40465c:	d008      	beq.n	404670 <memchr+0x20>
  40465e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404662:	3a01      	subs	r2, #1
  404664:	428b      	cmp	r3, r1
  404666:	d02d      	beq.n	4046c4 <memchr+0x74>
  404668:	f010 0f07 	tst.w	r0, #7
  40466c:	b342      	cbz	r2, 4046c0 <memchr+0x70>
  40466e:	d1f6      	bne.n	40465e <memchr+0xe>
  404670:	b4f0      	push	{r4, r5, r6, r7}
  404672:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404676:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40467a:	f022 0407 	bic.w	r4, r2, #7
  40467e:	f07f 0700 	mvns.w	r7, #0
  404682:	2300      	movs	r3, #0
  404684:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404688:	3c08      	subs	r4, #8
  40468a:	ea85 0501 	eor.w	r5, r5, r1
  40468e:	ea86 0601 	eor.w	r6, r6, r1
  404692:	fa85 f547 	uadd8	r5, r5, r7
  404696:	faa3 f587 	sel	r5, r3, r7
  40469a:	fa86 f647 	uadd8	r6, r6, r7
  40469e:	faa5 f687 	sel	r6, r5, r7
  4046a2:	b98e      	cbnz	r6, 4046c8 <memchr+0x78>
  4046a4:	d1ee      	bne.n	404684 <memchr+0x34>
  4046a6:	bcf0      	pop	{r4, r5, r6, r7}
  4046a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4046ac:	f002 0207 	and.w	r2, r2, #7
  4046b0:	b132      	cbz	r2, 4046c0 <memchr+0x70>
  4046b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4046b6:	3a01      	subs	r2, #1
  4046b8:	ea83 0301 	eor.w	r3, r3, r1
  4046bc:	b113      	cbz	r3, 4046c4 <memchr+0x74>
  4046be:	d1f8      	bne.n	4046b2 <memchr+0x62>
  4046c0:	2000      	movs	r0, #0
  4046c2:	4770      	bx	lr
  4046c4:	3801      	subs	r0, #1
  4046c6:	4770      	bx	lr
  4046c8:	2d00      	cmp	r5, #0
  4046ca:	bf06      	itte	eq
  4046cc:	4635      	moveq	r5, r6
  4046ce:	3803      	subeq	r0, #3
  4046d0:	3807      	subne	r0, #7
  4046d2:	f015 0f01 	tst.w	r5, #1
  4046d6:	d107      	bne.n	4046e8 <memchr+0x98>
  4046d8:	3001      	adds	r0, #1
  4046da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4046de:	bf02      	ittt	eq
  4046e0:	3001      	addeq	r0, #1
  4046e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4046e6:	3001      	addeq	r0, #1
  4046e8:	bcf0      	pop	{r4, r5, r6, r7}
  4046ea:	3801      	subs	r0, #1
  4046ec:	4770      	bx	lr
  4046ee:	bf00      	nop

004046f0 <lflush>:
  4046f0:	8983      	ldrh	r3, [r0, #12]
  4046f2:	f003 0309 	and.w	r3, r3, #9
  4046f6:	2b09      	cmp	r3, #9
  4046f8:	d001      	beq.n	4046fe <lflush+0xe>
  4046fa:	2000      	movs	r0, #0
  4046fc:	4770      	bx	lr
  4046fe:	f7ff b9f1 	b.w	403ae4 <fflush>
  404702:	bf00      	nop

00404704 <__srefill_r>:
  404704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404706:	460c      	mov	r4, r1
  404708:	4605      	mov	r5, r0
  40470a:	b110      	cbz	r0, 404712 <__srefill_r+0xe>
  40470c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40470e:	2b00      	cmp	r3, #0
  404710:	d045      	beq.n	40479e <__srefill_r+0x9a>
  404712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404716:	b29a      	uxth	r2, r3
  404718:	0497      	lsls	r7, r2, #18
  40471a:	d407      	bmi.n	40472c <__srefill_r+0x28>
  40471c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40471e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404726:	6662      	str	r2, [r4, #100]	; 0x64
  404728:	81a3      	strh	r3, [r4, #12]
  40472a:	b29a      	uxth	r2, r3
  40472c:	2100      	movs	r1, #0
  40472e:	0696      	lsls	r6, r2, #26
  404730:	6061      	str	r1, [r4, #4]
  404732:	d431      	bmi.n	404798 <__srefill_r+0x94>
  404734:	0750      	lsls	r0, r2, #29
  404736:	d522      	bpl.n	40477e <__srefill_r+0x7a>
  404738:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40473a:	b161      	cbz	r1, 404756 <__srefill_r+0x52>
  40473c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404740:	4299      	cmp	r1, r3
  404742:	d002      	beq.n	40474a <__srefill_r+0x46>
  404744:	4628      	mov	r0, r5
  404746:	f7ff fbf5 	bl	403f34 <_free_r>
  40474a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40474c:	6063      	str	r3, [r4, #4]
  40474e:	2000      	movs	r0, #0
  404750:	6320      	str	r0, [r4, #48]	; 0x30
  404752:	2b00      	cmp	r3, #0
  404754:	d13f      	bne.n	4047d6 <__srefill_r+0xd2>
  404756:	6923      	ldr	r3, [r4, #16]
  404758:	2b00      	cmp	r3, #0
  40475a:	d04c      	beq.n	4047f6 <__srefill_r+0xf2>
  40475c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  404760:	b2be      	uxth	r6, r7
  404762:	07b3      	lsls	r3, r6, #30
  404764:	d11e      	bne.n	4047a4 <__srefill_r+0xa0>
  404766:	6922      	ldr	r2, [r4, #16]
  404768:	6022      	str	r2, [r4, #0]
  40476a:	4628      	mov	r0, r5
  40476c:	6963      	ldr	r3, [r4, #20]
  40476e:	6a25      	ldr	r5, [r4, #32]
  404770:	69e1      	ldr	r1, [r4, #28]
  404772:	47a8      	blx	r5
  404774:	2800      	cmp	r0, #0
  404776:	6060      	str	r0, [r4, #4]
  404778:	dd09      	ble.n	40478e <__srefill_r+0x8a>
  40477a:	2000      	movs	r0, #0
  40477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40477e:	06d1      	lsls	r1, r2, #27
  404780:	d53e      	bpl.n	404800 <__srefill_r+0xfc>
  404782:	0712      	lsls	r2, r2, #28
  404784:	d42a      	bmi.n	4047dc <__srefill_r+0xd8>
  404786:	f043 0304 	orr.w	r3, r3, #4
  40478a:	81a3      	strh	r3, [r4, #12]
  40478c:	e7e3      	b.n	404756 <__srefill_r+0x52>
  40478e:	89a3      	ldrh	r3, [r4, #12]
  404790:	d119      	bne.n	4047c6 <__srefill_r+0xc2>
  404792:	f043 0320 	orr.w	r3, r3, #32
  404796:	81a3      	strh	r3, [r4, #12]
  404798:	f04f 30ff 	mov.w	r0, #4294967295
  40479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40479e:	f7ff fa31 	bl	403c04 <__sinit>
  4047a2:	e7b6      	b.n	404712 <__srefill_r+0xe>
  4047a4:	4b1a      	ldr	r3, [pc, #104]	; (404810 <__srefill_r+0x10c>)
  4047a6:	491b      	ldr	r1, [pc, #108]	; (404814 <__srefill_r+0x110>)
  4047a8:	6818      	ldr	r0, [r3, #0]
  4047aa:	2301      	movs	r3, #1
  4047ac:	81a3      	strh	r3, [r4, #12]
  4047ae:	f006 0609 	and.w	r6, r6, #9
  4047b2:	f7ff fe29 	bl	404408 <_fwalk>
  4047b6:	2e09      	cmp	r6, #9
  4047b8:	81a7      	strh	r7, [r4, #12]
  4047ba:	d1d4      	bne.n	404766 <__srefill_r+0x62>
  4047bc:	4621      	mov	r1, r4
  4047be:	4628      	mov	r0, r5
  4047c0:	f7ff f8d6 	bl	403970 <__sflush_r>
  4047c4:	e7cf      	b.n	404766 <__srefill_r+0x62>
  4047c6:	2200      	movs	r2, #0
  4047c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047cc:	81a3      	strh	r3, [r4, #12]
  4047ce:	6062      	str	r2, [r4, #4]
  4047d0:	f04f 30ff 	mov.w	r0, #4294967295
  4047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4047d8:	6023      	str	r3, [r4, #0]
  4047da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047dc:	4621      	mov	r1, r4
  4047de:	4628      	mov	r0, r5
  4047e0:	f7ff f96a 	bl	403ab8 <_fflush_r>
  4047e4:	2800      	cmp	r0, #0
  4047e6:	d1d7      	bne.n	404798 <__srefill_r+0x94>
  4047e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ec:	60a0      	str	r0, [r4, #8]
  4047ee:	61a0      	str	r0, [r4, #24]
  4047f0:	f023 0308 	bic.w	r3, r3, #8
  4047f4:	e7c7      	b.n	404786 <__srefill_r+0x82>
  4047f6:	4621      	mov	r1, r4
  4047f8:	4628      	mov	r0, r5
  4047fa:	f7ff fe9d 	bl	404538 <__smakebuf_r>
  4047fe:	e7ad      	b.n	40475c <__srefill_r+0x58>
  404800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404804:	2209      	movs	r2, #9
  404806:	602a      	str	r2, [r5, #0]
  404808:	f04f 30ff 	mov.w	r0, #4294967295
  40480c:	81a3      	strh	r3, [r4, #12]
  40480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404810:	00405788 	.word	0x00405788
  404814:	004046f1 	.word	0x004046f1

00404818 <__sccl>:
  404818:	b470      	push	{r4, r5, r6}
  40481a:	780d      	ldrb	r5, [r1, #0]
  40481c:	2d5e      	cmp	r5, #94	; 0x5e
  40481e:	d02f      	beq.n	404880 <__sccl+0x68>
  404820:	2200      	movs	r2, #0
  404822:	3101      	adds	r1, #1
  404824:	4616      	mov	r6, r2
  404826:	1e43      	subs	r3, r0, #1
  404828:	f100 04ff 	add.w	r4, r0, #255	; 0xff
  40482c:	f803 2f01 	strb.w	r2, [r3, #1]!
  404830:	42a3      	cmp	r3, r4
  404832:	d1fb      	bne.n	40482c <__sccl+0x14>
  404834:	b185      	cbz	r5, 404858 <__sccl+0x40>
  404836:	f086 0201 	eor.w	r2, r6, #1
  40483a:	5542      	strb	r2, [r0, r5]
  40483c:	1c4c      	adds	r4, r1, #1
  40483e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404842:	2b2d      	cmp	r3, #45	; 0x2d
  404844:	d00e      	beq.n	404864 <__sccl+0x4c>
  404846:	2b5d      	cmp	r3, #93	; 0x5d
  404848:	d009      	beq.n	40485e <__sccl+0x46>
  40484a:	b113      	cbz	r3, 404852 <__sccl+0x3a>
  40484c:	461d      	mov	r5, r3
  40484e:	4621      	mov	r1, r4
  404850:	e7f3      	b.n	40483a <__sccl+0x22>
  404852:	4608      	mov	r0, r1
  404854:	bc70      	pop	{r4, r5, r6}
  404856:	4770      	bx	lr
  404858:	1e48      	subs	r0, r1, #1
  40485a:	bc70      	pop	{r4, r5, r6}
  40485c:	4770      	bx	lr
  40485e:	4620      	mov	r0, r4
  404860:	bc70      	pop	{r4, r5, r6}
  404862:	4770      	bx	lr
  404864:	784e      	ldrb	r6, [r1, #1]
  404866:	2e5d      	cmp	r6, #93	; 0x5d
  404868:	d0f0      	beq.n	40484c <__sccl+0x34>
  40486a:	42b5      	cmp	r5, r6
  40486c:	dcee      	bgt.n	40484c <__sccl+0x34>
  40486e:	3102      	adds	r1, #2
  404870:	1943      	adds	r3, r0, r5
  404872:	3501      	adds	r5, #1
  404874:	42ae      	cmp	r6, r5
  404876:	f803 2f01 	strb.w	r2, [r3, #1]!
  40487a:	dcfa      	bgt.n	404872 <__sccl+0x5a>
  40487c:	3402      	adds	r4, #2
  40487e:	e7de      	b.n	40483e <__sccl+0x26>
  404880:	2201      	movs	r2, #1
  404882:	784d      	ldrb	r5, [r1, #1]
  404884:	4616      	mov	r6, r2
  404886:	3102      	adds	r1, #2
  404888:	e7cd      	b.n	404826 <__sccl+0xe>
  40488a:	bf00      	nop

0040488c <__sread>:
  40488c:	b510      	push	{r4, lr}
  40488e:	460c      	mov	r4, r1
  404890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404894:	f000 fd5a 	bl	40534c <_read_r>
  404898:	2800      	cmp	r0, #0
  40489a:	db03      	blt.n	4048a4 <__sread+0x18>
  40489c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40489e:	4403      	add	r3, r0
  4048a0:	6523      	str	r3, [r4, #80]	; 0x50
  4048a2:	bd10      	pop	{r4, pc}
  4048a4:	89a3      	ldrh	r3, [r4, #12]
  4048a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4048aa:	81a3      	strh	r3, [r4, #12]
  4048ac:	bd10      	pop	{r4, pc}
  4048ae:	bf00      	nop

004048b0 <__swrite>:
  4048b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048b4:	4616      	mov	r6, r2
  4048b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4048ba:	461f      	mov	r7, r3
  4048bc:	05d3      	lsls	r3, r2, #23
  4048be:	460c      	mov	r4, r1
  4048c0:	4605      	mov	r5, r0
  4048c2:	d507      	bpl.n	4048d4 <__swrite+0x24>
  4048c4:	2200      	movs	r2, #0
  4048c6:	2302      	movs	r3, #2
  4048c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4048cc:	f000 fd28 	bl	405320 <_lseek_r>
  4048d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4048d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4048d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4048dc:	81a2      	strh	r2, [r4, #12]
  4048de:	463b      	mov	r3, r7
  4048e0:	4632      	mov	r2, r6
  4048e2:	4628      	mov	r0, r5
  4048e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4048e8:	f000 bc38 	b.w	40515c <_write_r>

004048ec <__sseek>:
  4048ec:	b510      	push	{r4, lr}
  4048ee:	460c      	mov	r4, r1
  4048f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4048f4:	f000 fd14 	bl	405320 <_lseek_r>
  4048f8:	89a3      	ldrh	r3, [r4, #12]
  4048fa:	1c42      	adds	r2, r0, #1
  4048fc:	bf0e      	itee	eq
  4048fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404906:	6520      	strne	r0, [r4, #80]	; 0x50
  404908:	81a3      	strh	r3, [r4, #12]
  40490a:	bd10      	pop	{r4, pc}

0040490c <__sclose>:
  40490c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404910:	f000 bc8c 	b.w	40522c <_close_r>

00404914 <_strtol_r>:
  404914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404918:	4c47      	ldr	r4, [pc, #284]	; (404a38 <_strtol_r+0x124>)
  40491a:	4683      	mov	fp, r0
  40491c:	460e      	mov	r6, r1
  40491e:	f8d4 e000 	ldr.w	lr, [r4]
  404922:	e000      	b.n	404926 <_strtol_r+0x12>
  404924:	4626      	mov	r6, r4
  404926:	4634      	mov	r4, r6
  404928:	f814 5b01 	ldrb.w	r5, [r4], #1
  40492c:	eb0e 0005 	add.w	r0, lr, r5
  404930:	7840      	ldrb	r0, [r0, #1]
  404932:	f000 0008 	and.w	r0, r0, #8
  404936:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  40493a:	2800      	cmp	r0, #0
  40493c:	d1f2      	bne.n	404924 <_strtol_r+0x10>
  40493e:	2d2d      	cmp	r5, #45	; 0x2d
  404940:	d05c      	beq.n	4049fc <_strtol_r+0xe8>
  404942:	2d2b      	cmp	r5, #43	; 0x2b
  404944:	bf04      	itt	eq
  404946:	7875      	ldrbeq	r5, [r6, #1]
  404948:	1cb4      	addeq	r4, r6, #2
  40494a:	2b00      	cmp	r3, #0
  40494c:	d03e      	beq.n	4049cc <_strtol_r+0xb8>
  40494e:	2b10      	cmp	r3, #16
  404950:	d060      	beq.n	404a14 <_strtol_r+0x100>
  404952:	469a      	mov	sl, r3
  404954:	f1b8 0f00 	cmp.w	r8, #0
  404958:	bf0c      	ite	eq
  40495a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40495e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  404962:	2700      	movs	r7, #0
  404964:	fbb0 f9fa 	udiv	r9, r0, sl
  404968:	46bc      	mov	ip, r7
  40496a:	fb0a 0019 	mls	r0, sl, r9, r0
  40496e:	e00c      	b.n	40498a <_strtol_r+0x76>
  404970:	3d30      	subs	r5, #48	; 0x30
  404972:	42ab      	cmp	r3, r5
  404974:	dd19      	ble.n	4049aa <_strtol_r+0x96>
  404976:	1c7e      	adds	r6, r7, #1
  404978:	d005      	beq.n	404986 <_strtol_r+0x72>
  40497a:	45cc      	cmp	ip, r9
  40497c:	d823      	bhi.n	4049c6 <_strtol_r+0xb2>
  40497e:	d020      	beq.n	4049c2 <_strtol_r+0xae>
  404980:	fb0a 5c0c 	mla	ip, sl, ip, r5
  404984:	2701      	movs	r7, #1
  404986:	f814 5b01 	ldrb.w	r5, [r4], #1
  40498a:	eb0e 0605 	add.w	r6, lr, r5
  40498e:	7876      	ldrb	r6, [r6, #1]
  404990:	f016 0f04 	tst.w	r6, #4
  404994:	d1ec      	bne.n	404970 <_strtol_r+0x5c>
  404996:	f016 0603 	ands.w	r6, r6, #3
  40499a:	d006      	beq.n	4049aa <_strtol_r+0x96>
  40499c:	2e01      	cmp	r6, #1
  40499e:	bf14      	ite	ne
  4049a0:	2657      	movne	r6, #87	; 0x57
  4049a2:	2637      	moveq	r6, #55	; 0x37
  4049a4:	1bad      	subs	r5, r5, r6
  4049a6:	42ab      	cmp	r3, r5
  4049a8:	dce5      	bgt.n	404976 <_strtol_r+0x62>
  4049aa:	1c7b      	adds	r3, r7, #1
  4049ac:	d016      	beq.n	4049dc <_strtol_r+0xc8>
  4049ae:	f1b8 0f00 	cmp.w	r8, #0
  4049b2:	d110      	bne.n	4049d6 <_strtol_r+0xc2>
  4049b4:	4660      	mov	r0, ip
  4049b6:	2a00      	cmp	r2, #0
  4049b8:	d039      	beq.n	404a2e <_strtol_r+0x11a>
  4049ba:	b9df      	cbnz	r7, 4049f4 <_strtol_r+0xe0>
  4049bc:	6011      	str	r1, [r2, #0]
  4049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049c2:	4285      	cmp	r5, r0
  4049c4:	dddc      	ble.n	404980 <_strtol_r+0x6c>
  4049c6:	f04f 37ff 	mov.w	r7, #4294967295
  4049ca:	e7dc      	b.n	404986 <_strtol_r+0x72>
  4049cc:	2d30      	cmp	r5, #48	; 0x30
  4049ce:	d01a      	beq.n	404a06 <_strtol_r+0xf2>
  4049d0:	230a      	movs	r3, #10
  4049d2:	469a      	mov	sl, r3
  4049d4:	e7be      	b.n	404954 <_strtol_r+0x40>
  4049d6:	f1cc 0c00 	rsb	ip, ip, #0
  4049da:	e7eb      	b.n	4049b4 <_strtol_r+0xa0>
  4049dc:	f1b8 0f00 	cmp.w	r8, #0
  4049e0:	f04f 0322 	mov.w	r3, #34	; 0x22
  4049e4:	bf0c      	ite	eq
  4049e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4049ea:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4049ee:	f8cb 3000 	str.w	r3, [fp]
  4049f2:	b1f2      	cbz	r2, 404a32 <_strtol_r+0x11e>
  4049f4:	1e61      	subs	r1, r4, #1
  4049f6:	6011      	str	r1, [r2, #0]
  4049f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049fc:	1cb4      	adds	r4, r6, #2
  4049fe:	7875      	ldrb	r5, [r6, #1]
  404a00:	f04f 0801 	mov.w	r8, #1
  404a04:	e7a1      	b.n	40494a <_strtol_r+0x36>
  404a06:	7823      	ldrb	r3, [r4, #0]
  404a08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404a0c:	2b58      	cmp	r3, #88	; 0x58
  404a0e:	d008      	beq.n	404a22 <_strtol_r+0x10e>
  404a10:	2308      	movs	r3, #8
  404a12:	e79e      	b.n	404952 <_strtol_r+0x3e>
  404a14:	2d30      	cmp	r5, #48	; 0x30
  404a16:	d19c      	bne.n	404952 <_strtol_r+0x3e>
  404a18:	7820      	ldrb	r0, [r4, #0]
  404a1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  404a1e:	2858      	cmp	r0, #88	; 0x58
  404a20:	d197      	bne.n	404952 <_strtol_r+0x3e>
  404a22:	f04f 0a10 	mov.w	sl, #16
  404a26:	7865      	ldrb	r5, [r4, #1]
  404a28:	4653      	mov	r3, sl
  404a2a:	3402      	adds	r4, #2
  404a2c:	e792      	b.n	404954 <_strtol_r+0x40>
  404a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a36:	bf00      	nop
  404a38:	2000084c 	.word	0x2000084c

00404a3c <_strtoll_r>:
  404a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a40:	4c69      	ldr	r4, [pc, #420]	; (404be8 <_strtoll_r+0x1ac>)
  404a42:	b087      	sub	sp, #28
  404a44:	469b      	mov	fp, r3
  404a46:	9202      	str	r2, [sp, #8]
  404a48:	9104      	str	r1, [sp, #16]
  404a4a:	9005      	str	r0, [sp, #20]
  404a4c:	460a      	mov	r2, r1
  404a4e:	f8d4 a000 	ldr.w	sl, [r4]
  404a52:	e000      	b.n	404a56 <_strtoll_r+0x1a>
  404a54:	462a      	mov	r2, r5
  404a56:	4615      	mov	r5, r2
  404a58:	f815 4b01 	ldrb.w	r4, [r5], #1
  404a5c:	eb0a 0304 	add.w	r3, sl, r4
  404a60:	785b      	ldrb	r3, [r3, #1]
  404a62:	f003 0308 	and.w	r3, r3, #8
  404a66:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  404a6a:	2b00      	cmp	r3, #0
  404a6c:	d1f2      	bne.n	404a54 <_strtoll_r+0x18>
  404a6e:	2c2d      	cmp	r4, #45	; 0x2d
  404a70:	f000 8083 	beq.w	404b7a <_strtoll_r+0x13e>
  404a74:	2c2b      	cmp	r4, #43	; 0x2b
  404a76:	bf08      	it	eq
  404a78:	7854      	ldrbeq	r4, [r2, #1]
  404a7a:	9101      	str	r1, [sp, #4]
  404a7c:	bf08      	it	eq
  404a7e:	1c95      	addeq	r5, r2, #2
  404a80:	f1bb 0f00 	cmp.w	fp, #0
  404a84:	d00c      	beq.n	404aa0 <_strtoll_r+0x64>
  404a86:	f1bb 0f10 	cmp.w	fp, #16
  404a8a:	f000 8095 	beq.w	404bb8 <_strtoll_r+0x17c>
  404a8e:	9b01      	ldr	r3, [sp, #4]
  404a90:	465e      	mov	r6, fp
  404a92:	17f7      	asrs	r7, r6, #31
  404a94:	b96b      	cbnz	r3, 404ab2 <_strtoll_r+0x76>
  404a96:	f04f 38ff 	mov.w	r8, #4294967295
  404a9a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
  404a9e:	e00c      	b.n	404aba <_strtoll_r+0x7e>
  404aa0:	2c30      	cmp	r4, #48	; 0x30
  404aa2:	d07f      	beq.n	404ba4 <_strtoll_r+0x168>
  404aa4:	260a      	movs	r6, #10
  404aa6:	2700      	movs	r7, #0
  404aa8:	f04f 0b0a 	mov.w	fp, #10
  404aac:	9b01      	ldr	r3, [sp, #4]
  404aae:	2b00      	cmp	r3, #0
  404ab0:	d0f1      	beq.n	404a96 <_strtoll_r+0x5a>
  404ab2:	f04f 0800 	mov.w	r8, #0
  404ab6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
  404aba:	4640      	mov	r0, r8
  404abc:	4632      	mov	r2, r6
  404abe:	463b      	mov	r3, r7
  404ac0:	4649      	mov	r1, r9
  404ac2:	f000 fc59 	bl	405378 <__aeabi_uldivmod>
  404ac6:	463b      	mov	r3, r7
  404ac8:	9203      	str	r2, [sp, #12]
  404aca:	4640      	mov	r0, r8
  404acc:	4632      	mov	r2, r6
  404ace:	4649      	mov	r1, r9
  404ad0:	f000 fc52 	bl	405378 <__aeabi_uldivmod>
  404ad4:	f04f 0e00 	mov.w	lr, #0
  404ad8:	2200      	movs	r2, #0
  404ada:	2300      	movs	r3, #0
  404adc:	f8dd 800c 	ldr.w	r8, [sp, #12]
  404ae0:	e01b      	b.n	404b1a <_strtoll_r+0xde>
  404ae2:	3c30      	subs	r4, #48	; 0x30
  404ae4:	45a3      	cmp	fp, r4
  404ae6:	dd2d      	ble.n	404b44 <_strtoll_r+0x108>
  404ae8:	f1be 3fff 	cmp.w	lr, #4294967295
  404aec:	d013      	beq.n	404b16 <_strtoll_r+0xda>
  404aee:	4299      	cmp	r1, r3
  404af0:	bf08      	it	eq
  404af2:	4290      	cmpeq	r0, r2
  404af4:	d33e      	bcc.n	404b74 <_strtoll_r+0x138>
  404af6:	428b      	cmp	r3, r1
  404af8:	bf08      	it	eq
  404afa:	4282      	cmpeq	r2, r0
  404afc:	d038      	beq.n	404b70 <_strtoll_r+0x134>
  404afe:	fb02 fe07 	mul.w	lr, r2, r7
  404b02:	fb06 ee03 	mla	lr, r6, r3, lr
  404b06:	fba2 2306 	umull	r2, r3, r2, r6
  404b0a:	4473      	add	r3, lr
  404b0c:	1912      	adds	r2, r2, r4
  404b0e:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
  404b12:	f04f 0e01 	mov.w	lr, #1
  404b16:	f815 4b01 	ldrb.w	r4, [r5], #1
  404b1a:	eb0a 0c04 	add.w	ip, sl, r4
  404b1e:	f89c c001 	ldrb.w	ip, [ip, #1]
  404b22:	f01c 0f04 	tst.w	ip, #4
  404b26:	d1dc      	bne.n	404ae2 <_strtoll_r+0xa6>
  404b28:	f01c 0c03 	ands.w	ip, ip, #3
  404b2c:	d00a      	beq.n	404b44 <_strtoll_r+0x108>
  404b2e:	f1bc 0f01 	cmp.w	ip, #1
  404b32:	bf14      	ite	ne
  404b34:	f04f 0c57 	movne.w	ip, #87	; 0x57
  404b38:	f04f 0c37 	moveq.w	ip, #55	; 0x37
  404b3c:	ebcc 0404 	rsb	r4, ip, r4
  404b40:	45a3      	cmp	fp, r4
  404b42:	dcd1      	bgt.n	404ae8 <_strtoll_r+0xac>
  404b44:	f1be 3fff 	cmp.w	lr, #4294967295
  404b48:	d01c      	beq.n	404b84 <_strtoll_r+0x148>
  404b4a:	9901      	ldr	r1, [sp, #4]
  404b4c:	b111      	cbz	r1, 404b54 <_strtoll_r+0x118>
  404b4e:	4252      	negs	r2, r2
  404b50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404b54:	9902      	ldr	r1, [sp, #8]
  404b56:	2900      	cmp	r1, #0
  404b58:	d040      	beq.n	404bdc <_strtoll_r+0x1a0>
  404b5a:	f1be 0f00 	cmp.w	lr, #0
  404b5e:	d11d      	bne.n	404b9c <_strtoll_r+0x160>
  404b60:	9d04      	ldr	r5, [sp, #16]
  404b62:	4610      	mov	r0, r2
  404b64:	4619      	mov	r1, r3
  404b66:	9b02      	ldr	r3, [sp, #8]
  404b68:	601d      	str	r5, [r3, #0]
  404b6a:	b007      	add	sp, #28
  404b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b70:	4544      	cmp	r4, r8
  404b72:	ddc4      	ble.n	404afe <_strtoll_r+0xc2>
  404b74:	f04f 3eff 	mov.w	lr, #4294967295
  404b78:	e7cd      	b.n	404b16 <_strtoll_r+0xda>
  404b7a:	2301      	movs	r3, #1
  404b7c:	1c95      	adds	r5, r2, #2
  404b7e:	7854      	ldrb	r4, [r2, #1]
  404b80:	9301      	str	r3, [sp, #4]
  404b82:	e77d      	b.n	404a80 <_strtoll_r+0x44>
  404b84:	9b01      	ldr	r3, [sp, #4]
  404b86:	bb2b      	cbnz	r3, 404bd4 <_strtoll_r+0x198>
  404b88:	f04f 30ff 	mov.w	r0, #4294967295
  404b8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404b90:	9a05      	ldr	r2, [sp, #20]
  404b92:	2322      	movs	r3, #34	; 0x22
  404b94:	6013      	str	r3, [r2, #0]
  404b96:	9b02      	ldr	r3, [sp, #8]
  404b98:	b913      	cbnz	r3, 404ba0 <_strtoll_r+0x164>
  404b9a:	e7e6      	b.n	404b6a <_strtoll_r+0x12e>
  404b9c:	4610      	mov	r0, r2
  404b9e:	4619      	mov	r1, r3
  404ba0:	3d01      	subs	r5, #1
  404ba2:	e7e0      	b.n	404b66 <_strtoll_r+0x12a>
  404ba4:	782b      	ldrb	r3, [r5, #0]
  404ba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404baa:	2b58      	cmp	r3, #88	; 0x58
  404bac:	d00b      	beq.n	404bc6 <_strtoll_r+0x18a>
  404bae:	2608      	movs	r6, #8
  404bb0:	2700      	movs	r7, #0
  404bb2:	f04f 0b08 	mov.w	fp, #8
  404bb6:	e779      	b.n	404aac <_strtoll_r+0x70>
  404bb8:	2c30      	cmp	r4, #48	; 0x30
  404bba:	d112      	bne.n	404be2 <_strtoll_r+0x1a6>
  404bbc:	782b      	ldrb	r3, [r5, #0]
  404bbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404bc2:	2b58      	cmp	r3, #88	; 0x58
  404bc4:	d10d      	bne.n	404be2 <_strtoll_r+0x1a6>
  404bc6:	786c      	ldrb	r4, [r5, #1]
  404bc8:	2610      	movs	r6, #16
  404bca:	2700      	movs	r7, #0
  404bcc:	3502      	adds	r5, #2
  404bce:	f04f 0b10 	mov.w	fp, #16
  404bd2:	e76b      	b.n	404aac <_strtoll_r+0x70>
  404bd4:	2000      	movs	r0, #0
  404bd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404bda:	e7d9      	b.n	404b90 <_strtoll_r+0x154>
  404bdc:	4610      	mov	r0, r2
  404bde:	4619      	mov	r1, r3
  404be0:	e7c3      	b.n	404b6a <_strtoll_r+0x12e>
  404be2:	2610      	movs	r6, #16
  404be4:	2700      	movs	r7, #0
  404be6:	e761      	b.n	404aac <_strtoll_r+0x70>
  404be8:	2000084c 	.word	0x2000084c

00404bec <_strtoul_r>:
  404bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bf0:	4c49      	ldr	r4, [pc, #292]	; (404d18 <_strtoul_r+0x12c>)
  404bf2:	4682      	mov	sl, r0
  404bf4:	460e      	mov	r6, r1
  404bf6:	f8d4 e000 	ldr.w	lr, [r4]
  404bfa:	e000      	b.n	404bfe <_strtoul_r+0x12>
  404bfc:	4626      	mov	r6, r4
  404bfe:	4634      	mov	r4, r6
  404c00:	f814 5b01 	ldrb.w	r5, [r4], #1
  404c04:	eb0e 0005 	add.w	r0, lr, r5
  404c08:	7840      	ldrb	r0, [r0, #1]
  404c0a:	f000 0008 	and.w	r0, r0, #8
  404c0e:	f000 0cff 	and.w	ip, r0, #255	; 0xff
  404c12:	2800      	cmp	r0, #0
  404c14:	d1f2      	bne.n	404bfc <_strtoul_r+0x10>
  404c16:	2d2d      	cmp	r5, #45	; 0x2d
  404c18:	d054      	beq.n	404cc4 <_strtoul_r+0xd8>
  404c1a:	2d2b      	cmp	r5, #43	; 0x2b
  404c1c:	bf04      	itt	eq
  404c1e:	7875      	ldrbeq	r5, [r6, #1]
  404c20:	1cb4      	addeq	r4, r6, #2
  404c22:	b15b      	cbz	r3, 404c3c <_strtoul_r+0x50>
  404c24:	2b10      	cmp	r3, #16
  404c26:	d05e      	beq.n	404ce6 <_strtoul_r+0xfa>
  404c28:	f04f 38ff 	mov.w	r8, #4294967295
  404c2c:	fbb8 f8f3 	udiv	r8, r8, r3
  404c30:	fb03 fb08 	mul.w	fp, r3, r8
  404c34:	ea6f 0b0b 	mvn.w	fp, fp
  404c38:	4699      	mov	r9, r3
  404c3a:	e007      	b.n	404c4c <_strtoul_r+0x60>
  404c3c:	2d30      	cmp	r5, #48	; 0x30
  404c3e:	d046      	beq.n	404cce <_strtoul_r+0xe2>
  404c40:	230a      	movs	r3, #10
  404c42:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 404d1c <_strtoul_r+0x130>
  404c46:	4699      	mov	r9, r3
  404c48:	f04f 0b05 	mov.w	fp, #5
  404c4c:	2700      	movs	r7, #0
  404c4e:	4638      	mov	r0, r7
  404c50:	e00c      	b.n	404c6c <_strtoul_r+0x80>
  404c52:	3d30      	subs	r5, #48	; 0x30
  404c54:	42ab      	cmp	r3, r5
  404c56:	dd19      	ble.n	404c8c <_strtoul_r+0xa0>
  404c58:	1c7e      	adds	r6, r7, #1
  404c5a:	d005      	beq.n	404c68 <_strtoul_r+0x7c>
  404c5c:	4540      	cmp	r0, r8
  404c5e:	d822      	bhi.n	404ca6 <_strtoul_r+0xba>
  404c60:	d01f      	beq.n	404ca2 <_strtoul_r+0xb6>
  404c62:	fb09 5000 	mla	r0, r9, r0, r5
  404c66:	2701      	movs	r7, #1
  404c68:	f814 5b01 	ldrb.w	r5, [r4], #1
  404c6c:	eb0e 0605 	add.w	r6, lr, r5
  404c70:	7876      	ldrb	r6, [r6, #1]
  404c72:	f016 0f04 	tst.w	r6, #4
  404c76:	d1ec      	bne.n	404c52 <_strtoul_r+0x66>
  404c78:	f016 0603 	ands.w	r6, r6, #3
  404c7c:	d006      	beq.n	404c8c <_strtoul_r+0xa0>
  404c7e:	2e01      	cmp	r6, #1
  404c80:	bf14      	ite	ne
  404c82:	2657      	movne	r6, #87	; 0x57
  404c84:	2637      	moveq	r6, #55	; 0x37
  404c86:	1bad      	subs	r5, r5, r6
  404c88:	42ab      	cmp	r3, r5
  404c8a:	dce5      	bgt.n	404c58 <_strtoul_r+0x6c>
  404c8c:	2f00      	cmp	r7, #0
  404c8e:	db0f      	blt.n	404cb0 <_strtoul_r+0xc4>
  404c90:	f1bc 0f00 	cmp.w	ip, #0
  404c94:	d000      	beq.n	404c98 <_strtoul_r+0xac>
  404c96:	4240      	negs	r0, r0
  404c98:	b142      	cbz	r2, 404cac <_strtoul_r+0xc0>
  404c9a:	b97f      	cbnz	r7, 404cbc <_strtoul_r+0xd0>
  404c9c:	6011      	str	r1, [r2, #0]
  404c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ca2:	455d      	cmp	r5, fp
  404ca4:	dddd      	ble.n	404c62 <_strtoul_r+0x76>
  404ca6:	f04f 37ff 	mov.w	r7, #4294967295
  404caa:	e7dd      	b.n	404c68 <_strtoul_r+0x7c>
  404cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cb0:	2322      	movs	r3, #34	; 0x22
  404cb2:	f8ca 3000 	str.w	r3, [sl]
  404cb6:	f04f 30ff 	mov.w	r0, #4294967295
  404cba:	b35a      	cbz	r2, 404d14 <_strtoul_r+0x128>
  404cbc:	1e61      	subs	r1, r4, #1
  404cbe:	6011      	str	r1, [r2, #0]
  404cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cc4:	1cb4      	adds	r4, r6, #2
  404cc6:	7875      	ldrb	r5, [r6, #1]
  404cc8:	f04f 0c01 	mov.w	ip, #1
  404ccc:	e7a9      	b.n	404c22 <_strtoul_r+0x36>
  404cce:	7823      	ldrb	r3, [r4, #0]
  404cd0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404cd4:	2b58      	cmp	r3, #88	; 0x58
  404cd6:	d00d      	beq.n	404cf4 <_strtoul_r+0x108>
  404cd8:	2308      	movs	r3, #8
  404cda:	4699      	mov	r9, r3
  404cdc:	f04f 0b07 	mov.w	fp, #7
  404ce0:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  404ce4:	e7b2      	b.n	404c4c <_strtoul_r+0x60>
  404ce6:	2d30      	cmp	r5, #48	; 0x30
  404ce8:	d10e      	bne.n	404d08 <_strtoul_r+0x11c>
  404cea:	7820      	ldrb	r0, [r4, #0]
  404cec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  404cf0:	2858      	cmp	r0, #88	; 0x58
  404cf2:	d109      	bne.n	404d08 <_strtoul_r+0x11c>
  404cf4:	f04f 0910 	mov.w	r9, #16
  404cf8:	7865      	ldrb	r5, [r4, #1]
  404cfa:	464b      	mov	r3, r9
  404cfc:	f04f 0b0f 	mov.w	fp, #15
  404d00:	3402      	adds	r4, #2
  404d02:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  404d06:	e7a1      	b.n	404c4c <_strtoul_r+0x60>
  404d08:	f04f 0b0f 	mov.w	fp, #15
  404d0c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  404d10:	4699      	mov	r9, r3
  404d12:	e79b      	b.n	404c4c <_strtoul_r+0x60>
  404d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d18:	2000084c 	.word	0x2000084c
  404d1c:	19999999 	.word	0x19999999

00404d20 <_strtoull_r>:
  404d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d24:	4c6e      	ldr	r4, [pc, #440]	; (404ee0 <_strtoull_r+0x1c0>)
  404d26:	b087      	sub	sp, #28
  404d28:	4692      	mov	sl, r2
  404d2a:	468b      	mov	fp, r1
  404d2c:	9004      	str	r0, [sp, #16]
  404d2e:	461f      	mov	r7, r3
  404d30:	460a      	mov	r2, r1
  404d32:	6826      	ldr	r6, [r4, #0]
  404d34:	e000      	b.n	404d38 <_strtoull_r+0x18>
  404d36:	462a      	mov	r2, r5
  404d38:	4615      	mov	r5, r2
  404d3a:	f815 4b01 	ldrb.w	r4, [r5], #1
  404d3e:	1933      	adds	r3, r6, r4
  404d40:	785b      	ldrb	r3, [r3, #1]
  404d42:	f003 0308 	and.w	r3, r3, #8
  404d46:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  404d4a:	2b00      	cmp	r3, #0
  404d4c:	d1f3      	bne.n	404d36 <_strtoull_r+0x16>
  404d4e:	2c2d      	cmp	r4, #45	; 0x2d
  404d50:	f000 808e 	beq.w	404e70 <_strtoull_r+0x150>
  404d54:	2c2b      	cmp	r4, #43	; 0x2b
  404d56:	bf08      	it	eq
  404d58:	7854      	ldrbeq	r4, [r2, #1]
  404d5a:	9103      	str	r1, [sp, #12]
  404d5c:	bf08      	it	eq
  404d5e:	1c95      	addeq	r5, r2, #2
  404d60:	b1df      	cbz	r7, 404d9a <_strtoull_r+0x7a>
  404d62:	2f10      	cmp	r7, #16
  404d64:	f000 809a 	beq.w	404e9c <_strtoull_r+0x17c>
  404d68:	ea4f 79e7 	mov.w	r9, r7, asr #31
  404d6c:	463a      	mov	r2, r7
  404d6e:	464b      	mov	r3, r9
  404d70:	f04f 30ff 	mov.w	r0, #4294967295
  404d74:	f04f 31ff 	mov.w	r1, #4294967295
  404d78:	f000 fafe 	bl	405378 <__aeabi_uldivmod>
  404d7c:	463a      	mov	r2, r7
  404d7e:	9001      	str	r0, [sp, #4]
  404d80:	9105      	str	r1, [sp, #20]
  404d82:	464b      	mov	r3, r9
  404d84:	f04f 30ff 	mov.w	r0, #4294967295
  404d88:	f04f 31ff 	mov.w	r1, #4294967295
  404d8c:	f000 faf4 	bl	405378 <__aeabi_uldivmod>
  404d90:	46b8      	mov	r8, r7
  404d92:	9202      	str	r2, [sp, #8]
  404d94:	9a01      	ldr	r2, [sp, #4]
  404d96:	9b05      	ldr	r3, [sp, #20]
  404d98:	e00b      	b.n	404db2 <_strtoull_r+0x92>
  404d9a:	2c30      	cmp	r4, #48	; 0x30
  404d9c:	d06d      	beq.n	404e7a <_strtoull_r+0x15a>
  404d9e:	2305      	movs	r3, #5
  404da0:	9302      	str	r3, [sp, #8]
  404da2:	4b50      	ldr	r3, [pc, #320]	; (404ee4 <_strtoull_r+0x1c4>)
  404da4:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
  404da8:	f04f 080a 	mov.w	r8, #10
  404dac:	f04f 0900 	mov.w	r9, #0
  404db0:	270a      	movs	r7, #10
  404db2:	f04f 0e00 	mov.w	lr, #0
  404db6:	2000      	movs	r0, #0
  404db8:	2100      	movs	r1, #0
  404dba:	9701      	str	r7, [sp, #4]
  404dbc:	e01c      	b.n	404df8 <_strtoull_r+0xd8>
  404dbe:	9f01      	ldr	r7, [sp, #4]
  404dc0:	3c30      	subs	r4, #48	; 0x30
  404dc2:	42a7      	cmp	r7, r4
  404dc4:	dd2e      	ble.n	404e24 <_strtoull_r+0x104>
  404dc6:	f1be 3fff 	cmp.w	lr, #4294967295
  404dca:	d013      	beq.n	404df4 <_strtoull_r+0xd4>
  404dcc:	428b      	cmp	r3, r1
  404dce:	bf08      	it	eq
  404dd0:	4282      	cmpeq	r2, r0
  404dd2:	d33e      	bcc.n	404e52 <_strtoull_r+0x132>
  404dd4:	4299      	cmp	r1, r3
  404dd6:	bf08      	it	eq
  404dd8:	4290      	cmpeq	r0, r2
  404dda:	d037      	beq.n	404e4c <_strtoull_r+0x12c>
  404ddc:	fb00 fc09 	mul.w	ip, r0, r9
  404de0:	fb08 cc01 	mla	ip, r8, r1, ip
  404de4:	fba0 0108 	umull	r0, r1, r0, r8
  404de8:	4461      	add	r1, ip
  404dea:	1900      	adds	r0, r0, r4
  404dec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
  404df0:	f04f 0e01 	mov.w	lr, #1
  404df4:	f815 4b01 	ldrb.w	r4, [r5], #1
  404df8:	eb06 0c04 	add.w	ip, r6, r4
  404dfc:	f89c c001 	ldrb.w	ip, [ip, #1]
  404e00:	f01c 0f04 	tst.w	ip, #4
  404e04:	d1db      	bne.n	404dbe <_strtoull_r+0x9e>
  404e06:	f01c 0c03 	ands.w	ip, ip, #3
  404e0a:	d00b      	beq.n	404e24 <_strtoull_r+0x104>
  404e0c:	f1bc 0f01 	cmp.w	ip, #1
  404e10:	bf14      	ite	ne
  404e12:	f04f 0c57 	movne.w	ip, #87	; 0x57
  404e16:	f04f 0c37 	moveq.w	ip, #55	; 0x37
  404e1a:	9f01      	ldr	r7, [sp, #4]
  404e1c:	ebcc 0404 	rsb	r4, ip, r4
  404e20:	42a7      	cmp	r7, r4
  404e22:	dcd0      	bgt.n	404dc6 <_strtoull_r+0xa6>
  404e24:	f1be 0f00 	cmp.w	lr, #0
  404e28:	db16      	blt.n	404e58 <_strtoull_r+0x138>
  404e2a:	9b03      	ldr	r3, [sp, #12]
  404e2c:	b113      	cbz	r3, 404e34 <_strtoull_r+0x114>
  404e2e:	4240      	negs	r0, r0
  404e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404e34:	f1ba 0f00 	cmp.w	sl, #0
  404e38:	d005      	beq.n	404e46 <_strtoull_r+0x126>
  404e3a:	f1be 0f00 	cmp.w	lr, #0
  404e3e:	d115      	bne.n	404e6c <_strtoull_r+0x14c>
  404e40:	465d      	mov	r5, fp
  404e42:	f8ca 5000 	str.w	r5, [sl]
  404e46:	b007      	add	sp, #28
  404e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e4c:	9f02      	ldr	r7, [sp, #8]
  404e4e:	42bc      	cmp	r4, r7
  404e50:	ddc4      	ble.n	404ddc <_strtoull_r+0xbc>
  404e52:	f04f 3eff 	mov.w	lr, #4294967295
  404e56:	e7cd      	b.n	404df4 <_strtoull_r+0xd4>
  404e58:	9a04      	ldr	r2, [sp, #16]
  404e5a:	2322      	movs	r3, #34	; 0x22
  404e5c:	6013      	str	r3, [r2, #0]
  404e5e:	f04f 30ff 	mov.w	r0, #4294967295
  404e62:	f04f 31ff 	mov.w	r1, #4294967295
  404e66:	f1ba 0f00 	cmp.w	sl, #0
  404e6a:	d0ec      	beq.n	404e46 <_strtoull_r+0x126>
  404e6c:	3d01      	subs	r5, #1
  404e6e:	e7e8      	b.n	404e42 <_strtoull_r+0x122>
  404e70:	2301      	movs	r3, #1
  404e72:	1c95      	adds	r5, r2, #2
  404e74:	7854      	ldrb	r4, [r2, #1]
  404e76:	9303      	str	r3, [sp, #12]
  404e78:	e772      	b.n	404d60 <_strtoull_r+0x40>
  404e7a:	782b      	ldrb	r3, [r5, #0]
  404e7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404e80:	2b58      	cmp	r3, #88	; 0x58
  404e82:	d012      	beq.n	404eaa <_strtoull_r+0x18a>
  404e84:	2307      	movs	r3, #7
  404e86:	9302      	str	r3, [sp, #8]
  404e88:	f04f 32ff 	mov.w	r2, #4294967295
  404e8c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  404e90:	f04f 0808 	mov.w	r8, #8
  404e94:	f04f 0900 	mov.w	r9, #0
  404e98:	2708      	movs	r7, #8
  404e9a:	e78a      	b.n	404db2 <_strtoull_r+0x92>
  404e9c:	2c30      	cmp	r4, #48	; 0x30
  404e9e:	d114      	bne.n	404eca <_strtoull_r+0x1aa>
  404ea0:	782b      	ldrb	r3, [r5, #0]
  404ea2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404ea6:	2b58      	cmp	r3, #88	; 0x58
  404ea8:	d10f      	bne.n	404eca <_strtoull_r+0x1aa>
  404eaa:	230f      	movs	r3, #15
  404eac:	9302      	str	r3, [sp, #8]
  404eae:	f04f 33ff 	mov.w	r3, #4294967295
  404eb2:	9301      	str	r3, [sp, #4]
  404eb4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
  404eb8:	786c      	ldrb	r4, [r5, #1]
  404eba:	9305      	str	r3, [sp, #20]
  404ebc:	3502      	adds	r5, #2
  404ebe:	f04f 0810 	mov.w	r8, #16
  404ec2:	f04f 0900 	mov.w	r9, #0
  404ec6:	2710      	movs	r7, #16
  404ec8:	e764      	b.n	404d94 <_strtoull_r+0x74>
  404eca:	230f      	movs	r3, #15
  404ecc:	9302      	str	r3, [sp, #8]
  404ece:	f04f 32ff 	mov.w	r2, #4294967295
  404ed2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
  404ed6:	f04f 0810 	mov.w	r8, #16
  404eda:	f04f 0900 	mov.w	r9, #0
  404ede:	e768      	b.n	404db2 <_strtoull_r+0x92>
  404ee0:	2000084c 	.word	0x2000084c
  404ee4:	19999999 	.word	0x19999999

00404ee8 <__submore>:
  404ee8:	f101 0340 	add.w	r3, r1, #64	; 0x40
  404eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ef0:	460c      	mov	r4, r1
  404ef2:	6b09      	ldr	r1, [r1, #48]	; 0x30
  404ef4:	4299      	cmp	r1, r3
  404ef6:	d014      	beq.n	404f22 <__submore+0x3a>
  404ef8:	6b66      	ldr	r6, [r4, #52]	; 0x34
  404efa:	0077      	lsls	r7, r6, #1
  404efc:	463a      	mov	r2, r7
  404efe:	f7fc fce5 	bl	4018cc <_realloc_r>
  404f02:	4605      	mov	r5, r0
  404f04:	b340      	cbz	r0, 404f58 <__submore+0x70>
  404f06:	eb00 0806 	add.w	r8, r0, r6
  404f0a:	4632      	mov	r2, r6
  404f0c:	4640      	mov	r0, r8
  404f0e:	4629      	mov	r1, r5
  404f10:	f7fc fb50 	bl	4015b4 <memcpy>
  404f14:	f8c4 8000 	str.w	r8, [r4]
  404f18:	6325      	str	r5, [r4, #48]	; 0x30
  404f1a:	6367      	str	r7, [r4, #52]	; 0x34
  404f1c:	2000      	movs	r0, #0
  404f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404f26:	f7fc f88d 	bl	401044 <_malloc_r>
  404f2a:	b1a8      	cbz	r0, 404f58 <__submore+0x70>
  404f2c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  404f30:	6320      	str	r0, [r4, #48]	; 0x30
  404f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404f36:	6362      	str	r2, [r4, #52]	; 0x34
  404f38:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  404f3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  404f40:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  404f44:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  404f48:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  404f4c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  404f50:	6020      	str	r0, [r4, #0]
  404f52:	2000      	movs	r0, #0
  404f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f58:	f04f 30ff 	mov.w	r0, #4294967295
  404f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404f60 <_ungetc_r>:
  404f60:	f1b1 3fff 	cmp.w	r1, #4294967295
  404f64:	d068      	beq.n	405038 <_ungetc_r+0xd8>
  404f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f68:	4607      	mov	r7, r0
  404f6a:	4614      	mov	r4, r2
  404f6c:	460e      	mov	r6, r1
  404f6e:	b110      	cbz	r0, 404f76 <_ungetc_r+0x16>
  404f70:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404f72:	2b00      	cmp	r3, #0
  404f74:	d030      	beq.n	404fd8 <_ungetc_r+0x78>
  404f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f7a:	049d      	lsls	r5, r3, #18
  404f7c:	d405      	bmi.n	404f8a <_ungetc_r+0x2a>
  404f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404f84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404f88:	6662      	str	r2, [r4, #100]	; 0x64
  404f8a:	f023 0320 	bic.w	r3, r3, #32
  404f8e:	b29a      	uxth	r2, r3
  404f90:	0750      	lsls	r0, r2, #29
  404f92:	81a3      	strh	r3, [r4, #12]
  404f94:	d406      	bmi.n	404fa4 <_ungetc_r+0x44>
  404f96:	06d1      	lsls	r1, r2, #27
  404f98:	d51b      	bpl.n	404fd2 <_ungetc_r+0x72>
  404f9a:	0712      	lsls	r2, r2, #28
  404f9c:	d438      	bmi.n	405010 <_ungetc_r+0xb0>
  404f9e:	f043 0304 	orr.w	r3, r3, #4
  404fa2:	81a3      	strh	r3, [r4, #12]
  404fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  404fa6:	b2f5      	uxtb	r5, r6
  404fa8:	b1cb      	cbz	r3, 404fde <_ungetc_r+0x7e>
  404faa:	6862      	ldr	r2, [r4, #4]
  404fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404fae:	429a      	cmp	r2, r3
  404fb0:	da09      	bge.n	404fc6 <_ungetc_r+0x66>
  404fb2:	6823      	ldr	r3, [r4, #0]
  404fb4:	1e5a      	subs	r2, r3, #1
  404fb6:	6022      	str	r2, [r4, #0]
  404fb8:	f803 6c01 	strb.w	r6, [r3, #-1]
  404fbc:	6863      	ldr	r3, [r4, #4]
  404fbe:	3301      	adds	r3, #1
  404fc0:	4628      	mov	r0, r5
  404fc2:	6063      	str	r3, [r4, #4]
  404fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404fc6:	4638      	mov	r0, r7
  404fc8:	4621      	mov	r1, r4
  404fca:	f7ff ff8d 	bl	404ee8 <__submore>
  404fce:	2800      	cmp	r0, #0
  404fd0:	d0ef      	beq.n	404fb2 <_ungetc_r+0x52>
  404fd2:	f04f 30ff 	mov.w	r0, #4294967295
  404fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404fd8:	f7fe fe14 	bl	403c04 <__sinit>
  404fdc:	e7cb      	b.n	404f76 <_ungetc_r+0x16>
  404fde:	6922      	ldr	r2, [r4, #16]
  404fe0:	6823      	ldr	r3, [r4, #0]
  404fe2:	b12a      	cbz	r2, 404ff0 <_ungetc_r+0x90>
  404fe4:	429a      	cmp	r2, r3
  404fe6:	d203      	bcs.n	404ff0 <_ungetc_r+0x90>
  404fe8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  404fec:	4295      	cmp	r5, r2
  404fee:	d01c      	beq.n	40502a <_ungetc_r+0xca>
  404ff0:	63a3      	str	r3, [r4, #56]	; 0x38
  404ff2:	4623      	mov	r3, r4
  404ff4:	6860      	ldr	r0, [r4, #4]
  404ff6:	63e0      	str	r0, [r4, #60]	; 0x3c
  404ff8:	f104 0140 	add.w	r1, r4, #64	; 0x40
  404ffc:	2203      	movs	r2, #3
  404ffe:	6362      	str	r2, [r4, #52]	; 0x34
  405000:	6321      	str	r1, [r4, #48]	; 0x30
  405002:	f803 6f42 	strb.w	r6, [r3, #66]!
  405006:	2201      	movs	r2, #1
  405008:	4628      	mov	r0, r5
  40500a:	6023      	str	r3, [r4, #0]
  40500c:	6062      	str	r2, [r4, #4]
  40500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405010:	4621      	mov	r1, r4
  405012:	4638      	mov	r0, r7
  405014:	f7fe fd50 	bl	403ab8 <_fflush_r>
  405018:	2800      	cmp	r0, #0
  40501a:	d1da      	bne.n	404fd2 <_ungetc_r+0x72>
  40501c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405020:	60a0      	str	r0, [r4, #8]
  405022:	61a0      	str	r0, [r4, #24]
  405024:	f023 0308 	bic.w	r3, r3, #8
  405028:	e7b9      	b.n	404f9e <_ungetc_r+0x3e>
  40502a:	6862      	ldr	r2, [r4, #4]
  40502c:	3b01      	subs	r3, #1
  40502e:	3201      	adds	r2, #1
  405030:	6023      	str	r3, [r4, #0]
  405032:	4628      	mov	r0, r5
  405034:	6062      	str	r2, [r4, #4]
  405036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405038:	f04f 30ff 	mov.w	r0, #4294967295
  40503c:	4770      	bx	lr
  40503e:	bf00      	nop

00405040 <__swbuf_r>:
  405040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405042:	460e      	mov	r6, r1
  405044:	4614      	mov	r4, r2
  405046:	4607      	mov	r7, r0
  405048:	b110      	cbz	r0, 405050 <__swbuf_r+0x10>
  40504a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40504c:	2b00      	cmp	r3, #0
  40504e:	d04a      	beq.n	4050e6 <__swbuf_r+0xa6>
  405050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405054:	69a3      	ldr	r3, [r4, #24]
  405056:	60a3      	str	r3, [r4, #8]
  405058:	b291      	uxth	r1, r2
  40505a:	0708      	lsls	r0, r1, #28
  40505c:	d538      	bpl.n	4050d0 <__swbuf_r+0x90>
  40505e:	6923      	ldr	r3, [r4, #16]
  405060:	2b00      	cmp	r3, #0
  405062:	d035      	beq.n	4050d0 <__swbuf_r+0x90>
  405064:	0489      	lsls	r1, r1, #18
  405066:	b2f5      	uxtb	r5, r6
  405068:	d515      	bpl.n	405096 <__swbuf_r+0x56>
  40506a:	6822      	ldr	r2, [r4, #0]
  40506c:	6961      	ldr	r1, [r4, #20]
  40506e:	1ad3      	subs	r3, r2, r3
  405070:	428b      	cmp	r3, r1
  405072:	da1c      	bge.n	4050ae <__swbuf_r+0x6e>
  405074:	3301      	adds	r3, #1
  405076:	68a1      	ldr	r1, [r4, #8]
  405078:	1c50      	adds	r0, r2, #1
  40507a:	3901      	subs	r1, #1
  40507c:	60a1      	str	r1, [r4, #8]
  40507e:	6020      	str	r0, [r4, #0]
  405080:	7016      	strb	r6, [r2, #0]
  405082:	6962      	ldr	r2, [r4, #20]
  405084:	429a      	cmp	r2, r3
  405086:	d01a      	beq.n	4050be <__swbuf_r+0x7e>
  405088:	89a3      	ldrh	r3, [r4, #12]
  40508a:	07db      	lsls	r3, r3, #31
  40508c:	d501      	bpl.n	405092 <__swbuf_r+0x52>
  40508e:	2d0a      	cmp	r5, #10
  405090:	d015      	beq.n	4050be <__swbuf_r+0x7e>
  405092:	4628      	mov	r0, r5
  405094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405096:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40509c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4050a0:	81a2      	strh	r2, [r4, #12]
  4050a2:	6822      	ldr	r2, [r4, #0]
  4050a4:	6661      	str	r1, [r4, #100]	; 0x64
  4050a6:	6961      	ldr	r1, [r4, #20]
  4050a8:	1ad3      	subs	r3, r2, r3
  4050aa:	428b      	cmp	r3, r1
  4050ac:	dbe2      	blt.n	405074 <__swbuf_r+0x34>
  4050ae:	4621      	mov	r1, r4
  4050b0:	4638      	mov	r0, r7
  4050b2:	f7fe fd01 	bl	403ab8 <_fflush_r>
  4050b6:	b940      	cbnz	r0, 4050ca <__swbuf_r+0x8a>
  4050b8:	6822      	ldr	r2, [r4, #0]
  4050ba:	2301      	movs	r3, #1
  4050bc:	e7db      	b.n	405076 <__swbuf_r+0x36>
  4050be:	4621      	mov	r1, r4
  4050c0:	4638      	mov	r0, r7
  4050c2:	f7fe fcf9 	bl	403ab8 <_fflush_r>
  4050c6:	2800      	cmp	r0, #0
  4050c8:	d0e3      	beq.n	405092 <__swbuf_r+0x52>
  4050ca:	f04f 30ff 	mov.w	r0, #4294967295
  4050ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050d0:	4621      	mov	r1, r4
  4050d2:	4638      	mov	r0, r7
  4050d4:	f7fe fbd8 	bl	403888 <__swsetup_r>
  4050d8:	2800      	cmp	r0, #0
  4050da:	d1f6      	bne.n	4050ca <__swbuf_r+0x8a>
  4050dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050e0:	6923      	ldr	r3, [r4, #16]
  4050e2:	b291      	uxth	r1, r2
  4050e4:	e7be      	b.n	405064 <__swbuf_r+0x24>
  4050e6:	f7fe fd8d 	bl	403c04 <__sinit>
  4050ea:	e7b1      	b.n	405050 <__swbuf_r+0x10>

004050ec <_wcrtomb_r>:
  4050ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050f0:	4605      	mov	r5, r0
  4050f2:	b086      	sub	sp, #24
  4050f4:	461e      	mov	r6, r3
  4050f6:	460c      	mov	r4, r1
  4050f8:	b1a1      	cbz	r1, 405124 <_wcrtomb_r+0x38>
  4050fa:	4b10      	ldr	r3, [pc, #64]	; (40513c <_wcrtomb_r+0x50>)
  4050fc:	4617      	mov	r7, r2
  4050fe:	f8d3 8000 	ldr.w	r8, [r3]
  405102:	f7ff f9df 	bl	4044c4 <__locale_charset>
  405106:	9600      	str	r6, [sp, #0]
  405108:	4603      	mov	r3, r0
  40510a:	463a      	mov	r2, r7
  40510c:	4621      	mov	r1, r4
  40510e:	4628      	mov	r0, r5
  405110:	47c0      	blx	r8
  405112:	1c43      	adds	r3, r0, #1
  405114:	d103      	bne.n	40511e <_wcrtomb_r+0x32>
  405116:	2200      	movs	r2, #0
  405118:	238a      	movs	r3, #138	; 0x8a
  40511a:	6032      	str	r2, [r6, #0]
  40511c:	602b      	str	r3, [r5, #0]
  40511e:	b006      	add	sp, #24
  405120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405124:	4b05      	ldr	r3, [pc, #20]	; (40513c <_wcrtomb_r+0x50>)
  405126:	681f      	ldr	r7, [r3, #0]
  405128:	f7ff f9cc 	bl	4044c4 <__locale_charset>
  40512c:	9600      	str	r6, [sp, #0]
  40512e:	4603      	mov	r3, r0
  405130:	4622      	mov	r2, r4
  405132:	a903      	add	r1, sp, #12
  405134:	4628      	mov	r0, r5
  405136:	47b8      	blx	r7
  405138:	e7eb      	b.n	405112 <_wcrtomb_r+0x26>
  40513a:	bf00      	nop
  40513c:	20000878 	.word	0x20000878

00405140 <__ascii_wctomb>:
  405140:	b121      	cbz	r1, 40514c <__ascii_wctomb+0xc>
  405142:	2aff      	cmp	r2, #255	; 0xff
  405144:	d804      	bhi.n	405150 <__ascii_wctomb+0x10>
  405146:	700a      	strb	r2, [r1, #0]
  405148:	2001      	movs	r0, #1
  40514a:	4770      	bx	lr
  40514c:	4608      	mov	r0, r1
  40514e:	4770      	bx	lr
  405150:	238a      	movs	r3, #138	; 0x8a
  405152:	6003      	str	r3, [r0, #0]
  405154:	f04f 30ff 	mov.w	r0, #4294967295
  405158:	4770      	bx	lr
  40515a:	bf00      	nop

0040515c <_write_r>:
  40515c:	b570      	push	{r4, r5, r6, lr}
  40515e:	460d      	mov	r5, r1
  405160:	4c08      	ldr	r4, [pc, #32]	; (405184 <_write_r+0x28>)
  405162:	4611      	mov	r1, r2
  405164:	4606      	mov	r6, r0
  405166:	461a      	mov	r2, r3
  405168:	4628      	mov	r0, r5
  40516a:	2300      	movs	r3, #0
  40516c:	6023      	str	r3, [r4, #0]
  40516e:	f7fb f9fb 	bl	400568 <_write>
  405172:	1c43      	adds	r3, r0, #1
  405174:	d000      	beq.n	405178 <_write_r+0x1c>
  405176:	bd70      	pop	{r4, r5, r6, pc}
  405178:	6823      	ldr	r3, [r4, #0]
  40517a:	2b00      	cmp	r3, #0
  40517c:	d0fb      	beq.n	405176 <_write_r+0x1a>
  40517e:	6033      	str	r3, [r6, #0]
  405180:	bd70      	pop	{r4, r5, r6, pc}
  405182:	bf00      	nop
  405184:	20000994 	.word	0x20000994

00405188 <__register_exitproc>:
  405188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40518c:	4c25      	ldr	r4, [pc, #148]	; (405224 <__register_exitproc+0x9c>)
  40518e:	6825      	ldr	r5, [r4, #0]
  405190:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  405194:	4606      	mov	r6, r0
  405196:	4688      	mov	r8, r1
  405198:	4692      	mov	sl, r2
  40519a:	4699      	mov	r9, r3
  40519c:	b3c4      	cbz	r4, 405210 <__register_exitproc+0x88>
  40519e:	6860      	ldr	r0, [r4, #4]
  4051a0:	281f      	cmp	r0, #31
  4051a2:	dc17      	bgt.n	4051d4 <__register_exitproc+0x4c>
  4051a4:	1c43      	adds	r3, r0, #1
  4051a6:	b176      	cbz	r6, 4051c6 <__register_exitproc+0x3e>
  4051a8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4051ac:	2201      	movs	r2, #1
  4051ae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4051b2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4051b6:	4082      	lsls	r2, r0
  4051b8:	4311      	orrs	r1, r2
  4051ba:	2e02      	cmp	r6, #2
  4051bc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4051c0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4051c4:	d01e      	beq.n	405204 <__register_exitproc+0x7c>
  4051c6:	3002      	adds	r0, #2
  4051c8:	6063      	str	r3, [r4, #4]
  4051ca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4051ce:	2000      	movs	r0, #0
  4051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4051d4:	4b14      	ldr	r3, [pc, #80]	; (405228 <__register_exitproc+0xa0>)
  4051d6:	b303      	cbz	r3, 40521a <__register_exitproc+0x92>
  4051d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4051dc:	f7fb ff2a 	bl	401034 <malloc>
  4051e0:	4604      	mov	r4, r0
  4051e2:	b1d0      	cbz	r0, 40521a <__register_exitproc+0x92>
  4051e4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4051e8:	2700      	movs	r7, #0
  4051ea:	e880 0088 	stmia.w	r0, {r3, r7}
  4051ee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4051f2:	4638      	mov	r0, r7
  4051f4:	2301      	movs	r3, #1
  4051f6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4051fa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4051fe:	2e00      	cmp	r6, #0
  405200:	d0e1      	beq.n	4051c6 <__register_exitproc+0x3e>
  405202:	e7d1      	b.n	4051a8 <__register_exitproc+0x20>
  405204:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  405208:	430a      	orrs	r2, r1
  40520a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40520e:	e7da      	b.n	4051c6 <__register_exitproc+0x3e>
  405210:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  405214:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405218:	e7c1      	b.n	40519e <__register_exitproc+0x16>
  40521a:	f04f 30ff 	mov.w	r0, #4294967295
  40521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405222:	bf00      	nop
  405224:	00405788 	.word	0x00405788
  405228:	00401035 	.word	0x00401035

0040522c <_close_r>:
  40522c:	b538      	push	{r3, r4, r5, lr}
  40522e:	4c07      	ldr	r4, [pc, #28]	; (40524c <_close_r+0x20>)
  405230:	2300      	movs	r3, #0
  405232:	4605      	mov	r5, r0
  405234:	4608      	mov	r0, r1
  405236:	6023      	str	r3, [r4, #0]
  405238:	f7fb fc62 	bl	400b00 <_close>
  40523c:	1c43      	adds	r3, r0, #1
  40523e:	d000      	beq.n	405242 <_close_r+0x16>
  405240:	bd38      	pop	{r3, r4, r5, pc}
  405242:	6823      	ldr	r3, [r4, #0]
  405244:	2b00      	cmp	r3, #0
  405246:	d0fb      	beq.n	405240 <_close_r+0x14>
  405248:	602b      	str	r3, [r5, #0]
  40524a:	bd38      	pop	{r3, r4, r5, pc}
  40524c:	20000994 	.word	0x20000994

00405250 <_fclose_r>:
  405250:	2900      	cmp	r1, #0
  405252:	d03d      	beq.n	4052d0 <_fclose_r+0x80>
  405254:	b570      	push	{r4, r5, r6, lr}
  405256:	4605      	mov	r5, r0
  405258:	460c      	mov	r4, r1
  40525a:	b108      	cbz	r0, 405260 <_fclose_r+0x10>
  40525c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40525e:	b37b      	cbz	r3, 4052c0 <_fclose_r+0x70>
  405260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405264:	b90b      	cbnz	r3, 40526a <_fclose_r+0x1a>
  405266:	2000      	movs	r0, #0
  405268:	bd70      	pop	{r4, r5, r6, pc}
  40526a:	4621      	mov	r1, r4
  40526c:	4628      	mov	r0, r5
  40526e:	f7fe fb7f 	bl	403970 <__sflush_r>
  405272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405274:	4606      	mov	r6, r0
  405276:	b133      	cbz	r3, 405286 <_fclose_r+0x36>
  405278:	69e1      	ldr	r1, [r4, #28]
  40527a:	4628      	mov	r0, r5
  40527c:	4798      	blx	r3
  40527e:	2800      	cmp	r0, #0
  405280:	bfb8      	it	lt
  405282:	f04f 36ff 	movlt.w	r6, #4294967295
  405286:	89a3      	ldrh	r3, [r4, #12]
  405288:	061b      	lsls	r3, r3, #24
  40528a:	d41c      	bmi.n	4052c6 <_fclose_r+0x76>
  40528c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40528e:	b141      	cbz	r1, 4052a2 <_fclose_r+0x52>
  405290:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405294:	4299      	cmp	r1, r3
  405296:	d002      	beq.n	40529e <_fclose_r+0x4e>
  405298:	4628      	mov	r0, r5
  40529a:	f7fe fe4b 	bl	403f34 <_free_r>
  40529e:	2300      	movs	r3, #0
  4052a0:	6323      	str	r3, [r4, #48]	; 0x30
  4052a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4052a4:	b121      	cbz	r1, 4052b0 <_fclose_r+0x60>
  4052a6:	4628      	mov	r0, r5
  4052a8:	f7fe fe44 	bl	403f34 <_free_r>
  4052ac:	2300      	movs	r3, #0
  4052ae:	6463      	str	r3, [r4, #68]	; 0x44
  4052b0:	f7fe fcae 	bl	403c10 <__sfp_lock_acquire>
  4052b4:	2300      	movs	r3, #0
  4052b6:	81a3      	strh	r3, [r4, #12]
  4052b8:	f7fe fcac 	bl	403c14 <__sfp_lock_release>
  4052bc:	4630      	mov	r0, r6
  4052be:	bd70      	pop	{r4, r5, r6, pc}
  4052c0:	f7fe fca0 	bl	403c04 <__sinit>
  4052c4:	e7cc      	b.n	405260 <_fclose_r+0x10>
  4052c6:	6921      	ldr	r1, [r4, #16]
  4052c8:	4628      	mov	r0, r5
  4052ca:	f7fe fe33 	bl	403f34 <_free_r>
  4052ce:	e7dd      	b.n	40528c <_fclose_r+0x3c>
  4052d0:	2000      	movs	r0, #0
  4052d2:	4770      	bx	lr

004052d4 <_fstat_r>:
  4052d4:	b538      	push	{r3, r4, r5, lr}
  4052d6:	460b      	mov	r3, r1
  4052d8:	4c07      	ldr	r4, [pc, #28]	; (4052f8 <_fstat_r+0x24>)
  4052da:	4605      	mov	r5, r0
  4052dc:	4611      	mov	r1, r2
  4052de:	4618      	mov	r0, r3
  4052e0:	2300      	movs	r3, #0
  4052e2:	6023      	str	r3, [r4, #0]
  4052e4:	f7fb fc10 	bl	400b08 <_fstat>
  4052e8:	1c43      	adds	r3, r0, #1
  4052ea:	d000      	beq.n	4052ee <_fstat_r+0x1a>
  4052ec:	bd38      	pop	{r3, r4, r5, pc}
  4052ee:	6823      	ldr	r3, [r4, #0]
  4052f0:	2b00      	cmp	r3, #0
  4052f2:	d0fb      	beq.n	4052ec <_fstat_r+0x18>
  4052f4:	602b      	str	r3, [r5, #0]
  4052f6:	bd38      	pop	{r3, r4, r5, pc}
  4052f8:	20000994 	.word	0x20000994

004052fc <_isatty_r>:
  4052fc:	b538      	push	{r3, r4, r5, lr}
  4052fe:	4c07      	ldr	r4, [pc, #28]	; (40531c <_isatty_r+0x20>)
  405300:	2300      	movs	r3, #0
  405302:	4605      	mov	r5, r0
  405304:	4608      	mov	r0, r1
  405306:	6023      	str	r3, [r4, #0]
  405308:	f7fb fc04 	bl	400b14 <_isatty>
  40530c:	1c43      	adds	r3, r0, #1
  40530e:	d000      	beq.n	405312 <_isatty_r+0x16>
  405310:	bd38      	pop	{r3, r4, r5, pc}
  405312:	6823      	ldr	r3, [r4, #0]
  405314:	2b00      	cmp	r3, #0
  405316:	d0fb      	beq.n	405310 <_isatty_r+0x14>
  405318:	602b      	str	r3, [r5, #0]
  40531a:	bd38      	pop	{r3, r4, r5, pc}
  40531c:	20000994 	.word	0x20000994

00405320 <_lseek_r>:
  405320:	b570      	push	{r4, r5, r6, lr}
  405322:	460d      	mov	r5, r1
  405324:	4c08      	ldr	r4, [pc, #32]	; (405348 <_lseek_r+0x28>)
  405326:	4611      	mov	r1, r2
  405328:	4606      	mov	r6, r0
  40532a:	461a      	mov	r2, r3
  40532c:	4628      	mov	r0, r5
  40532e:	2300      	movs	r3, #0
  405330:	6023      	str	r3, [r4, #0]
  405332:	f7fb fbf1 	bl	400b18 <_lseek>
  405336:	1c43      	adds	r3, r0, #1
  405338:	d000      	beq.n	40533c <_lseek_r+0x1c>
  40533a:	bd70      	pop	{r4, r5, r6, pc}
  40533c:	6823      	ldr	r3, [r4, #0]
  40533e:	2b00      	cmp	r3, #0
  405340:	d0fb      	beq.n	40533a <_lseek_r+0x1a>
  405342:	6033      	str	r3, [r6, #0]
  405344:	bd70      	pop	{r4, r5, r6, pc}
  405346:	bf00      	nop
  405348:	20000994 	.word	0x20000994

0040534c <_read_r>:
  40534c:	b570      	push	{r4, r5, r6, lr}
  40534e:	460d      	mov	r5, r1
  405350:	4c08      	ldr	r4, [pc, #32]	; (405374 <_read_r+0x28>)
  405352:	4611      	mov	r1, r2
  405354:	4606      	mov	r6, r0
  405356:	461a      	mov	r2, r3
  405358:	4628      	mov	r0, r5
  40535a:	2300      	movs	r3, #0
  40535c:	6023      	str	r3, [r4, #0]
  40535e:	f7fb f8e5 	bl	40052c <_read>
  405362:	1c43      	adds	r3, r0, #1
  405364:	d000      	beq.n	405368 <_read_r+0x1c>
  405366:	bd70      	pop	{r4, r5, r6, pc}
  405368:	6823      	ldr	r3, [r4, #0]
  40536a:	2b00      	cmp	r3, #0
  40536c:	d0fb      	beq.n	405366 <_read_r+0x1a>
  40536e:	6033      	str	r3, [r6, #0]
  405370:	bd70      	pop	{r4, r5, r6, pc}
  405372:	bf00      	nop
  405374:	20000994 	.word	0x20000994

00405378 <__aeabi_uldivmod>:
  405378:	b953      	cbnz	r3, 405390 <__aeabi_uldivmod+0x18>
  40537a:	b94a      	cbnz	r2, 405390 <__aeabi_uldivmod+0x18>
  40537c:	2900      	cmp	r1, #0
  40537e:	bf08      	it	eq
  405380:	2800      	cmpeq	r0, #0
  405382:	bf1c      	itt	ne
  405384:	f04f 31ff 	movne.w	r1, #4294967295
  405388:	f04f 30ff 	movne.w	r0, #4294967295
  40538c:	f000 b97e 	b.w	40568c <__aeabi_idiv0>
  405390:	f1ad 0c08 	sub.w	ip, sp, #8
  405394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405398:	f000 f806 	bl	4053a8 <__udivmoddi4>
  40539c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4053a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4053a4:	b004      	add	sp, #16
  4053a6:	4770      	bx	lr

004053a8 <__udivmoddi4>:
  4053a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4053ac:	468c      	mov	ip, r1
  4053ae:	460e      	mov	r6, r1
  4053b0:	4604      	mov	r4, r0
  4053b2:	9d08      	ldr	r5, [sp, #32]
  4053b4:	2b00      	cmp	r3, #0
  4053b6:	d150      	bne.n	40545a <__udivmoddi4+0xb2>
  4053b8:	428a      	cmp	r2, r1
  4053ba:	4617      	mov	r7, r2
  4053bc:	d96c      	bls.n	405498 <__udivmoddi4+0xf0>
  4053be:	fab2 fe82 	clz	lr, r2
  4053c2:	f1be 0f00 	cmp.w	lr, #0
  4053c6:	d00b      	beq.n	4053e0 <__udivmoddi4+0x38>
  4053c8:	f1ce 0420 	rsb	r4, lr, #32
  4053cc:	fa20 f404 	lsr.w	r4, r0, r4
  4053d0:	fa01 f60e 	lsl.w	r6, r1, lr
  4053d4:	ea44 0c06 	orr.w	ip, r4, r6
  4053d8:	fa02 f70e 	lsl.w	r7, r2, lr
  4053dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4053e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4053e4:	0c22      	lsrs	r2, r4, #16
  4053e6:	fbbc f0f9 	udiv	r0, ip, r9
  4053ea:	fa1f f887 	uxth.w	r8, r7
  4053ee:	fb09 c610 	mls	r6, r9, r0, ip
  4053f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4053f6:	fb00 f308 	mul.w	r3, r0, r8
  4053fa:	42b3      	cmp	r3, r6
  4053fc:	d909      	bls.n	405412 <__udivmoddi4+0x6a>
  4053fe:	19f6      	adds	r6, r6, r7
  405400:	f100 32ff 	add.w	r2, r0, #4294967295
  405404:	f080 8122 	bcs.w	40564c <__udivmoddi4+0x2a4>
  405408:	42b3      	cmp	r3, r6
  40540a:	f240 811f 	bls.w	40564c <__udivmoddi4+0x2a4>
  40540e:	3802      	subs	r0, #2
  405410:	443e      	add	r6, r7
  405412:	1af6      	subs	r6, r6, r3
  405414:	b2a2      	uxth	r2, r4
  405416:	fbb6 f3f9 	udiv	r3, r6, r9
  40541a:	fb09 6613 	mls	r6, r9, r3, r6
  40541e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  405422:	fb03 f808 	mul.w	r8, r3, r8
  405426:	45a0      	cmp	r8, r4
  405428:	d909      	bls.n	40543e <__udivmoddi4+0x96>
  40542a:	19e4      	adds	r4, r4, r7
  40542c:	f103 32ff 	add.w	r2, r3, #4294967295
  405430:	f080 810a 	bcs.w	405648 <__udivmoddi4+0x2a0>
  405434:	45a0      	cmp	r8, r4
  405436:	f240 8107 	bls.w	405648 <__udivmoddi4+0x2a0>
  40543a:	3b02      	subs	r3, #2
  40543c:	443c      	add	r4, r7
  40543e:	ebc8 0404 	rsb	r4, r8, r4
  405442:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  405446:	2100      	movs	r1, #0
  405448:	2d00      	cmp	r5, #0
  40544a:	d062      	beq.n	405512 <__udivmoddi4+0x16a>
  40544c:	fa24 f40e 	lsr.w	r4, r4, lr
  405450:	2300      	movs	r3, #0
  405452:	602c      	str	r4, [r5, #0]
  405454:	606b      	str	r3, [r5, #4]
  405456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40545a:	428b      	cmp	r3, r1
  40545c:	d907      	bls.n	40546e <__udivmoddi4+0xc6>
  40545e:	2d00      	cmp	r5, #0
  405460:	d055      	beq.n	40550e <__udivmoddi4+0x166>
  405462:	2100      	movs	r1, #0
  405464:	e885 0041 	stmia.w	r5, {r0, r6}
  405468:	4608      	mov	r0, r1
  40546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40546e:	fab3 f183 	clz	r1, r3
  405472:	2900      	cmp	r1, #0
  405474:	f040 8090 	bne.w	405598 <__udivmoddi4+0x1f0>
  405478:	42b3      	cmp	r3, r6
  40547a:	d302      	bcc.n	405482 <__udivmoddi4+0xda>
  40547c:	4282      	cmp	r2, r0
  40547e:	f200 80f8 	bhi.w	405672 <__udivmoddi4+0x2ca>
  405482:	1a84      	subs	r4, r0, r2
  405484:	eb66 0603 	sbc.w	r6, r6, r3
  405488:	2001      	movs	r0, #1
  40548a:	46b4      	mov	ip, r6
  40548c:	2d00      	cmp	r5, #0
  40548e:	d040      	beq.n	405512 <__udivmoddi4+0x16a>
  405490:	e885 1010 	stmia.w	r5, {r4, ip}
  405494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405498:	b912      	cbnz	r2, 4054a0 <__udivmoddi4+0xf8>
  40549a:	2701      	movs	r7, #1
  40549c:	fbb7 f7f2 	udiv	r7, r7, r2
  4054a0:	fab7 fe87 	clz	lr, r7
  4054a4:	f1be 0f00 	cmp.w	lr, #0
  4054a8:	d135      	bne.n	405516 <__udivmoddi4+0x16e>
  4054aa:	1bf3      	subs	r3, r6, r7
  4054ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4054b0:	fa1f fc87 	uxth.w	ip, r7
  4054b4:	2101      	movs	r1, #1
  4054b6:	fbb3 f0f8 	udiv	r0, r3, r8
  4054ba:	0c22      	lsrs	r2, r4, #16
  4054bc:	fb08 3610 	mls	r6, r8, r0, r3
  4054c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4054c4:	fb0c f300 	mul.w	r3, ip, r0
  4054c8:	42b3      	cmp	r3, r6
  4054ca:	d907      	bls.n	4054dc <__udivmoddi4+0x134>
  4054cc:	19f6      	adds	r6, r6, r7
  4054ce:	f100 32ff 	add.w	r2, r0, #4294967295
  4054d2:	d202      	bcs.n	4054da <__udivmoddi4+0x132>
  4054d4:	42b3      	cmp	r3, r6
  4054d6:	f200 80ce 	bhi.w	405676 <__udivmoddi4+0x2ce>
  4054da:	4610      	mov	r0, r2
  4054dc:	1af6      	subs	r6, r6, r3
  4054de:	b2a2      	uxth	r2, r4
  4054e0:	fbb6 f3f8 	udiv	r3, r6, r8
  4054e4:	fb08 6613 	mls	r6, r8, r3, r6
  4054e8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4054ec:	fb0c fc03 	mul.w	ip, ip, r3
  4054f0:	45a4      	cmp	ip, r4
  4054f2:	d907      	bls.n	405504 <__udivmoddi4+0x15c>
  4054f4:	19e4      	adds	r4, r4, r7
  4054f6:	f103 32ff 	add.w	r2, r3, #4294967295
  4054fa:	d202      	bcs.n	405502 <__udivmoddi4+0x15a>
  4054fc:	45a4      	cmp	ip, r4
  4054fe:	f200 80b5 	bhi.w	40566c <__udivmoddi4+0x2c4>
  405502:	4613      	mov	r3, r2
  405504:	ebcc 0404 	rsb	r4, ip, r4
  405508:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40550c:	e79c      	b.n	405448 <__udivmoddi4+0xa0>
  40550e:	4629      	mov	r1, r5
  405510:	4628      	mov	r0, r5
  405512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405516:	f1ce 0120 	rsb	r1, lr, #32
  40551a:	fa06 f30e 	lsl.w	r3, r6, lr
  40551e:	fa07 f70e 	lsl.w	r7, r7, lr
  405522:	fa20 f901 	lsr.w	r9, r0, r1
  405526:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40552a:	40ce      	lsrs	r6, r1
  40552c:	ea49 0903 	orr.w	r9, r9, r3
  405530:	fbb6 faf8 	udiv	sl, r6, r8
  405534:	ea4f 4419 	mov.w	r4, r9, lsr #16
  405538:	fb08 661a 	mls	r6, r8, sl, r6
  40553c:	fa1f fc87 	uxth.w	ip, r7
  405540:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  405544:	fb0a f20c 	mul.w	r2, sl, ip
  405548:	429a      	cmp	r2, r3
  40554a:	fa00 f40e 	lsl.w	r4, r0, lr
  40554e:	d90a      	bls.n	405566 <__udivmoddi4+0x1be>
  405550:	19db      	adds	r3, r3, r7
  405552:	f10a 31ff 	add.w	r1, sl, #4294967295
  405556:	f080 8087 	bcs.w	405668 <__udivmoddi4+0x2c0>
  40555a:	429a      	cmp	r2, r3
  40555c:	f240 8084 	bls.w	405668 <__udivmoddi4+0x2c0>
  405560:	f1aa 0a02 	sub.w	sl, sl, #2
  405564:	443b      	add	r3, r7
  405566:	1a9b      	subs	r3, r3, r2
  405568:	fa1f f989 	uxth.w	r9, r9
  40556c:	fbb3 f1f8 	udiv	r1, r3, r8
  405570:	fb08 3311 	mls	r3, r8, r1, r3
  405574:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  405578:	fb01 f60c 	mul.w	r6, r1, ip
  40557c:	429e      	cmp	r6, r3
  40557e:	d907      	bls.n	405590 <__udivmoddi4+0x1e8>
  405580:	19db      	adds	r3, r3, r7
  405582:	f101 32ff 	add.w	r2, r1, #4294967295
  405586:	d26b      	bcs.n	405660 <__udivmoddi4+0x2b8>
  405588:	429e      	cmp	r6, r3
  40558a:	d969      	bls.n	405660 <__udivmoddi4+0x2b8>
  40558c:	3902      	subs	r1, #2
  40558e:	443b      	add	r3, r7
  405590:	1b9b      	subs	r3, r3, r6
  405592:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  405596:	e78e      	b.n	4054b6 <__udivmoddi4+0x10e>
  405598:	f1c1 0e20 	rsb	lr, r1, #32
  40559c:	fa22 f40e 	lsr.w	r4, r2, lr
  4055a0:	408b      	lsls	r3, r1
  4055a2:	4323      	orrs	r3, r4
  4055a4:	fa20 f70e 	lsr.w	r7, r0, lr
  4055a8:	fa06 f401 	lsl.w	r4, r6, r1
  4055ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4055b0:	fa26 f60e 	lsr.w	r6, r6, lr
  4055b4:	433c      	orrs	r4, r7
  4055b6:	fbb6 f9fc 	udiv	r9, r6, ip
  4055ba:	0c27      	lsrs	r7, r4, #16
  4055bc:	fb0c 6619 	mls	r6, ip, r9, r6
  4055c0:	fa1f f883 	uxth.w	r8, r3
  4055c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4055c8:	fb09 f708 	mul.w	r7, r9, r8
  4055cc:	42b7      	cmp	r7, r6
  4055ce:	fa02 f201 	lsl.w	r2, r2, r1
  4055d2:	fa00 fa01 	lsl.w	sl, r0, r1
  4055d6:	d908      	bls.n	4055ea <__udivmoddi4+0x242>
  4055d8:	18f6      	adds	r6, r6, r3
  4055da:	f109 30ff 	add.w	r0, r9, #4294967295
  4055de:	d241      	bcs.n	405664 <__udivmoddi4+0x2bc>
  4055e0:	42b7      	cmp	r7, r6
  4055e2:	d93f      	bls.n	405664 <__udivmoddi4+0x2bc>
  4055e4:	f1a9 0902 	sub.w	r9, r9, #2
  4055e8:	441e      	add	r6, r3
  4055ea:	1bf6      	subs	r6, r6, r7
  4055ec:	b2a0      	uxth	r0, r4
  4055ee:	fbb6 f4fc 	udiv	r4, r6, ip
  4055f2:	fb0c 6614 	mls	r6, ip, r4, r6
  4055f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4055fa:	fb04 f808 	mul.w	r8, r4, r8
  4055fe:	45b8      	cmp	r8, r7
  405600:	d907      	bls.n	405612 <__udivmoddi4+0x26a>
  405602:	18ff      	adds	r7, r7, r3
  405604:	f104 30ff 	add.w	r0, r4, #4294967295
  405608:	d228      	bcs.n	40565c <__udivmoddi4+0x2b4>
  40560a:	45b8      	cmp	r8, r7
  40560c:	d926      	bls.n	40565c <__udivmoddi4+0x2b4>
  40560e:	3c02      	subs	r4, #2
  405610:	441f      	add	r7, r3
  405612:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  405616:	ebc8 0707 	rsb	r7, r8, r7
  40561a:	fba0 8902 	umull	r8, r9, r0, r2
  40561e:	454f      	cmp	r7, r9
  405620:	4644      	mov	r4, r8
  405622:	464e      	mov	r6, r9
  405624:	d314      	bcc.n	405650 <__udivmoddi4+0x2a8>
  405626:	d029      	beq.n	40567c <__udivmoddi4+0x2d4>
  405628:	b365      	cbz	r5, 405684 <__udivmoddi4+0x2dc>
  40562a:	ebba 0304 	subs.w	r3, sl, r4
  40562e:	eb67 0706 	sbc.w	r7, r7, r6
  405632:	fa07 fe0e 	lsl.w	lr, r7, lr
  405636:	40cb      	lsrs	r3, r1
  405638:	40cf      	lsrs	r7, r1
  40563a:	ea4e 0303 	orr.w	r3, lr, r3
  40563e:	e885 0088 	stmia.w	r5, {r3, r7}
  405642:	2100      	movs	r1, #0
  405644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405648:	4613      	mov	r3, r2
  40564a:	e6f8      	b.n	40543e <__udivmoddi4+0x96>
  40564c:	4610      	mov	r0, r2
  40564e:	e6e0      	b.n	405412 <__udivmoddi4+0x6a>
  405650:	ebb8 0402 	subs.w	r4, r8, r2
  405654:	eb69 0603 	sbc.w	r6, r9, r3
  405658:	3801      	subs	r0, #1
  40565a:	e7e5      	b.n	405628 <__udivmoddi4+0x280>
  40565c:	4604      	mov	r4, r0
  40565e:	e7d8      	b.n	405612 <__udivmoddi4+0x26a>
  405660:	4611      	mov	r1, r2
  405662:	e795      	b.n	405590 <__udivmoddi4+0x1e8>
  405664:	4681      	mov	r9, r0
  405666:	e7c0      	b.n	4055ea <__udivmoddi4+0x242>
  405668:	468a      	mov	sl, r1
  40566a:	e77c      	b.n	405566 <__udivmoddi4+0x1be>
  40566c:	3b02      	subs	r3, #2
  40566e:	443c      	add	r4, r7
  405670:	e748      	b.n	405504 <__udivmoddi4+0x15c>
  405672:	4608      	mov	r0, r1
  405674:	e70a      	b.n	40548c <__udivmoddi4+0xe4>
  405676:	3802      	subs	r0, #2
  405678:	443e      	add	r6, r7
  40567a:	e72f      	b.n	4054dc <__udivmoddi4+0x134>
  40567c:	45c2      	cmp	sl, r8
  40567e:	d3e7      	bcc.n	405650 <__udivmoddi4+0x2a8>
  405680:	463e      	mov	r6, r7
  405682:	e7d1      	b.n	405628 <__udivmoddi4+0x280>
  405684:	4629      	mov	r1, r5
  405686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40568a:	bf00      	nop

0040568c <__aeabi_idiv0>:
  40568c:	4770      	bx	lr
  40568e:	bf00      	nop
  405690:	4f525245 	.word	0x4f525245
  405694:	6f203a52 	.word	0x6f203a52
  405698:	6f207475 	.word	0x6f207475
  40569c:	656d2066 	.word	0x656d2066
  4056a0:	79726f6d 	.word	0x79726f6d
  4056a4:	00000d0a 	.word	0x00000d0a
  4056a8:	4f525245 	.word	0x4f525245
  4056ac:	72203a52 	.word	0x72203a52
  4056b0:	6574756f 	.word	0x6574756f
  4056b4:	746f6e20 	.word	0x746f6e20
  4056b8:	756f6620 	.word	0x756f6620
  4056bc:	0d0a646e 	.word	0x0d0a646e
  4056c0:	00000000 	.word	0x00000000
  4056c4:	4f525245 	.word	0x4f525245
  4056c8:	25203a52 	.word	0x25203a52
  4056cc:	000d0a64 	.word	0x000d0a64
  4056d0:	6b636150 	.word	0x6b636150
  4056d4:	73207465 	.word	0x73207465
  4056d8:	21746e65 	.word	0x21746e65
  4056dc:	00000d0a 	.word	0x00000d0a
  4056e0:	414c414c 	.word	0x414c414c
  4056e4:	0d0a414c 	.word	0x0d0a414c
  4056e8:	00000000 	.word	0x00000000
  4056ec:	20495053 	.word	0x20495053
  4056f0:	7373656d 	.word	0x7373656d
  4056f4:	20656761 	.word	0x20656761
  4056f8:	65636572 	.word	0x65636572
  4056fc:	64657669 	.word	0x64657669
  405700:	64252320 	.word	0x64252320
  405704:	00000d0a 	.word	0x00000d0a
  405708:	52202d2d 	.word	0x52202d2d
  40570c:	48207761 	.word	0x48207761
  405710:	20505454 	.word	0x20505454
  405714:	69736142 	.word	0x69736142
  405718:	78452063 	.word	0x78452063
  40571c:	6c706d61 	.word	0x6c706d61
  405720:	2d2d2065 	.word	0x2d2d2065
  405724:	2d2d0a0d 	.word	0x2d2d0a0d
  405728:	4d415320 	.word	0x4d415320
  40572c:	582d4534 	.word	0x582d4534
  405730:	204f5250 	.word	0x204f5250
  405734:	0a0d2d2d 	.word	0x0a0d2d2d
  405738:	43202d2d 	.word	0x43202d2d
  40573c:	69706d6f 	.word	0x69706d6f
  405740:	3a64656c 	.word	0x3a64656c
  405744:	63654420 	.word	0x63654420
  405748:	20322020 	.word	0x20322020
  40574c:	36313032 	.word	0x36313032
  405750:	3a323220 	.word	0x3a323220
  405754:	313a3431 	.word	0x313a3431
  405758:	2d2d2035 	.word	0x2d2d2035
  40575c:	00000a0d 	.word	0x00000a0d
  405760:	202d492d 	.word	0x202d492d
  405764:	74696e49 	.word	0x74696e49
  405768:	696c6169 	.word	0x696c6169
  40576c:	5320657a 	.word	0x5320657a
  405770:	61204950 	.word	0x61204950
  405774:	6c732073 	.word	0x6c732073
  405778:	20657661 	.word	0x20657661
  40577c:	0000000d 	.word	0x0000000d
  405780:	00006325 	.word	0x00006325
  405784:	00000043 	.word	0x00000043

00405788 <_global_impure_ptr>:
  405788:	20000010 0000000a                       ... ....

00405790 <zeroes.6993>:
  405790:	30303030 30303030 30303030 30303030     0000000000000000
  4057a0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4057b0:	00000000 33323130 37363534 62613938     ....0123456789ab
  4057c0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

004057d0 <blanks.6992>:
  4057d0:	20202020 20202020 20202020 20202020                     

004057e0 <basefix.6460>:
  4057e0:	0001000a 00030002 00050004 00070006     ................
  4057f0:	00090008 000b000a 000d000c 000f000e     ................
  405800:	00000010                                ....

00405804 <_ctype_>:
  405804:	20202000 20202020 28282020 20282828     .         ((((( 
  405814:	20202020 20202020 20202020 20202020                     
  405824:	10108820 10101010 10101010 10101010      ...............
  405834:	04040410 04040404 10040404 10101010     ................
  405844:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405854:	01010101 01010101 01010101 10101010     ................
  405864:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405874:	02020202 02020202 02020202 10101010     ................
  405884:	00000020 00000000 00000000 00000000      ...............
	...

00405908 <_init>:
  405908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40590a:	bf00      	nop
  40590c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40590e:	bc08      	pop	{r3}
  405910:	469e      	mov	lr, r3
  405912:	4770      	bx	lr

00405914 <__init_array_start>:
  405914:	00403951 	.word	0x00403951

00405918 <__frame_dummy_init_array_entry>:
  405918:	0040011d                                ..@.

0040591c <_fini>:
  40591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40591e:	bf00      	nop
  405920:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405922:	bc08      	pop	{r3}
  405924:	469e      	mov	lr, r3
  405926:	4770      	bx	lr

00405928 <__fini_array_start>:
  405928:	004000f9 	.word	0x004000f9
